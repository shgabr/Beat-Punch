
nucleo-l432kc-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053fc  080053fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005404  08005404  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800540c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000074  08005480  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08005480  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cdf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230b  00000000  00000000  00033d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00036090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00037000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f71  00000000  00000000  00037e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011229  00000000  00000000  00059e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd17f  00000000  00000000  0006b032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001381b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba8  00000000  00000000  00138204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005218 	.word	0x08005218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005218 	.word	0x08005218

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0a0      	sub	sp, #128	; 0x80
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fe12 	bl	8001196 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 fa3b 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 fb45 	bl	8000c04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 fb13 	bl	8000ba4 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800057e:	f000 faeb 	bl	8000b58 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000582:	f000 fa95 	bl	8000ab0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);
 8000586:	48a0      	ldr	r0, [pc, #640]	; (8000808 <main+0x2a0>)
 8000588:	f002 fb42 	bl	8002c10 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	67fb      	str	r3, [r7, #124]	; 0x7c
  int sum = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	67bb      	str	r3, [r7, #120]	; 0x78
  int average = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	66fb      	str	r3, [r7, #108]	; 0x6c
  char buff [100] = {0};
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2260      	movs	r2, #96	; 0x60
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 fc5b 	bl	8003e60 <memset>
  int once = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	677b      	str	r3, [r7, #116]	; 0x74

  HAL_Delay(5000);
 80005ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80005b2:	f000 fe65 	bl	8001280 <HAL_Delay>
  uint16_t end_time, start_time = __HAL_TIM_GET_COUNTER(&htim16);
 80005b6:	4b94      	ldr	r3, [pc, #592]	; (8000808 <main+0x2a0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005bc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  while (1)
  {
	  flag = 0;
 80005c0:	4b92      	ldr	r3, [pc, #584]	; (800080c <main+0x2a4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	  if (counter < 50 ){
 80005c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005c8:	2b31      	cmp	r3, #49	; 0x31
 80005ca:	f300 81b9 	bgt.w	8000940 <main+0x3d8>
		  rand_num = rand()%6;
 80005ce:	f003 fc4f 	bl	8003e70 <rand>
 80005d2:	4601      	mov	r1, r0
 80005d4:	4b8e      	ldr	r3, [pc, #568]	; (8000810 <main+0x2a8>)
 80005d6:	fb83 3201 	smull	r3, r2, r3, r1
 80005da:	17cb      	asrs	r3, r1, #31
 80005dc:	1ad2      	subs	r2, r2, r3
 80005de:	4613      	mov	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	4413      	add	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	1aca      	subs	r2, r1, r3
 80005e8:	4b8a      	ldr	r3, [pc, #552]	; (8000814 <main+0x2ac>)
 80005ea:	601a      	str	r2, [r3, #0]
		  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80005ec:	4b86      	ldr	r3, [pc, #536]	; (8000808 <main+0x2a0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b88      	ldr	r3, [pc, #544]	; (8000818 <main+0x2b0>)
 80005f6:	801a      	strh	r2, [r3, #0]
		  if (rand_num == 0)
 80005f8:	4b86      	ldr	r3, [pc, #536]	; (8000814 <main+0x2ac>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d106      	bne.n	800060e <main+0xa6>
			  HAL_GPIO_WritePin(GPIOA, LED0_Pin, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	2102      	movs	r1, #2
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f001 f8f2 	bl	80017f0 <HAL_GPIO_WritePin>
 800060c:	e037      	b.n	800067e <main+0x116>
		  else if (rand_num == 1)
 800060e:	4b81      	ldr	r3, [pc, #516]	; (8000814 <main+0x2ac>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d106      	bne.n	8000624 <main+0xbc>
			  HAL_GPIO_WritePin(GPIOA, LED1_Pin,1);
 8000616:	2201      	movs	r2, #1
 8000618:	2108      	movs	r1, #8
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f001 f8e7 	bl	80017f0 <HAL_GPIO_WritePin>
 8000622:	e02c      	b.n	800067e <main+0x116>
		  else if (rand_num == 2)
 8000624:	4b7b      	ldr	r3, [pc, #492]	; (8000814 <main+0x2ac>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d106      	bne.n	800063a <main+0xd2>
				  HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f001 f8dc 	bl	80017f0 <HAL_GPIO_WritePin>
 8000638:	e021      	b.n	800067e <main+0x116>
		  else if (rand_num == 3)
 800063a:	4b76      	ldr	r3, [pc, #472]	; (8000814 <main+0x2ac>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b03      	cmp	r3, #3
 8000640:	d107      	bne.n	8000652 <main+0xea>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064c:	f001 f8d0 	bl	80017f0 <HAL_GPIO_WritePin>
 8000650:	e015      	b.n	800067e <main+0x116>
		  else if (rand_num == 4)
 8000652:	4b70      	ldr	r3, [pc, #448]	; (8000814 <main+0x2ac>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b04      	cmp	r3, #4
 8000658:	d107      	bne.n	800066a <main+0x102>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 f8c4 	bl	80017f0 <HAL_GPIO_WritePin>
 8000668:	e009      	b.n	800067e <main+0x116>
		  else if (rand_num == 5)
 800066a:	4b6a      	ldr	r3, [pc, #424]	; (8000814 <main+0x2ac>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b05      	cmp	r3, #5
 8000670:	d105      	bne.n	800067e <main+0x116>
				  HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f001 f8b9 	bl	80017f0 <HAL_GPIO_WritePin>

//		  HAL_Delay(5000);
		  state = 1;
 800067e:	4b67      	ldr	r3, [pc, #412]	; (800081c <main+0x2b4>)
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
		  flag = 0;
 8000684:	4b61      	ldr	r3, [pc, #388]	; (800080c <main+0x2a4>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim1);
 800068a:	4865      	ldr	r0, [pc, #404]	; (8000820 <main+0x2b8>)
 800068c:	f002 fb0c 	bl	8002ca8 <HAL_TIM_Base_Start_IT>
		  while (state == 1){
 8000690:	e0f0      	b.n	8000874 <main+0x30c>
			if (rand_num == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1){
 8000692:	4b60      	ldr	r3, [pc, #384]	; (8000814 <main+0x2ac>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d120      	bne.n	80006dc <main+0x174>
 800069a:	2101      	movs	r1, #1
 800069c:	4861      	ldr	r0, [pc, #388]	; (8000824 <main+0x2bc>)
 800069e:	f001 f88f 	bl	80017c0 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d119      	bne.n	80006dc <main+0x174>
				HAL_GPIO_WritePin(GPIOA, LED0_Pin, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f001 f89e 	bl	80017f0 <HAL_GPIO_WritePin>
				timer_end = __HAL_TIM_GET_COUNTER(&htim16);
 80006b4:	4b54      	ldr	r3, [pc, #336]	; (8000808 <main+0x2a0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b5a      	ldr	r3, [pc, #360]	; (8000828 <main+0x2c0>)
 80006be:	801a      	strh	r2, [r3, #0]
				state = 0;
 80006c0:	4b56      	ldr	r3, [pc, #344]	; (800081c <main+0x2b4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
				flag = 1;
 80006c6:	4b51      	ldr	r3, [pc, #324]	; (800080c <main+0x2a4>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);
 80006cc:	4854      	ldr	r0, [pc, #336]	; (8000820 <main+0x2b8>)
 80006ce:	f002 fb3f 	bl	8002d50 <HAL_TIM_Base_Stop_IT>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 80006d2:	4b53      	ldr	r3, [pc, #332]	; (8000820 <main+0x2b8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
 80006da:	e0cb      	b.n	8000874 <main+0x30c>
			}
			else if (rand_num == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1){
 80006dc:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <main+0x2ac>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d120      	bne.n	8000726 <main+0x1be>
 80006e4:	2102      	movs	r1, #2
 80006e6:	484f      	ldr	r0, [pc, #316]	; (8000824 <main+0x2bc>)
 80006e8:	f001 f86a 	bl	80017c0 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d119      	bne.n	8000726 <main+0x1be>
				HAL_GPIO_WritePin(GPIOA, LED1_Pin,0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f001 f879 	bl	80017f0 <HAL_GPIO_WritePin>
				timer_end = __HAL_TIM_GET_COUNTER(&htim16);
 80006fe:	4b42      	ldr	r3, [pc, #264]	; (8000808 <main+0x2a0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000704:	b29a      	uxth	r2, r3
 8000706:	4b48      	ldr	r3, [pc, #288]	; (8000828 <main+0x2c0>)
 8000708:	801a      	strh	r2, [r3, #0]
				state = 0;
 800070a:	4b44      	ldr	r3, [pc, #272]	; (800081c <main+0x2b4>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
				flag = 1;
 8000710:	4b3e      	ldr	r3, [pc, #248]	; (800080c <main+0x2a4>)
 8000712:	2201      	movs	r2, #1
 8000714:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);
 8000716:	4842      	ldr	r0, [pc, #264]	; (8000820 <main+0x2b8>)
 8000718:	f002 fb1a 	bl	8002d50 <HAL_TIM_Base_Stop_IT>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 800071c:	4b40      	ldr	r3, [pc, #256]	; (8000820 <main+0x2b8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
 8000724:	e0a6      	b.n	8000874 <main+0x30c>
			}
			else if (rand_num == 2 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1){
 8000726:	4b3b      	ldr	r3, [pc, #236]	; (8000814 <main+0x2ac>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d120      	bne.n	8000770 <main+0x208>
 800072e:	2110      	movs	r1, #16
 8000730:	483c      	ldr	r0, [pc, #240]	; (8000824 <main+0x2bc>)
 8000732:	f001 f845 	bl	80017c0 <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d119      	bne.n	8000770 <main+0x208>
				HAL_GPIO_WritePin(GPIOA, LED2_Pin, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2110      	movs	r1, #16
 8000740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000744:	f001 f854 	bl	80017f0 <HAL_GPIO_WritePin>
				timer_end = __HAL_TIM_GET_COUNTER(&htim16);
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <main+0x2a0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b35      	ldr	r3, [pc, #212]	; (8000828 <main+0x2c0>)
 8000752:	801a      	strh	r2, [r3, #0]
				state = 0;
 8000754:	4b31      	ldr	r3, [pc, #196]	; (800081c <main+0x2b4>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
				flag = 1;
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <main+0x2a4>)
 800075c:	2201      	movs	r2, #1
 800075e:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);
 8000760:	482f      	ldr	r0, [pc, #188]	; (8000820 <main+0x2b8>)
 8000762:	f002 faf5 	bl	8002d50 <HAL_TIM_Base_Stop_IT>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <main+0x2b8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
 800076e:	e081      	b.n	8000874 <main+0x30c>
			}
			else if (rand_num == 3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1){
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <main+0x2ac>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d121      	bne.n	80007bc <main+0x254>
 8000778:	2120      	movs	r1, #32
 800077a:	482a      	ldr	r0, [pc, #168]	; (8000824 <main+0x2bc>)
 800077c:	f001 f820 	bl	80017c0 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11a      	bne.n	80007bc <main+0x254>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f001 f82e 	bl	80017f0 <HAL_GPIO_WritePin>
				timer_end = __HAL_TIM_GET_COUNTER(&htim16);
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <main+0x2a0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079a:	b29a      	uxth	r2, r3
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <main+0x2c0>)
 800079e:	801a      	strh	r2, [r3, #0]
				state = 0;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <main+0x2b4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
				flag = 1;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <main+0x2a4>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);
 80007ac:	481c      	ldr	r0, [pc, #112]	; (8000820 <main+0x2b8>)
 80007ae:	f002 facf 	bl	8002d50 <HAL_TIM_Base_Stop_IT>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <main+0x2b8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
 80007ba:	e05b      	b.n	8000874 <main+0x30c>
			}
			else if (rand_num == 4 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 1){
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <main+0x2ac>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d133      	bne.n	800082c <main+0x2c4>
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4817      	ldr	r0, [pc, #92]	; (8000824 <main+0x2bc>)
 80007c8:	f000 fffa 	bl	80017c0 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d12c      	bne.n	800082c <main+0x2c4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f001 f808 	bl	80017f0 <HAL_GPIO_WritePin>
				timer_end = __HAL_TIM_GET_COUNTER(&htim16);
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <main+0x2a0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <main+0x2c0>)
 80007ea:	801a      	strh	r2, [r3, #0]
				state = 0;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <main+0x2b4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
				flag = 1;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <main+0x2a4>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <main+0x2b8>)
 80007fa:	f002 faa9 	bl	8002d50 <HAL_TIM_Base_Stop_IT>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <main+0x2b8>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
 8000806:	e035      	b.n	8000874 <main+0x30c>
 8000808:	200001e4 	.word	0x200001e4
 800080c:	200000a4 	.word	0x200000a4
 8000810:	2aaaaaab 	.word	0x2aaaaaab
 8000814:	200000a0 	.word	0x200000a0
 8000818:	2000015c 	.word	0x2000015c
 800081c:	20000000 	.word	0x20000000
 8000820:	20000110 	.word	0x20000110
 8000824:	48000400 	.word	0x48000400
 8000828:	2000009c 	.word	0x2000009c
			}
			else if (rand_num == 5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1){
 800082c:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <main+0x44c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b05      	cmp	r3, #5
 8000832:	d11f      	bne.n	8000874 <main+0x30c>
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	4860      	ldr	r0, [pc, #384]	; (80009b8 <main+0x450>)
 8000838:	f000 ffc2 	bl	80017c0 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d118      	bne.n	8000874 <main+0x30c>
				HAL_GPIO_WritePin(GPIOA, LED5_Pin, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f000 ffd1 	bl	80017f0 <HAL_GPIO_WritePin>
				timer_end = __HAL_TIM_GET_COUNTER(&htim16);
 800084e:	4b5b      	ldr	r3, [pc, #364]	; (80009bc <main+0x454>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b5a      	ldr	r3, [pc, #360]	; (80009c0 <main+0x458>)
 8000858:	801a      	strh	r2, [r3, #0]
				state = 0;
 800085a:	4b5a      	ldr	r3, [pc, #360]	; (80009c4 <main+0x45c>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
				flag = 1;
 8000860:	4b59      	ldr	r3, [pc, #356]	; (80009c8 <main+0x460>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);
 8000866:	4859      	ldr	r0, [pc, #356]	; (80009cc <main+0x464>)
 8000868:	f002 fa72 	bl	8002d50 <HAL_TIM_Base_Stop_IT>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 800086c:	4b57      	ldr	r3, [pc, #348]	; (80009cc <main+0x464>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
		  while (state == 1){
 8000874:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <main+0x45c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	f43f af0a 	beq.w	8000692 <main+0x12a>
			}
		  }
		  HAL_TIM_Base_Stop_IT(&htim1);
 800087e:	4853      	ldr	r0, [pc, #332]	; (80009cc <main+0x464>)
 8000880:	f002 fa66 	bl	8002d50 <HAL_TIM_Base_Stop_IT>

		  HAL_GPIO_WritePin(GPIOA, LED0_Pin, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 ffb0 	bl	80017f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED1_Pin, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2108      	movs	r1, #8
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f000 ffaa 	bl	80017f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED2_Pin, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2110      	movs	r1, #16
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f000 ffa4 	bl	80017f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f000 ff9d 	bl	80017f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f000 ff96 	bl	80017f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED5_Pin, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2180      	movs	r1, #128	; 0x80
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f000 ff90 	bl	80017f0 <HAL_GPIO_WritePin>

		  if (flag == 0) {
 80008d0:	4b3d      	ldr	r3, [pc, #244]	; (80009c8 <main+0x460>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10f      	bne.n	80008f8 <main+0x390>
//			  time_diff = 5000;
			  timer_end = __HAL_TIM_GET_COUNTER(&htim16);
 80008d8:	4b38      	ldr	r3, [pc, #224]	; (80009bc <main+0x454>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b37      	ldr	r3, [pc, #220]	; (80009c0 <main+0x458>)
 80008e2:	801a      	strh	r2, [r3, #0]
			  time_diff  = timer_end - timer_val;
 80008e4:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <main+0x458>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <main+0x468>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <main+0x46c>)
 80008f4:	801a      	strh	r2, [r3, #0]
 80008f6:	e008      	b.n	800090a <main+0x3a2>
		  }
		  else {
			  time_diff  = timer_end - timer_val;
 80008f8:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <main+0x458>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <main+0x468>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <main+0x46c>)
 8000908:	801a      	strh	r2, [r3, #0]
		  }

		  time_diff_arr[counter] = time_diff;
 800090a:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <main+0x46c>)
 800090c:	8819      	ldrh	r1, [r3, #0]
 800090e:	4a32      	ldr	r2, [pc, #200]	; (80009d8 <main+0x470>)
 8000910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000912:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  counter++;
 8000916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000918:	3301      	adds	r3, #1
 800091a:	67fb      	str	r3, [r7, #124]	; 0x7c

		  HAL_Delay(1000);
 800091c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000920:	f000 fcae 	bl	8001280 <HAL_Delay>

		  sprintf(buff, "%d: %u    \r\n", counter, time_diff);
 8000924:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <main+0x46c>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	1d38      	adds	r0, r7, #4
 800092a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800092c:	492b      	ldr	r1, [pc, #172]	; (80009dc <main+0x474>)
 800092e:	f003 fadf 	bl	8003ef0 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) buff, sizeof(buff), 100);
 8000932:	1d39      	adds	r1, r7, #4
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	4829      	ldr	r0, [pc, #164]	; (80009e0 <main+0x478>)
 800093a:	f002 fe19 	bl	8003570 <HAL_UART_Transmit>
 800093e:	e63f      	b.n	80005c0 <main+0x58>
	  }
	  else {
		  if (once == 1){
 8000940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000942:	2b01      	cmp	r3, #1
 8000944:	f47f ae3c 	bne.w	80005c0 <main+0x58>
			  end_time = __HAL_TIM_GET_COUNTER(&htim16);
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <main+0x454>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			  for (int i = 0 ; i <50 ; i++){
 8000952:	2300      	movs	r3, #0
 8000954:	673b      	str	r3, [r7, #112]	; 0x70
 8000956:	e00a      	b.n	800096e <main+0x406>
				 sum = sum + time_diff_arr[i];
 8000958:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <main+0x470>)
 800095a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800095c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000960:	461a      	mov	r2, r3
 8000962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000964:	4413      	add	r3, r2
 8000966:	67bb      	str	r3, [r7, #120]	; 0x78
			  for (int i = 0 ; i <50 ; i++){
 8000968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800096a:	3301      	adds	r3, #1
 800096c:	673b      	str	r3, [r7, #112]	; 0x70
 800096e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000970:	2b31      	cmp	r3, #49	; 0x31
 8000972:	ddf1      	ble.n	8000958 <main+0x3f0>
			  }
			  average = sum / 50 ;
 8000974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000976:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <main+0x47c>)
 8000978:	fb82 1203 	smull	r1, r2, r2, r3
 800097c:	1112      	asrs	r2, r2, #4
 800097e:	17db      	asrs	r3, r3, #31
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	66fb      	str	r3, [r7, #108]	; 0x6c
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000984:	2201      	movs	r2, #1
 8000986:	2108      	movs	r1, #8
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <main+0x450>)
 800098a:	f000 ff31 	bl	80017f0 <HAL_GPIO_WritePin>

			  sprintf(buff, "Done: Time = %u  \r\nAverage: %d    \r\n", end_time-start_time, average);
 800098e:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8000992:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000996:	1ad2      	subs	r2, r2, r3
 8000998:	1d38      	adds	r0, r7, #4
 800099a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800099c:	4912      	ldr	r1, [pc, #72]	; (80009e8 <main+0x480>)
 800099e:	f003 faa7 	bl	8003ef0 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) buff, sizeof(buff), 100);
 80009a2:	1d39      	adds	r1, r7, #4
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	2264      	movs	r2, #100	; 0x64
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <main+0x478>)
 80009aa:	f002 fde1 	bl	8003570 <HAL_UART_Transmit>

			  once = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	677b      	str	r3, [r7, #116]	; 0x74
	  flag = 0;
 80009b2:	e605      	b.n	80005c0 <main+0x58>
 80009b4:	200000a0 	.word	0x200000a0
 80009b8:	48000400 	.word	0x48000400
 80009bc:	200001e4 	.word	0x200001e4
 80009c0:	2000009c 	.word	0x2000009c
 80009c4:	20000000 	.word	0x20000000
 80009c8:	200000a4 	.word	0x200000a4
 80009cc:	20000110 	.word	0x20000110
 80009d0:	2000015c 	.word	0x2000015c
 80009d4:	200000a8 	.word	0x200000a8
 80009d8:	200000ac 	.word	0x200000ac
 80009dc:	08005230 	.word	0x08005230
 80009e0:	20000160 	.word	0x20000160
 80009e4:	51eb851f 	.word	0x51eb851f
 80009e8:	08005240 	.word	0x08005240

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b096      	sub	sp, #88	; 0x58
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2244      	movs	r2, #68	; 0x44
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fa30 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a12:	f000 ff23 	bl	800185c <HAL_PWREx_ControlVoltageScaling>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a1c:	f000 f976 	bl	8000d0c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a20:	f000 fefe 	bl	8001820 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <SystemClock_Config+0xc0>)
 8000a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a2a:	4a20      	ldr	r2, [pc, #128]	; (8000aac <SystemClock_Config+0xc0>)
 8000a2c:	f023 0318 	bic.w	r3, r3, #24
 8000a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a34:	2314      	movs	r3, #20
 8000a36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a44:	2360      	movs	r3, #96	; 0x60
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a54:	2310      	movs	r3, #16
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 ff4d 	bl	8001908 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f94a 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fb4b 	bl	800212c <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a9c:	f000 f936 	bl	8000d0c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000aa0:	f001 ff5c 	bl	800295c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000aa4:	bf00      	nop
 8000aa6:	3758      	adds	r7, #88	; 0x58
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000

08000ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000ad0:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <MX_TIM1_Init+0xa4>)
 8000ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31999;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000ad6:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ada:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000ae4:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000afe:	f002 f82f 	bl	8002b60 <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000b08:	f000 f900 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4619      	mov	r1, r3
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000b1a:	f002 fa67 	bl	8002fec <HAL_TIM_ConfigClockSource>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b24:	f000 f8f2 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_TIM1_Init+0xa0>)
 8000b3a:	f002 fc47 	bl	80033cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b44:	f000 f8e2 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000110 	.word	0x20000110
 8000b54:	40012c00 	.word	0x40012c00

08000b58 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <MX_TIM16_Init+0x48>)
 8000b60:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b64:	221f      	movs	r2, #31
 8000b66:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b74:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b8a:	f001 ffe9 	bl	8002b60 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000b94:	f000 f8ba 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200001e4 	.word	0x200001e4
 8000ba0:	40014400 	.word	0x40014400

08000ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_USART2_UART_Init+0x5c>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000be8:	f002 fc74 	bl	80034d4 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 f88b 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000160 	.word	0x20000160
 8000c00:	40004400 	.word	0x40004400

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin|LED2_Pin|LED5_Pin
 8000c62:	2200      	movs	r2, #0
 8000c64:	f240 619a 	movw	r1, #1690	; 0x69a
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f000 fdc0 	bl	80017f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2108      	movs	r1, #8
 8000c74:	4819      	ldr	r0, [pc, #100]	; (8000cdc <MX_GPIO_Init+0xd8>)
 8000c76:	f000 fdbb 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED5_Pin
                           PA9 PA10 */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED5_Pin
 8000c7a:	f240 639a 	movw	r3, #1690	; 0x69a
 8000c7e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f000 fc29 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000c9a:	23f3      	movs	r3, #243	; 0xf3
 8000c9c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MX_GPIO_Init+0xd8>)
 8000cae:	f000 fc1d 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_GPIO_Init+0xd8>)
 8000cca:	f000 fc0f 	bl	80014ec <HAL_GPIO_Init>

}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
//		HAL_TIM_Base_Start_IT(&htim1);
//		state = 0;
//	}
//
//}
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
//	}
//	else {
//		timer_end = __HAL_TIM_GET_COUNTER(&htim16) + 5000;
//		state = 1;
//	}
	if (htim == &htim1){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d105      	bne.n	8000cfc <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_TIM_Base_Stop_IT(&htim1);
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cf2:	f002 f82d 	bl	8002d50 <HAL_TIM_Base_Stop_IT>
		state = 0;
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000110 	.word	0x20000110
 8000d08:	20000000 	.word	0x20000000

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a26      	ldr	r2, [pc, #152]	; (8000e08 <HAL_TIM_Base_MspInit+0xa8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d12c      	bne.n	8000dcc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <HAL_TIM_Base_MspInit+0xac>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	4a25      	ldr	r2, [pc, #148]	; (8000e0c <HAL_TIM_Base_MspInit+0xac>)
 8000d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <HAL_TIM_Base_MspInit+0xac>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2018      	movs	r0, #24
 8000d90:	f000 fb75 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000d94:	2018      	movs	r0, #24
 8000d96:	f000 fb8e 	bl	80014b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2019      	movs	r0, #25
 8000da0:	f000 fb6d 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000da4:	2019      	movs	r0, #25
 8000da6:	f000 fb86 	bl	80014b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	201a      	movs	r0, #26
 8000db0:	f000 fb65 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000db4:	201a      	movs	r0, #26
 8000db6:	f000 fb7e 	bl	80014b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	201b      	movs	r0, #27
 8000dc0:	f000 fb5d 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dc4:	201b      	movs	r0, #27
 8000dc6:	f000 fb76 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000dca:	e018      	b.n	8000dfe <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d113      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_TIM_Base_MspInit+0xac>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <HAL_TIM_Base_MspInit+0xac>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	6613      	str	r3, [r2, #96]	; 0x60
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_TIM_Base_MspInit+0xac>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2019      	movs	r0, #25
 8000df4:	f000 fb43 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000df8:	2019      	movs	r0, #25
 8000dfa:	f000 fb5c 	bl	80014b6 <HAL_NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40012c00 	.word	0x40012c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40014400 	.word	0x40014400

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b09e      	sub	sp, #120	; 0x78
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	2254      	movs	r2, #84	; 0x54
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f003 f813 	bl	8003e60 <memset>
  if(huart->Instance==USART2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <HAL_UART_MspInit+0xcc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d148      	bne.n	8000ed6 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fb8f 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e5c:	f7ff ff56 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <HAL_UART_MspInit+0xd0>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <HAL_UART_MspInit+0xd0>)
 8000e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_UART_MspInit+0xd0>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_UART_MspInit+0xd0>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_UART_MspInit+0xd0>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_UART_MspInit+0xd0>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e90:	2304      	movs	r3, #4
 8000e92:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f000 fb1d 	bl	80014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f000 fb0b 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3778      	adds	r7, #120	; 0x78
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f984 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000f42:	f001 ff34 	bl	8002dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000110 	.word	0x20000110

08000f50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000f56:	f001 ff2a 	bl	8002dae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000f5c:	f001 ff27 	bl	8002dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000110 	.word	0x20000110
 8000f68:	200001e4 	.word	0x200001e4

08000f6c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <TIM1_TRG_COM_IRQHandler+0x10>)
 8000f72:	f001 ff1c 	bl	8002dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000110 	.word	0x20000110

08000f80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <TIM1_CC_IRQHandler+0x10>)
 8000f86:	f001 ff12 	bl	8002dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000110 	.word	0x20000110

08000f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_kill>:

int _kill(int pid, int sig)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fae:	f002 ff2d 	bl	8003e0c <__errno>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2216      	movs	r2, #22
 8000fb6:	601a      	str	r2, [r3, #0]
	return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_exit>:

void _exit (int status)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ffe7 	bl	8000fa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fd6:	e7fe      	b.n	8000fd6 <_exit+0x12>

08000fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fea:	f3af 8000 	nop.w
 8000fee:	4601      	mov	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
	}

return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e009      	b.n	8001038 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf1      	blt.n	8001024 <_write+0x12>
	}
	return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_close>:

int _close(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001072:	605a      	str	r2, [r3, #4]
	return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_isatty>:

int _isatty(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f002 fe92 	bl	8003e0c <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20010000 	.word	0x20010000
 8001114:	00000400 	.word	0x00000400
 8001118:	20000090 	.word	0x20000090
 800111c:	20000248 	.word	0x20000248

08001120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001148:	f7ff ffea 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <LoopForever+0x6>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	; (8001184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <LoopForever+0xe>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	; (8001190 <LoopForever+0x16>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f002 fe51 	bl	8003e18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001176:	f7ff f9f7 	bl	8000568 <main>

0800117a <LoopForever>:

LoopForever:
    b LoopForever
 800117a:	e7fe      	b.n	800117a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800117c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001188:	0800540c 	.word	0x0800540c
  ldr r2, =_sbss
 800118c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001190:	20000244 	.word	0x20000244

08001194 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC1_IRQHandler>

08001196 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f961 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f80e 	bl	80011c8 <HAL_InitTick>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	e001      	b.n	80011bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b8:	f7ff fdae 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011bc:	79fb      	ldrb	r3, [r7, #7]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_InitTick+0x6c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d023      	beq.n	8001224 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_InitTick+0x70>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_InitTick+0x6c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f96d 	bl	80014d2 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10f      	bne.n	800121e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d809      	bhi.n	8001218 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 f937 	bl	800147e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_InitTick+0x74>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e007      	b.n	8001228 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e004      	b.n	8001228 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e001      	b.n	8001228 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000000c 	.word	0x2000000c
 8001238:	20000004 	.word	0x20000004
 800123c:	20000008 	.word	0x20000008

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	2000000c 	.word	0x2000000c
 8001264:	20000230 	.word	0x20000230

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000230 	.word	0x20000230

08001280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff ffee 	bl	8001268 <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001298:	d005      	beq.n	80012a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_Delay+0x44>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a6:	bf00      	nop
 80012a8:	f7ff ffde 	bl	8001268 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d8f7      	bhi.n	80012a8 <HAL_Delay+0x28>
  {
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000000c 	.word	0x2000000c

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff29 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001490:	f7ff ff3e 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff ff8e 	bl	80013bc <NVIC_EncodePriority>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff5d 	bl	8001368 <__NVIC_SetPriority>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff31 	bl	800132c <__NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffa2 	bl	8001424 <SysTick_Config>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	e148      	b.n	800178e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 813a 	beq.w	8001788 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d005      	beq.n	800152c <HAL_GPIO_Init+0x40>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d130      	bne.n	800158e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001562:	2201      	movs	r2, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	f003 0201 	and.w	r2, r3, #1
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b03      	cmp	r3, #3
 8001598:	d017      	beq.n	80015ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d123      	bne.n	800161e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	6939      	ldr	r1, [r7, #16]
 800161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0203 	and.w	r2, r3, #3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8094 	beq.w	8001788 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001660:	4b52      	ldr	r3, [pc, #328]	; (80017ac <HAL_GPIO_Init+0x2c0>)
 8001662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001664:	4a51      	ldr	r2, [pc, #324]	; (80017ac <HAL_GPIO_Init+0x2c0>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6613      	str	r3, [r2, #96]	; 0x60
 800166c:	4b4f      	ldr	r3, [pc, #316]	; (80017ac <HAL_GPIO_Init+0x2c0>)
 800166e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001678:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x2c4>)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016a2:	d00d      	beq.n	80016c0 <HAL_GPIO_Init+0x1d4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a43      	ldr	r2, [pc, #268]	; (80017b4 <HAL_GPIO_Init+0x2c8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x1d0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a42      	ldr	r2, [pc, #264]	; (80017b8 <HAL_GPIO_Init+0x2cc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_GPIO_Init+0x1cc>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e004      	b.n	80016c2 <HAL_GPIO_Init+0x1d6>
 80016b8:	2307      	movs	r3, #7
 80016ba:	e002      	b.n	80016c2 <HAL_GPIO_Init+0x1d6>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_GPIO_Init+0x1d6>
 80016c0:	2300      	movs	r3, #0
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	f002 0203 	and.w	r2, r2, #3
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	4093      	lsls	r3, r2
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d2:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_GPIO_Init+0x2c4>)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001704:	4a2d      	ldr	r2, [pc, #180]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800170a:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800172e:	4a23      	ldr	r2, [pc, #140]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f aeaf 	bne.w	80014fc <HAL_GPIO_Init+0x10>
  }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000
 80017b4:	48000400 	.word	0x48000400
 80017b8:	48000800 	.word	0x48000800
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800180c:	e002      	b.n	8001814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40007000 	.word	0x40007000

08001840 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <HAL_PWREx_GetVoltageRange+0x18>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40007000 	.word	0x40007000

0800185c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800186a:	d130      	bne.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001878:	d038      	beq.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001882:	4a1e      	ldr	r2, [pc, #120]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2232      	movs	r2, #50	; 0x32
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0c9b      	lsrs	r3, r3, #18
 800189c:	3301      	adds	r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a0:	e002      	b.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b4:	d102      	bne.n	80018bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f2      	bne.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c8:	d110      	bne.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e00f      	b.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018da:	d007      	beq.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e4:	4a05      	ldr	r2, [pc, #20]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000
 8001900:	20000004 	.word	0x20000004
 8001904:	431bde83 	.word	0x431bde83

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e3fe      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191a:	4ba1      	ldr	r3, [pc, #644]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001924:	4b9e      	ldr	r3, [pc, #632]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80e4 	beq.w	8001b04 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d007      	beq.n	8001952 <HAL_RCC_OscConfig+0x4a>
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b0c      	cmp	r3, #12
 8001946:	f040 808b 	bne.w	8001a60 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b01      	cmp	r3, #1
 800194e:	f040 8087 	bne.w	8001a60 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001952:	4b93      	ldr	r3, [pc, #588]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x62>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e3d6      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1a      	ldr	r2, [r3, #32]
 800196e:	4b8c      	ldr	r3, [pc, #560]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_RCC_OscConfig+0x7c>
 800197a:	4b89      	ldr	r3, [pc, #548]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001982:	e005      	b.n	8001990 <HAL_RCC_OscConfig+0x88>
 8001984:	4b86      	ldr	r3, [pc, #536]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001990:	4293      	cmp	r3, r2
 8001992:	d223      	bcs.n	80019dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fd8b 	bl	80024b4 <RCC_SetFlashLatencyFromMSIRange>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e3b7      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a8:	4b7d      	ldr	r3, [pc, #500]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a7c      	ldr	r2, [pc, #496]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019ae:	f043 0308 	orr.w	r3, r3, #8
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b7a      	ldr	r3, [pc, #488]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4977      	ldr	r1, [pc, #476]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c6:	4b76      	ldr	r3, [pc, #472]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	4972      	ldr	r1, [pc, #456]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
 80019da:	e025      	b.n	8001a28 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019dc:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a6f      	ldr	r2, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b6d      	ldr	r3, [pc, #436]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	496a      	ldr	r1, [pc, #424]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fa:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	4965      	ldr	r1, [pc, #404]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fd4b 	bl	80024b4 <RCC_SetFlashLatencyFromMSIRange>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e377      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a28:	f000 fc80 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	495a      	ldr	r1, [pc, #360]	; (8001ba4 <HAL_RCC_OscConfig+0x29c>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <HAL_RCC_OscConfig+0x2a0>)
 8001a46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a48:	4b58      	ldr	r3, [pc, #352]	; (8001bac <HAL_RCC_OscConfig+0x2a4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fbbb 	bl	80011c8 <HAL_InitTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d052      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	e35b      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d032      	beq.n	8001ace <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a68:	4b4d      	ldr	r3, [pc, #308]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fbf8 	bl	8001268 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fbf4 	bl	8001268 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e344      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	493b      	ldr	r1, [pc, #236]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab8:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	4936      	ldr	r1, [pc, #216]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e01a      	b.n	8001b04 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ace:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a33      	ldr	r2, [pc, #204]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fbc5 	bl	8001268 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fbc1 	bl	8001268 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e311      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x1da>
 8001b00:	e000      	b.n	8001b04 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d074      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x21a>
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d10e      	bne.n	8001b3a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d10b      	bne.n	8001b3a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d064      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d160      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e2ee      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x24a>
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e01d      	b.n	8001b8e <HAL_RCC_OscConfig+0x286>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x26e>
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e00b      	b.n	8001b8e <HAL_RCC_OscConfig+0x286>
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <HAL_RCC_OscConfig+0x298>)
 8001b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01c      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff fb67 	bl	8001268 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9c:	e011      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2ba>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08005268 	.word	0x08005268
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fb5a 	bl	8001268 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e2aa      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	4baf      	ldr	r3, [pc, #700]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x2a8>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fb4a 	bl	8001268 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fb46 	bl	8001268 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e296      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	4ba5      	ldr	r3, [pc, #660]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2d0>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d060      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_OscConfig+0x310>
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d119      	bne.n	8001c46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d116      	bne.n	8001c46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c18:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x328>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e273      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b93      	ldr	r3, [pc, #588]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	4990      	ldr	r1, [pc, #576]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c44:	e040      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d023      	beq.n	8001c96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4e:	4b8c      	ldr	r3, [pc, #560]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a8b      	ldr	r2, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fb05 	bl	8001268 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fb01 	bl	8001268 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e251      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c74:	4b82      	ldr	r3, [pc, #520]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b7f      	ldr	r3, [pc, #508]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	497c      	ldr	r1, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e018      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b7a      	ldr	r3, [pc, #488]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a79      	ldr	r2, [pc, #484]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fae1 	bl	8001268 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fadd 	bl	8001268 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e22d      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cbc:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d03c      	beq.n	8001d4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cdc:	4b68      	ldr	r3, [pc, #416]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce2:	4a67      	ldr	r2, [pc, #412]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff fabc 	bl	8001268 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fab8 	bl	8001268 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e208      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d06:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ef      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x3ec>
 8001d14:	e01b      	b.n	8001d4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d16:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1c:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff fa9f 	bl	8001268 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fa9b 	bl	8001268 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1eb      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d40:	4b4f      	ldr	r3, [pc, #316]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ef      	bne.n	8001d2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80a6 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	4a43      	ldr	r2, [pc, #268]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d76:	6593      	str	r3, [r2, #88]	; 0x58
 8001d78:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d84:	2301      	movs	r3, #1
 8001d86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d88:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <HAL_RCC_OscConfig+0x57c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d118      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d94:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCC_OscConfig+0x57c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <HAL_RCC_OscConfig+0x57c>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da0:	f7ff fa62 	bl	8001268 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da8:	f7ff fa5e 	bl	8001268 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1ae      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <HAL_RCC_OscConfig+0x57c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4d8>
 8001dce:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dde:	e024      	b.n	8001e2a <HAL_RCC_OscConfig+0x522>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d110      	bne.n	8001e0a <HAL_RCC_OscConfig+0x502>
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	4a24      	ldr	r2, [pc, #144]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e08:	e00f      	b.n	8001e2a <HAL_RCC_OscConfig+0x522>
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001e22:	f023 0304 	bic.w	r3, r3, #4
 8001e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff fa19 	bl	8001268 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fa15 	bl	8001268 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e163      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x578>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0ed      	beq.n	8001e3a <HAL_RCC_OscConfig+0x532>
 8001e5e:	e01a      	b.n	8001e96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff fa02 	bl	8001268 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7ff f9fe 	bl	8001268 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d906      	bls.n	8001e88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e14c      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	4ba5      	ldr	r3, [pc, #660]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1e8      	bne.n	8001e68 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e96:	7ffb      	ldrb	r3, [r7, #31]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9c:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a9f      	ldr	r2, [pc, #636]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d03c      	beq.n	8001f2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ebc:	4b98      	ldr	r3, [pc, #608]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec2:	4a97      	ldr	r2, [pc, #604]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7ff f9cc 	bl	8001268 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed4:	f7ff f9c8 	bl	8001268 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e118      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ef      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x5cc>
 8001ef4:	e01b      	b.n	8001f2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ef6:	4b8a      	ldr	r3, [pc, #552]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001efc:	4a88      	ldr	r2, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff f9af 	bl	8001268 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f0e:	f7ff f9ab 	bl	8001268 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0fb      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f20:	4b7f      	ldr	r3, [pc, #508]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ef      	bne.n	8001f0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80ef 	beq.w	8002116 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	f040 80c5 	bne.w	80020cc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f42:	4b77      	ldr	r3, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0203 	and.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d12c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	3b01      	subs	r3, #1
 8001f62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d123      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d11b      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d113      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	3b01      	subs	r3, #1
 8001f96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d109      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d067      	beq.n	8002080 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d062      	beq.n	800207c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e0a8      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b56      	ldr	r3, [pc, #344]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a55      	ldr	r2, [pc, #340]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fd2:	f7ff f949 	bl	8001268 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff f945 	bl	8001268 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e095      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_RCC_OscConfig+0x81c>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002008:	3a01      	subs	r2, #1
 800200a:	0112      	lsls	r2, r2, #4
 800200c:	4311      	orrs	r1, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002012:	0212      	lsls	r2, r2, #8
 8002014:	4311      	orrs	r1, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800201a:	0852      	lsrs	r2, r2, #1
 800201c:	3a01      	subs	r2, #1
 800201e:	0552      	lsls	r2, r2, #21
 8002020:	4311      	orrs	r1, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002026:	0852      	lsrs	r2, r2, #1
 8002028:	3a01      	subs	r2, #1
 800202a:	0652      	lsls	r2, r2, #25
 800202c:	4311      	orrs	r1, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002032:	06d2      	lsls	r2, r2, #27
 8002034:	430a      	orrs	r2, r1
 8002036:	493a      	ldr	r1, [pc, #232]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8002038:	4313      	orrs	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800203c:	4b38      	ldr	r3, [pc, #224]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a37      	ldr	r2, [pc, #220]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8002042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002046:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002048:	4b35      	ldr	r3, [pc, #212]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a34      	ldr	r2, [pc, #208]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002054:	f7ff f908 	bl	8001268 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff f904 	bl	8001268 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e054      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800207a:	e04c      	b.n	8002116 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e04b      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d144      	bne.n	8002116 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800208c:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a23      	ldr	r2, [pc, #140]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a20      	ldr	r2, [pc, #128]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020a4:	f7ff f8e0 	bl	8001268 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f8dc 	bl	8001268 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e02c      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x7a4>
 80020ca:	e024      	b.n	8002116 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d01f      	beq.n	8002112 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 80020d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7ff f8c3 	bl	8001268 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7ff f8bf 	bl	8001268 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e00f      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	4905      	ldr	r1, [pc, #20]	; (8002120 <HAL_RCC_OscConfig+0x818>)
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_RCC_OscConfig+0x820>)
 800210c:	4013      	ands	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
 8002110:	e001      	b.n	8002116 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	019d808c 	.word	0x019d808c
 8002128:	feeefffc 	.word	0xfeeefffc

0800212c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0e7      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b75      	ldr	r3, [pc, #468]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4970      	ldr	r1, [pc, #448]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b6e      	ldr	r3, [pc, #440]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0cf      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d010      	beq.n	800219e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	4b66      	ldr	r3, [pc, #408]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002188:	429a      	cmp	r2, r3
 800218a:	d908      	bls.n	800219e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b63      	ldr	r3, [pc, #396]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4960      	ldr	r1, [pc, #384]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d04c      	beq.n	8002244 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	4b5a      	ldr	r3, [pc, #360]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d121      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0a6      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ca:	4b54      	ldr	r3, [pc, #336]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d115      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e09a      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e2:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e08e      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e086      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f023 0203 	bic.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4943      	ldr	r1, [pc, #268]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002214:	f7ff f828 	bl	8001268 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	e00a      	b.n	8002232 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221c:	f7ff f824 	bl	8001268 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e06e      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 020c 	and.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	429a      	cmp	r2, r3
 8002242:	d1eb      	bne.n	800221c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d010      	beq.n	8002272 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800225c:	429a      	cmp	r2, r3
 800225e:	d208      	bcs.n	8002272 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	492b      	ldr	r1, [pc, #172]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d210      	bcs.n	80022a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 0207 	bic.w	r2, r3, #7
 8002288:	4923      	ldr	r1, [pc, #140]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e036      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4918      	ldr	r1, [pc, #96]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4910      	ldr	r1, [pc, #64]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e0:	f000 f824 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	490b      	ldr	r1, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x1f4>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x1f8>)
 80022fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1fc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe ff5f 	bl	80011c8 <HAL_InitTick>
 800230a:	4603      	mov	r3, r0
 800230c:	72fb      	strb	r3, [r7, #11]

  return status;
 800230e:	7afb      	ldrb	r3, [r7, #11]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40022000 	.word	0x40022000
 800231c:	40021000 	.word	0x40021000
 8002320:	08005268 	.word	0x08005268
 8002324:	20000004 	.word	0x20000004
 8002328:	20000008 	.word	0x20000008

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233a:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002344:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x34>
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d121      	bne.n	800239e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d11e      	bne.n	800239e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002360:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d107      	bne.n	800237c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800236c:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 800236e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e005      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800237c:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002388:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <HAL_RCC_GetSysClockFreq+0x10c>)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002390:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d102      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <HAL_RCC_GetSysClockFreq+0x110>)
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	e004      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_RCC_GetSysClockFreq+0x114>)
 80023b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d134      	bne.n	8002424 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d003      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0xac>
 80023d0:	e005      	b.n	80023de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_RCC_GetSysClockFreq+0x110>)
 80023d4:	617b      	str	r3, [r7, #20]
      break;
 80023d6:	e005      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_GetSysClockFreq+0x114>)
 80023da:	617b      	str	r3, [r7, #20]
      break;
 80023dc:	e002      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	617b      	str	r3, [r7, #20]
      break;
 80023e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	3301      	adds	r3, #1
 80023f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	fb02 f203 	mul.w	r2, r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	0e5b      	lsrs	r3, r3, #25
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	3301      	adds	r3, #1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002424:	69bb      	ldr	r3, [r7, #24]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	08005280 	.word	0x08005280
 800243c:	00f42400 	.word	0x00f42400
 8002440:	007a1200 	.word	0x007a1200

08002444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002460:	f7ff fff0 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4904      	ldr	r1, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	08005278 	.word	0x08005278

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800248c:	f7ff ffda 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0adb      	lsrs	r3, r3, #11
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4904      	ldr	r1, [pc, #16]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	08005278 	.word	0x08005278

080024b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024cc:	f7ff f9b8 	bl	8001840 <HAL_PWREx_GetVoltageRange>
 80024d0:	6178      	str	r0, [r7, #20]
 80024d2:	e014      	b.n	80024fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	4a24      	ldr	r2, [pc, #144]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	6593      	str	r3, [r2, #88]	; 0x58
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024ec:	f7ff f9a8 	bl	8001840 <HAL_PWREx_GetVoltageRange>
 80024f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002504:	d10b      	bne.n	800251e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d919      	bls.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2ba0      	cmp	r3, #160	; 0xa0
 8002510:	d902      	bls.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002512:	2302      	movs	r3, #2
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e013      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002518:	2301      	movs	r3, #1
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	e010      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b80      	cmp	r3, #128	; 0x80
 8002522:	d902      	bls.n	800252a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002524:	2303      	movs	r3, #3
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e00a      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d102      	bne.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002530:	2302      	movs	r3, #2
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	e004      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b70      	cmp	r3, #112	; 0x70
 800253a:	d101      	bne.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 0207 	bic.w	r2, r3, #7
 8002548:	4909      	ldr	r1, [pc, #36]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	40022000 	.word	0x40022000

08002574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800257c:	2300      	movs	r3, #0
 800257e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002580:	2300      	movs	r3, #0
 8002582:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	2b00      	cmp	r3, #0
 800258e:	d031      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002598:	d01a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800259a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800259e:	d814      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025a8:	d10f      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025aa:	4bac      	ldr	r3, [pc, #688]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4aab      	ldr	r2, [pc, #684]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b6:	e00c      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f9dc 	bl	800297c <RCCEx_PLLSAI1_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c8:	e003      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	74fb      	strb	r3, [r7, #19]
      break;
 80025ce:	e000      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80025d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d8:	4ba0      	ldr	r3, [pc, #640]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	499d      	ldr	r1, [pc, #628]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025ee:	e001      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8099 	beq.w	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002606:	4b95      	ldr	r3, [pc, #596]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	4b8f      	ldr	r3, [pc, #572]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	4a8e      	ldr	r2, [pc, #568]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002626:	6593      	str	r3, [r2, #88]	; 0x58
 8002628:	4b8c      	ldr	r3, [pc, #560]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002634:	2301      	movs	r3, #1
 8002636:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002638:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a88      	ldr	r2, [pc, #544]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002644:	f7fe fe10 	bl	8001268 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800264a:	e009      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fe0c 	bl	8001268 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	74fb      	strb	r3, [r7, #19]
        break;
 800265e:	e005      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002660:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d155      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002672:	4b7a      	ldr	r3, [pc, #488]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01e      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	429a      	cmp	r2, r3
 800268c:	d019      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800268e:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002698:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800269a:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	4a6e      	ldr	r2, [pc, #440]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026aa:	4b6c      	ldr	r3, [pc, #432]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	4a6a      	ldr	r2, [pc, #424]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ba:	4a68      	ldr	r2, [pc, #416]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fdcc 	bl	8001268 <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d2:	e00b      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe fdc8 	bl	8001268 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d902      	bls.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	74fb      	strb	r3, [r7, #19]
            break;
 80026ea:	e006      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ec:	4b5b      	ldr	r3, [pc, #364]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ec      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002700:	4b56      	ldr	r3, [pc, #344]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270e:	4953      	ldr	r1, [pc, #332]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002716:	e004      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
 800271c:	e001      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002722:	7c7b      	ldrb	r3, [r7, #17]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002732:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4943      	ldr	r1, [pc, #268]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002762:	4b3e      	ldr	r3, [pc, #248]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f023 020c 	bic.w	r2, r3, #12
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	493a      	ldr	r1, [pc, #232]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	4932      	ldr	r1, [pc, #200]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	4929      	ldr	r1, [pc, #164]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	4921      	ldr	r1, [pc, #132]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	4918      	ldr	r1, [pc, #96]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4910      	ldr	r1, [pc, #64]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d02c      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	4907      	ldr	r1, [pc, #28]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800284c:	d10a      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800284e:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4a02      	ldr	r2, [pc, #8]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002858:	60d3      	str	r3, [r2, #12]
 800285a:	e015      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800285c:	40021000 	.word	0x40021000
 8002860:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800286c:	d10c      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	2101      	movs	r1, #1
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f881 	bl	800297c <RCCEx_PLLSAI1_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d028      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002894:	4b30      	ldr	r3, [pc, #192]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	492d      	ldr	r1, [pc, #180]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b2:	d106      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a27      	ldr	r2, [pc, #156]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028be:	60d3      	str	r3, [r2, #12]
 80028c0:	e011      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ca:	d10c      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f852 	bl	800297c <RCCEx_PLLSAI1_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01c      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002900:	4915      	ldr	r1, [pc, #84]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002910:	d10c      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	2102      	movs	r1, #2
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f82f 	bl	800297c <RCCEx_PLLSAI1_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	4904      	ldr	r1, [pc, #16]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800294e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000

0800295c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800298a:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d018      	beq.n	80029c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002996:	4b71      	ldr	r3, [pc, #452]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d10d      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
       ||
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029ae:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
       ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d047      	beq.n	8002a52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e044      	b.n	8002a52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d018      	beq.n	8002a02 <RCCEx_PLLSAI1_Config+0x86>
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d825      	bhi.n	8002a20 <RCCEx_PLLSAI1_Config+0xa4>
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d002      	beq.n	80029de <RCCEx_PLLSAI1_Config+0x62>
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d009      	beq.n	80029f0 <RCCEx_PLLSAI1_Config+0x74>
 80029dc:	e020      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029de:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11d      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ee:	e01a      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029f0:	4b5a      	ldr	r3, [pc, #360]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d116      	bne.n	8002a2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a00:	e013      	b.n	8002a2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a02:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a0e:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a1e:	e006      	b.n	8002a2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e004      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a26:	bf00      	nop
 8002a28:	e002      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a36:	4b49      	ldr	r3, [pc, #292]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	4943      	ldr	r1, [pc, #268]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d17c      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a58:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3f      	ldr	r2, [pc, #252]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a64:	f7fe fc00 	bl	8001268 <HAL_GetTick>
 8002a68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a6a:	e009      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a6c:	f7fe fbfc 	bl	8001268 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d902      	bls.n	8002a80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a7e:	e005      	b.n	8002a8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ef      	bne.n	8002a6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d15f      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d110      	bne.n	8002aba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002aa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6892      	ldr	r2, [r2, #8]
 8002aa8:	0211      	lsls	r1, r2, #8
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68d2      	ldr	r2, [r2, #12]
 8002aae:	06d2      	lsls	r2, r2, #27
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	492a      	ldr	r1, [pc, #168]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	610b      	str	r3, [r1, #16]
 8002ab8:	e027      	b.n	8002b0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d112      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ac8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6892      	ldr	r2, [r2, #8]
 8002ad0:	0211      	lsls	r1, r2, #8
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6912      	ldr	r2, [r2, #16]
 8002ad6:	0852      	lsrs	r2, r2, #1
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	0552      	lsls	r2, r2, #21
 8002adc:	430a      	orrs	r2, r1
 8002ade:	491f      	ldr	r1, [pc, #124]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	610b      	str	r3, [r1, #16]
 8002ae4:	e011      	b.n	8002b0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002aee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6892      	ldr	r2, [r2, #8]
 8002af6:	0211      	lsls	r1, r2, #8
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6952      	ldr	r2, [r2, #20]
 8002afc:	0852      	lsrs	r2, r2, #1
 8002afe:	3a01      	subs	r2, #1
 8002b00:	0652      	lsls	r2, r2, #25
 8002b02:	430a      	orrs	r2, r1
 8002b04:	4915      	ldr	r1, [pc, #84]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe fba7 	bl	8001268 <HAL_GetTick>
 8002b1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b1c:	e009      	b.n	8002b32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b1e:	f7fe fba3 	bl	8001268 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d902      	bls.n	8002b32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	73fb      	strb	r3, [r7, #15]
          break;
 8002b30:	e005      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ef      	beq.n	8002b1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4903      	ldr	r1, [pc, #12]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e049      	b.n	8002c06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe f8ea 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 fb16 	bl	80031d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d001      	beq.n	8002c28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e033      	b.n	8002c90 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <HAL_TIM_Base_Start+0x8c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_TIM_Base_Start+0x3e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d004      	beq.n	8002c4e <HAL_TIM_Base_Start+0x3e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <HAL_TIM_Base_Start+0x90>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d115      	bne.n	8002c7a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_TIM_Base_Start+0x94>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d015      	beq.n	8002c8c <HAL_TIM_Base_Start+0x7c>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c66:	d011      	beq.n	8002c8c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c78:	e008      	b.n	8002c8c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e000      	b.n	8002c8e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40014000 	.word	0x40014000
 8002ca4:	00010007 	.word	0x00010007

08002ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d001      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e03b      	b.n	8002d38 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_TIM_Base_Start_IT+0x4e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d004      	beq.n	8002cf6 <HAL_TIM_Base_Start_IT+0x4e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d115      	bne.n	8002d22 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_TIM_Base_Start_IT+0xa4>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b06      	cmp	r3, #6
 8002d06:	d015      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x8c>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d011      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d20:	e008      	b.n	8002d34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e000      	b.n	8002d36 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	00010007 	.word	0x00010007

08002d50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a1a      	ldr	r2, [r3, #32]
 8002d6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10f      	bne.n	8002d98 <HAL_TIM_Base_Stop_IT+0x48>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	f240 4344 	movw	r3, #1092	; 0x444
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_TIM_Base_Stop_IT+0x48>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d122      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d11b      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0202 	mvn.w	r2, #2
 8002dda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f9ce 	bl	8003192 <HAL_TIM_IC_CaptureCallback>
 8002df6:	e005      	b.n	8002e04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f9c0 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9d1 	bl	80031a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d122      	bne.n	8002e5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d11b      	bne.n	8002e5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0204 	mvn.w	r2, #4
 8002e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f9a4 	bl	8003192 <HAL_TIM_IC_CaptureCallback>
 8002e4a:	e005      	b.n	8002e58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f996 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9a7 	bl	80031a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d122      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d11b      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0208 	mvn.w	r2, #8
 8002e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2204      	movs	r2, #4
 8002e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f97a 	bl	8003192 <HAL_TIM_IC_CaptureCallback>
 8002e9e:	e005      	b.n	8002eac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f96c 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f97d 	bl	80031a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d122      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d11b      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0210 	mvn.w	r2, #16
 8002ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2208      	movs	r2, #8
 8002edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f950 	bl	8003192 <HAL_TIM_IC_CaptureCallback>
 8002ef2:	e005      	b.n	8002f00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f942 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f953 	bl	80031a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10e      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f06f 0201 	mvn.w	r2, #1
 8002f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fd fed7 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b80      	cmp	r3, #128	; 0x80
 8002f3e:	d10e      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b80      	cmp	r3, #128	; 0x80
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 faa7 	bl	80034ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6c:	d10e      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d107      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fa9a 	bl	80034c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d10e      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f901 	bl	80031ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0220 	mvn.w	r2, #32
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa5a 	bl	8003498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_TIM_ConfigClockSource+0x1c>
 8003004:	2302      	movs	r3, #2
 8003006:	e0b6      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x18a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800302a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003044:	d03e      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0xd8>
 8003046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304a:	f200 8087 	bhi.w	800315c <HAL_TIM_ConfigClockSource+0x170>
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003052:	f000 8086 	beq.w	8003162 <HAL_TIM_ConfigClockSource+0x176>
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305a:	d87f      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x170>
 800305c:	2b70      	cmp	r3, #112	; 0x70
 800305e:	d01a      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0xaa>
 8003060:	2b70      	cmp	r3, #112	; 0x70
 8003062:	d87b      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x170>
 8003064:	2b60      	cmp	r3, #96	; 0x60
 8003066:	d050      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x11e>
 8003068:	2b60      	cmp	r3, #96	; 0x60
 800306a:	d877      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x170>
 800306c:	2b50      	cmp	r3, #80	; 0x50
 800306e:	d03c      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0xfe>
 8003070:	2b50      	cmp	r3, #80	; 0x50
 8003072:	d873      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x170>
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d058      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x13e>
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d86f      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x170>
 800307c:	2b30      	cmp	r3, #48	; 0x30
 800307e:	d064      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15e>
 8003080:	2b30      	cmp	r3, #48	; 0x30
 8003082:	d86b      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x170>
 8003084:	2b20      	cmp	r3, #32
 8003086:	d060      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15e>
 8003088:	2b20      	cmp	r3, #32
 800308a:	d867      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x170>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05c      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15e>
 8003090:	2b10      	cmp	r3, #16
 8003092:	d05a      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15e>
 8003094:	e062      	b.n	800315c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f000 f971 	bl	800338c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]
      break;
 80030c2:	e04f      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f000 f95a 	bl	800338c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e6:	609a      	str	r2, [r3, #8]
      break;
 80030e8:	e03c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 f8ce 	bl	8003298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2150      	movs	r1, #80	; 0x50
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f927 	bl	8003356 <TIM_ITRx_SetConfig>
      break;
 8003108:	e02c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	461a      	mov	r2, r3
 8003118:	f000 f8ed 	bl	80032f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2160      	movs	r1, #96	; 0x60
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f917 	bl	8003356 <TIM_ITRx_SetConfig>
      break;
 8003128:	e01c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	461a      	mov	r2, r3
 8003138:	f000 f8ae 	bl	8003298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f907 	bl	8003356 <TIM_ITRx_SetConfig>
      break;
 8003148:	e00c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f000 f8fe 	bl	8003356 <TIM_ITRx_SetConfig>
      break;
 800315a:	e003      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e000      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a2a      	ldr	r2, [pc, #168]	; (800328c <TIM_Base_SetConfig+0xbc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_Base_SetConfig+0x20>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ee:	d108      	bne.n	8003202 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a21      	ldr	r2, [pc, #132]	; (800328c <TIM_Base_SetConfig+0xbc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_Base_SetConfig+0x52>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0x52>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <TIM_Base_SetConfig+0xc0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0x52>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <TIM_Base_SetConfig+0xc4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0c      	ldr	r2, [pc, #48]	; (800328c <TIM_Base_SetConfig+0xbc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d007      	beq.n	8003270 <TIM_Base_SetConfig+0xa0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <TIM_Base_SetConfig+0xc0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_Base_SetConfig+0xa0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <TIM_Base_SetConfig+0xc4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	615a      	str	r2, [r3, #20]
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400

08003298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f023 0201 	bic.w	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 030a 	bic.w	r3, r3, #10
 80032d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b087      	sub	sp, #28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0210 	bic.w	r2, r3, #16
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	031b      	lsls	r3, r3, #12
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	f043 0307 	orr.w	r3, r3, #7
 8003378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	021a      	lsls	r2, r3, #8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	609a      	str	r2, [r3, #8]
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e04f      	b.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a21      	ldr	r2, [pc, #132]	; (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003414:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a14      	ldr	r2, [pc, #80]	; (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d009      	beq.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d004      	beq.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a10      	ldr	r2, [pc, #64]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10c      	bne.n	8003472 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	4313      	orrs	r3, r2
 8003468:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40014000 	.word	0x40014000

08003498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e040      	b.n	8003568 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fc8c 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8c0 	bl	8003698 <UART_SetConfig>
 8003518:	4603      	mov	r3, r0
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e022      	b.n	8003568 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fabe 	bl	8003aac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800353e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800354e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fb45 	bl	8003bf0 <UART_CheckIdleState>
 8003566:	4603      	mov	r3, r0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003584:	2b20      	cmp	r3, #32
 8003586:	f040 8082 	bne.w	800368e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UART_Transmit+0x26>
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07a      	b.n	8003690 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Transmit+0x38>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e073      	b.n	8003690 <HAL_UART_Transmit+0x120>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2221      	movs	r2, #33	; 0x21
 80035bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035be:	f7fd fe53 	bl	8001268 <HAL_GetTick>
 80035c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035dc:	d108      	bne.n	80035f0 <HAL_UART_Transmit+0x80>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	e003      	b.n	80035f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003600:	e02d      	b.n	800365e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	2180      	movs	r1, #128	; 0x80
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fb38 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e039      	b.n	8003690 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362e:	b292      	uxth	r2, r2
 8003630:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	3302      	adds	r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	e008      	b.n	800364c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b292      	uxth	r2, r2
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1cb      	bne.n	8003602 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2140      	movs	r1, #64	; 0x40
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fb04 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e005      	b.n	8003690 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003698:	b5b0      	push	{r4, r5, r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4baf      	ldr	r3, [pc, #700]	; (8003980 <UART_SetConfig+0x2e8>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	69f9      	ldr	r1, [r7, #28]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4aa4      	ldr	r2, [pc, #656]	; (8003984 <UART_SetConfig+0x2ec>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	430a      	orrs	r2, r1
 8003712:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a9b      	ldr	r2, [pc, #620]	; (8003988 <UART_SetConfig+0x2f0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d121      	bne.n	8003762 <UART_SetConfig+0xca>
 800371e:	4b9b      	ldr	r3, [pc, #620]	; (800398c <UART_SetConfig+0x2f4>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b03      	cmp	r3, #3
 800372a:	d817      	bhi.n	800375c <UART_SetConfig+0xc4>
 800372c:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <UART_SetConfig+0x9c>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003745 	.word	0x08003745
 8003738:	08003751 	.word	0x08003751
 800373c:	0800374b 	.word	0x0800374b
 8003740:	08003757 	.word	0x08003757
 8003744:	2301      	movs	r3, #1
 8003746:	76fb      	strb	r3, [r7, #27]
 8003748:	e070      	b.n	800382c <UART_SetConfig+0x194>
 800374a:	2302      	movs	r3, #2
 800374c:	76fb      	strb	r3, [r7, #27]
 800374e:	e06d      	b.n	800382c <UART_SetConfig+0x194>
 8003750:	2304      	movs	r3, #4
 8003752:	76fb      	strb	r3, [r7, #27]
 8003754:	e06a      	b.n	800382c <UART_SetConfig+0x194>
 8003756:	2308      	movs	r3, #8
 8003758:	76fb      	strb	r3, [r7, #27]
 800375a:	e067      	b.n	800382c <UART_SetConfig+0x194>
 800375c:	2310      	movs	r3, #16
 800375e:	76fb      	strb	r3, [r7, #27]
 8003760:	e064      	b.n	800382c <UART_SetConfig+0x194>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a8a      	ldr	r2, [pc, #552]	; (8003990 <UART_SetConfig+0x2f8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d132      	bne.n	80037d2 <UART_SetConfig+0x13a>
 800376c:	4b87      	ldr	r3, [pc, #540]	; (800398c <UART_SetConfig+0x2f4>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d828      	bhi.n	80037cc <UART_SetConfig+0x134>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <UART_SetConfig+0xe8>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037b5 	.word	0x080037b5
 8003784:	080037cd 	.word	0x080037cd
 8003788:	080037cd 	.word	0x080037cd
 800378c:	080037cd 	.word	0x080037cd
 8003790:	080037c1 	.word	0x080037c1
 8003794:	080037cd 	.word	0x080037cd
 8003798:	080037cd 	.word	0x080037cd
 800379c:	080037cd 	.word	0x080037cd
 80037a0:	080037bb 	.word	0x080037bb
 80037a4:	080037cd 	.word	0x080037cd
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	080037cd 	.word	0x080037cd
 80037b0:	080037c7 	.word	0x080037c7
 80037b4:	2300      	movs	r3, #0
 80037b6:	76fb      	strb	r3, [r7, #27]
 80037b8:	e038      	b.n	800382c <UART_SetConfig+0x194>
 80037ba:	2302      	movs	r3, #2
 80037bc:	76fb      	strb	r3, [r7, #27]
 80037be:	e035      	b.n	800382c <UART_SetConfig+0x194>
 80037c0:	2304      	movs	r3, #4
 80037c2:	76fb      	strb	r3, [r7, #27]
 80037c4:	e032      	b.n	800382c <UART_SetConfig+0x194>
 80037c6:	2308      	movs	r3, #8
 80037c8:	76fb      	strb	r3, [r7, #27]
 80037ca:	e02f      	b.n	800382c <UART_SetConfig+0x194>
 80037cc:	2310      	movs	r3, #16
 80037ce:	76fb      	strb	r3, [r7, #27]
 80037d0:	e02c      	b.n	800382c <UART_SetConfig+0x194>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a6b      	ldr	r2, [pc, #428]	; (8003984 <UART_SetConfig+0x2ec>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d125      	bne.n	8003828 <UART_SetConfig+0x190>
 80037dc:	4b6b      	ldr	r3, [pc, #428]	; (800398c <UART_SetConfig+0x2f4>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ea:	d017      	beq.n	800381c <UART_SetConfig+0x184>
 80037ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037f0:	d817      	bhi.n	8003822 <UART_SetConfig+0x18a>
 80037f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f6:	d00b      	beq.n	8003810 <UART_SetConfig+0x178>
 80037f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037fc:	d811      	bhi.n	8003822 <UART_SetConfig+0x18a>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <UART_SetConfig+0x172>
 8003802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003806:	d006      	beq.n	8003816 <UART_SetConfig+0x17e>
 8003808:	e00b      	b.n	8003822 <UART_SetConfig+0x18a>
 800380a:	2300      	movs	r3, #0
 800380c:	76fb      	strb	r3, [r7, #27]
 800380e:	e00d      	b.n	800382c <UART_SetConfig+0x194>
 8003810:	2302      	movs	r3, #2
 8003812:	76fb      	strb	r3, [r7, #27]
 8003814:	e00a      	b.n	800382c <UART_SetConfig+0x194>
 8003816:	2304      	movs	r3, #4
 8003818:	76fb      	strb	r3, [r7, #27]
 800381a:	e007      	b.n	800382c <UART_SetConfig+0x194>
 800381c:	2308      	movs	r3, #8
 800381e:	76fb      	strb	r3, [r7, #27]
 8003820:	e004      	b.n	800382c <UART_SetConfig+0x194>
 8003822:	2310      	movs	r3, #16
 8003824:	76fb      	strb	r3, [r7, #27]
 8003826:	e001      	b.n	800382c <UART_SetConfig+0x194>
 8003828:	2310      	movs	r3, #16
 800382a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a54      	ldr	r2, [pc, #336]	; (8003984 <UART_SetConfig+0x2ec>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d173      	bne.n	800391e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003836:	7efb      	ldrb	r3, [r7, #27]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d824      	bhi.n	8003886 <UART_SetConfig+0x1ee>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <UART_SetConfig+0x1ac>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003869 	.word	0x08003869
 8003848:	08003887 	.word	0x08003887
 800384c:	08003871 	.word	0x08003871
 8003850:	08003887 	.word	0x08003887
 8003854:	08003877 	.word	0x08003877
 8003858:	08003887 	.word	0x08003887
 800385c:	08003887 	.word	0x08003887
 8003860:	08003887 	.word	0x08003887
 8003864:	0800387f 	.word	0x0800387f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003868:	f7fe fdf8 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 800386c:	6178      	str	r0, [r7, #20]
        break;
 800386e:	e00f      	b.n	8003890 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003870:	4b48      	ldr	r3, [pc, #288]	; (8003994 <UART_SetConfig+0x2fc>)
 8003872:	617b      	str	r3, [r7, #20]
        break;
 8003874:	e00c      	b.n	8003890 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003876:	f7fe fd59 	bl	800232c <HAL_RCC_GetSysClockFreq>
 800387a:	6178      	str	r0, [r7, #20]
        break;
 800387c:	e008      	b.n	8003890 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003882:	617b      	str	r3, [r7, #20]
        break;
 8003884:	e004      	b.n	8003890 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	76bb      	strb	r3, [r7, #26]
        break;
 800388e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80fc 	beq.w	8003a90 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d305      	bcc.n	80038b4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d902      	bls.n	80038ba <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	76bb      	strb	r3, [r7, #26]
 80038b8:	e0ea      	b.n	8003a90 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	4618      	mov	r0, r3
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	020b      	lsls	r3, r1, #8
 80038cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038d0:	0202      	lsls	r2, r0, #8
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	6849      	ldr	r1, [r1, #4]
 80038d6:	0849      	lsrs	r1, r1, #1
 80038d8:	4608      	mov	r0, r1
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	1814      	adds	r4, r2, r0
 80038e0:	eb43 0501 	adc.w	r5, r3, r1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	461a      	mov	r2, r3
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	4620      	mov	r0, r4
 80038f0:	4629      	mov	r1, r5
 80038f2:	f7fc fcbd 	bl	8000270 <__aeabi_uldivmod>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4613      	mov	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003904:	d308      	bcc.n	8003918 <UART_SetConfig+0x280>
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800390c:	d204      	bcs.n	8003918 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	e0bb      	b.n	8003a90 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	76bb      	strb	r3, [r7, #26]
 800391c:	e0b8      	b.n	8003a90 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003926:	d167      	bne.n	80039f8 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8003928:	7efb      	ldrb	r3, [r7, #27]
 800392a:	2b08      	cmp	r3, #8
 800392c:	d834      	bhi.n	8003998 <UART_SetConfig+0x300>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <UART_SetConfig+0x29c>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003959 	.word	0x08003959
 8003938:	08003961 	.word	0x08003961
 800393c:	08003969 	.word	0x08003969
 8003940:	08003999 	.word	0x08003999
 8003944:	0800396f 	.word	0x0800396f
 8003948:	08003999 	.word	0x08003999
 800394c:	08003999 	.word	0x08003999
 8003950:	08003999 	.word	0x08003999
 8003954:	08003977 	.word	0x08003977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003958:	f7fe fd80 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 800395c:	6178      	str	r0, [r7, #20]
        break;
 800395e:	e020      	b.n	80039a2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003960:	f7fe fd92 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003964:	6178      	str	r0, [r7, #20]
        break;
 8003966:	e01c      	b.n	80039a2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <UART_SetConfig+0x2fc>)
 800396a:	617b      	str	r3, [r7, #20]
        break;
 800396c:	e019      	b.n	80039a2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396e:	f7fe fcdd 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8003972:	6178      	str	r0, [r7, #20]
        break;
 8003974:	e015      	b.n	80039a2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397a:	617b      	str	r3, [r7, #20]
        break;
 800397c:	e011      	b.n	80039a2 <UART_SetConfig+0x30a>
 800397e:	bf00      	nop
 8003980:	efff69f3 	.word	0xefff69f3
 8003984:	40008000 	.word	0x40008000
 8003988:	40013800 	.word	0x40013800
 800398c:	40021000 	.word	0x40021000
 8003990:	40004400 	.word	0x40004400
 8003994:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	76bb      	strb	r3, [r7, #26]
        break;
 80039a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d073      	beq.n	8003a90 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	005a      	lsls	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	441a      	add	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b0f      	cmp	r3, #15
 80039c2:	d916      	bls.n	80039f2 <UART_SetConfig+0x35a>
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ca:	d212      	bcs.n	80039f2 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f023 030f 	bic.w	r3, r3, #15
 80039d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	89fb      	ldrh	r3, [r7, #14]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	89fa      	ldrh	r2, [r7, #14]
 80039ee:	60da      	str	r2, [r3, #12]
 80039f0:	e04e      	b.n	8003a90 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	76bb      	strb	r3, [r7, #26]
 80039f6:	e04b      	b.n	8003a90 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039f8:	7efb      	ldrb	r3, [r7, #27]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d827      	bhi.n	8003a4e <UART_SetConfig+0x3b6>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0x36c>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a39 	.word	0x08003a39
 8003a10:	08003a4f 	.word	0x08003a4f
 8003a14:	08003a3f 	.word	0x08003a3f
 8003a18:	08003a4f 	.word	0x08003a4f
 8003a1c:	08003a4f 	.word	0x08003a4f
 8003a20:	08003a4f 	.word	0x08003a4f
 8003a24:	08003a47 	.word	0x08003a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7fe fd18 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003a2c:	6178      	str	r0, [r7, #20]
        break;
 8003a2e:	e013      	b.n	8003a58 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a30:	f7fe fd2a 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003a34:	6178      	str	r0, [r7, #20]
        break;
 8003a36:	e00f      	b.n	8003a58 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a38:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <UART_SetConfig+0x410>)
 8003a3a:	617b      	str	r3, [r7, #20]
        break;
 8003a3c:	e00c      	b.n	8003a58 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3e:	f7fe fc75 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8003a42:	6178      	str	r0, [r7, #20]
        break;
 8003a44:	e008      	b.n	8003a58 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4a:	617b      	str	r3, [r7, #20]
        break;
 8003a4c:	e004      	b.n	8003a58 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	76bb      	strb	r3, [r7, #26]
        break;
 8003a56:	bf00      	nop
    }

    if (pclk != 0U)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d018      	beq.n	8003a90 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	085a      	lsrs	r2, r3, #1
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	441a      	add	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b0f      	cmp	r3, #15
 8003a76:	d909      	bls.n	8003a8c <UART_SetConfig+0x3f4>
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7e:	d205      	bcs.n	8003a8c <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	e001      	b.n	8003a90 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	00f42400 	.word	0x00f42400

08003aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003baa:	d10a      	bne.n	8003bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c00:	f7fd fb32 	bl	8001268 <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d10e      	bne.n	8003c32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f82d 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e023      	b.n	8003c7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d10e      	bne.n	8003c5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f817 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00d      	b.n	8003c7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b09c      	sub	sp, #112	; 0x70
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c92:	e0a5      	b.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	f000 80a1 	beq.w	8003de0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fd fae3 	bl	8001268 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d13e      	bne.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e6      	bne.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3308      	adds	r3, #8
 8003cec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3308      	adds	r3, #8
 8003d04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d06:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e5      	bne.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e067      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d04f      	beq.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4e:	d147      	bne.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d58:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
 8003d7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e6      	bne.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3308      	adds	r3, #8
 8003daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dac:	623a      	str	r2, [r7, #32]
 8003dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	69f9      	ldr	r1, [r7, #28]
 8003db2:	6a3a      	ldr	r2, [r7, #32]
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e010      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	f43f af4a 	beq.w	8003c94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3770      	adds	r7, #112	; 0x70
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <__errno>:
 8003e0c:	4b01      	ldr	r3, [pc, #4]	; (8003e14 <__errno+0x8>)
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000010 	.word	0x20000010

08003e18 <__libc_init_array>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	4d0d      	ldr	r5, [pc, #52]	; (8003e50 <__libc_init_array+0x38>)
 8003e1c:	4c0d      	ldr	r4, [pc, #52]	; (8003e54 <__libc_init_array+0x3c>)
 8003e1e:	1b64      	subs	r4, r4, r5
 8003e20:	10a4      	asrs	r4, r4, #2
 8003e22:	2600      	movs	r6, #0
 8003e24:	42a6      	cmp	r6, r4
 8003e26:	d109      	bne.n	8003e3c <__libc_init_array+0x24>
 8003e28:	4d0b      	ldr	r5, [pc, #44]	; (8003e58 <__libc_init_array+0x40>)
 8003e2a:	4c0c      	ldr	r4, [pc, #48]	; (8003e5c <__libc_init_array+0x44>)
 8003e2c:	f001 f9f4 	bl	8005218 <_init>
 8003e30:	1b64      	subs	r4, r4, r5
 8003e32:	10a4      	asrs	r4, r4, #2
 8003e34:	2600      	movs	r6, #0
 8003e36:	42a6      	cmp	r6, r4
 8003e38:	d105      	bne.n	8003e46 <__libc_init_array+0x2e>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e40:	4798      	blx	r3
 8003e42:	3601      	adds	r6, #1
 8003e44:	e7ee      	b.n	8003e24 <__libc_init_array+0xc>
 8003e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4a:	4798      	blx	r3
 8003e4c:	3601      	adds	r6, #1
 8003e4e:	e7f2      	b.n	8003e36 <__libc_init_array+0x1e>
 8003e50:	08005404 	.word	0x08005404
 8003e54:	08005404 	.word	0x08005404
 8003e58:	08005404 	.word	0x08005404
 8003e5c:	08005408 	.word	0x08005408

08003e60 <memset>:
 8003e60:	4402      	add	r2, r0
 8003e62:	4603      	mov	r3, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <rand>:
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <rand+0x60>)
 8003e72:	b510      	push	{r4, lr}
 8003e74:	681c      	ldr	r4, [r3, #0]
 8003e76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e78:	b9b3      	cbnz	r3, 8003ea8 <rand+0x38>
 8003e7a:	2018      	movs	r0, #24
 8003e7c:	f000 f888 	bl	8003f90 <malloc>
 8003e80:	63a0      	str	r0, [r4, #56]	; 0x38
 8003e82:	b928      	cbnz	r0, 8003e90 <rand+0x20>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <rand+0x64>)
 8003e88:	4813      	ldr	r0, [pc, #76]	; (8003ed8 <rand+0x68>)
 8003e8a:	214e      	movs	r1, #78	; 0x4e
 8003e8c:	f000 f850 	bl	8003f30 <__assert_func>
 8003e90:	4a12      	ldr	r2, [pc, #72]	; (8003edc <rand+0x6c>)
 8003e92:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <rand+0x70>)
 8003e94:	e9c0 2300 	strd	r2, r3, [r0]
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <rand+0x74>)
 8003e9a:	6083      	str	r3, [r0, #8]
 8003e9c:	230b      	movs	r3, #11
 8003e9e:	8183      	strh	r3, [r0, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003ea8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003eaa:	480f      	ldr	r0, [pc, #60]	; (8003ee8 <rand+0x78>)
 8003eac:	690a      	ldr	r2, [r1, #16]
 8003eae:	694b      	ldr	r3, [r1, #20]
 8003eb0:	4c0e      	ldr	r4, [pc, #56]	; (8003eec <rand+0x7c>)
 8003eb2:	4350      	muls	r0, r2
 8003eb4:	fb04 0003 	mla	r0, r4, r3, r0
 8003eb8:	fba2 3404 	umull	r3, r4, r2, r4
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	4404      	add	r4, r0
 8003ec0:	f144 0000 	adc.w	r0, r4, #0
 8003ec4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8003ec8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000010 	.word	0x20000010
 8003ed4:	080052b4 	.word	0x080052b4
 8003ed8:	080052cb 	.word	0x080052cb
 8003edc:	abcd330e 	.word	0xabcd330e
 8003ee0:	e66d1234 	.word	0xe66d1234
 8003ee4:	0005deec 	.word	0x0005deec
 8003ee8:	5851f42d 	.word	0x5851f42d
 8003eec:	4c957f2d 	.word	0x4c957f2d

08003ef0 <siprintf>:
 8003ef0:	b40e      	push	{r1, r2, r3}
 8003ef2:	b500      	push	{lr}
 8003ef4:	b09c      	sub	sp, #112	; 0x70
 8003ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ef8:	9002      	str	r0, [sp, #8]
 8003efa:	9006      	str	r0, [sp, #24]
 8003efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f00:	4809      	ldr	r0, [pc, #36]	; (8003f28 <siprintf+0x38>)
 8003f02:	9107      	str	r1, [sp, #28]
 8003f04:	9104      	str	r1, [sp, #16]
 8003f06:	4909      	ldr	r1, [pc, #36]	; (8003f2c <siprintf+0x3c>)
 8003f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f0c:	9105      	str	r1, [sp, #20]
 8003f0e:	6800      	ldr	r0, [r0, #0]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	a902      	add	r1, sp, #8
 8003f14:	f000 f94a 	bl	80041ac <_svfiprintf_r>
 8003f18:	9b02      	ldr	r3, [sp, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	b01c      	add	sp, #112	; 0x70
 8003f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f24:	b003      	add	sp, #12
 8003f26:	4770      	bx	lr
 8003f28:	20000010 	.word	0x20000010
 8003f2c:	ffff0208 	.word	0xffff0208

08003f30 <__assert_func>:
 8003f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f32:	4614      	mov	r4, r2
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <__assert_func+0x2c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	68d8      	ldr	r0, [r3, #12]
 8003f3e:	b14c      	cbz	r4, 8003f54 <__assert_func+0x24>
 8003f40:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <__assert_func+0x30>)
 8003f42:	9100      	str	r1, [sp, #0]
 8003f44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f48:	4906      	ldr	r1, [pc, #24]	; (8003f64 <__assert_func+0x34>)
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	f000 f80e 	bl	8003f6c <fiprintf>
 8003f50:	f000 fdea 	bl	8004b28 <abort>
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <__assert_func+0x38>)
 8003f56:	461c      	mov	r4, r3
 8003f58:	e7f3      	b.n	8003f42 <__assert_func+0x12>
 8003f5a:	bf00      	nop
 8003f5c:	20000010 	.word	0x20000010
 8003f60:	0800532a 	.word	0x0800532a
 8003f64:	08005337 	.word	0x08005337
 8003f68:	08005365 	.word	0x08005365

08003f6c <fiprintf>:
 8003f6c:	b40e      	push	{r1, r2, r3}
 8003f6e:	b503      	push	{r0, r1, lr}
 8003f70:	4601      	mov	r1, r0
 8003f72:	ab03      	add	r3, sp, #12
 8003f74:	4805      	ldr	r0, [pc, #20]	; (8003f8c <fiprintf+0x20>)
 8003f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	f000 fa3f 	bl	8004400 <_vfiprintf_r>
 8003f82:	b002      	add	sp, #8
 8003f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f88:	b003      	add	sp, #12
 8003f8a:	4770      	bx	lr
 8003f8c:	20000010 	.word	0x20000010

08003f90 <malloc>:
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <malloc+0xc>)
 8003f92:	4601      	mov	r1, r0
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	f000 b853 	b.w	8004040 <_malloc_r>
 8003f9a:	bf00      	nop
 8003f9c:	20000010 	.word	0x20000010

08003fa0 <_free_r>:
 8003fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fa2:	2900      	cmp	r1, #0
 8003fa4:	d048      	beq.n	8004038 <_free_r+0x98>
 8003fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003faa:	9001      	str	r0, [sp, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f1a1 0404 	sub.w	r4, r1, #4
 8003fb2:	bfb8      	it	lt
 8003fb4:	18e4      	addlt	r4, r4, r3
 8003fb6:	f001 f805 	bl	8004fc4 <__malloc_lock>
 8003fba:	4a20      	ldr	r2, [pc, #128]	; (800403c <_free_r+0x9c>)
 8003fbc:	9801      	ldr	r0, [sp, #4]
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	4615      	mov	r5, r2
 8003fc2:	b933      	cbnz	r3, 8003fd2 <_free_r+0x32>
 8003fc4:	6063      	str	r3, [r4, #4]
 8003fc6:	6014      	str	r4, [r2, #0]
 8003fc8:	b003      	add	sp, #12
 8003fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fce:	f000 bfff 	b.w	8004fd0 <__malloc_unlock>
 8003fd2:	42a3      	cmp	r3, r4
 8003fd4:	d90b      	bls.n	8003fee <_free_r+0x4e>
 8003fd6:	6821      	ldr	r1, [r4, #0]
 8003fd8:	1862      	adds	r2, r4, r1
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	bf04      	itt	eq
 8003fde:	681a      	ldreq	r2, [r3, #0]
 8003fe0:	685b      	ldreq	r3, [r3, #4]
 8003fe2:	6063      	str	r3, [r4, #4]
 8003fe4:	bf04      	itt	eq
 8003fe6:	1852      	addeq	r2, r2, r1
 8003fe8:	6022      	streq	r2, [r4, #0]
 8003fea:	602c      	str	r4, [r5, #0]
 8003fec:	e7ec      	b.n	8003fc8 <_free_r+0x28>
 8003fee:	461a      	mov	r2, r3
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	b10b      	cbz	r3, 8003ff8 <_free_r+0x58>
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	d9fa      	bls.n	8003fee <_free_r+0x4e>
 8003ff8:	6811      	ldr	r1, [r2, #0]
 8003ffa:	1855      	adds	r5, r2, r1
 8003ffc:	42a5      	cmp	r5, r4
 8003ffe:	d10b      	bne.n	8004018 <_free_r+0x78>
 8004000:	6824      	ldr	r4, [r4, #0]
 8004002:	4421      	add	r1, r4
 8004004:	1854      	adds	r4, r2, r1
 8004006:	42a3      	cmp	r3, r4
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	d1dd      	bne.n	8003fc8 <_free_r+0x28>
 800400c:	681c      	ldr	r4, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	6053      	str	r3, [r2, #4]
 8004012:	4421      	add	r1, r4
 8004014:	6011      	str	r1, [r2, #0]
 8004016:	e7d7      	b.n	8003fc8 <_free_r+0x28>
 8004018:	d902      	bls.n	8004020 <_free_r+0x80>
 800401a:	230c      	movs	r3, #12
 800401c:	6003      	str	r3, [r0, #0]
 800401e:	e7d3      	b.n	8003fc8 <_free_r+0x28>
 8004020:	6825      	ldr	r5, [r4, #0]
 8004022:	1961      	adds	r1, r4, r5
 8004024:	428b      	cmp	r3, r1
 8004026:	bf04      	itt	eq
 8004028:	6819      	ldreq	r1, [r3, #0]
 800402a:	685b      	ldreq	r3, [r3, #4]
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	bf04      	itt	eq
 8004030:	1949      	addeq	r1, r1, r5
 8004032:	6021      	streq	r1, [r4, #0]
 8004034:	6054      	str	r4, [r2, #4]
 8004036:	e7c7      	b.n	8003fc8 <_free_r+0x28>
 8004038:	b003      	add	sp, #12
 800403a:	bd30      	pop	{r4, r5, pc}
 800403c:	20000094 	.word	0x20000094

08004040 <_malloc_r>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	1ccd      	adds	r5, r1, #3
 8004044:	f025 0503 	bic.w	r5, r5, #3
 8004048:	3508      	adds	r5, #8
 800404a:	2d0c      	cmp	r5, #12
 800404c:	bf38      	it	cc
 800404e:	250c      	movcc	r5, #12
 8004050:	2d00      	cmp	r5, #0
 8004052:	4606      	mov	r6, r0
 8004054:	db01      	blt.n	800405a <_malloc_r+0x1a>
 8004056:	42a9      	cmp	r1, r5
 8004058:	d903      	bls.n	8004062 <_malloc_r+0x22>
 800405a:	230c      	movs	r3, #12
 800405c:	6033      	str	r3, [r6, #0]
 800405e:	2000      	movs	r0, #0
 8004060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004062:	f000 ffaf 	bl	8004fc4 <__malloc_lock>
 8004066:	4921      	ldr	r1, [pc, #132]	; (80040ec <_malloc_r+0xac>)
 8004068:	680a      	ldr	r2, [r1, #0]
 800406a:	4614      	mov	r4, r2
 800406c:	b99c      	cbnz	r4, 8004096 <_malloc_r+0x56>
 800406e:	4f20      	ldr	r7, [pc, #128]	; (80040f0 <_malloc_r+0xb0>)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b923      	cbnz	r3, 800407e <_malloc_r+0x3e>
 8004074:	4621      	mov	r1, r4
 8004076:	4630      	mov	r0, r6
 8004078:	f000 fc86 	bl	8004988 <_sbrk_r>
 800407c:	6038      	str	r0, [r7, #0]
 800407e:	4629      	mov	r1, r5
 8004080:	4630      	mov	r0, r6
 8004082:	f000 fc81 	bl	8004988 <_sbrk_r>
 8004086:	1c43      	adds	r3, r0, #1
 8004088:	d123      	bne.n	80040d2 <_malloc_r+0x92>
 800408a:	230c      	movs	r3, #12
 800408c:	6033      	str	r3, [r6, #0]
 800408e:	4630      	mov	r0, r6
 8004090:	f000 ff9e 	bl	8004fd0 <__malloc_unlock>
 8004094:	e7e3      	b.n	800405e <_malloc_r+0x1e>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	1b5b      	subs	r3, r3, r5
 800409a:	d417      	bmi.n	80040cc <_malloc_r+0x8c>
 800409c:	2b0b      	cmp	r3, #11
 800409e:	d903      	bls.n	80040a8 <_malloc_r+0x68>
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	441c      	add	r4, r3
 80040a4:	6025      	str	r5, [r4, #0]
 80040a6:	e004      	b.n	80040b2 <_malloc_r+0x72>
 80040a8:	6863      	ldr	r3, [r4, #4]
 80040aa:	42a2      	cmp	r2, r4
 80040ac:	bf0c      	ite	eq
 80040ae:	600b      	streq	r3, [r1, #0]
 80040b0:	6053      	strne	r3, [r2, #4]
 80040b2:	4630      	mov	r0, r6
 80040b4:	f000 ff8c 	bl	8004fd0 <__malloc_unlock>
 80040b8:	f104 000b 	add.w	r0, r4, #11
 80040bc:	1d23      	adds	r3, r4, #4
 80040be:	f020 0007 	bic.w	r0, r0, #7
 80040c2:	1ac2      	subs	r2, r0, r3
 80040c4:	d0cc      	beq.n	8004060 <_malloc_r+0x20>
 80040c6:	1a1b      	subs	r3, r3, r0
 80040c8:	50a3      	str	r3, [r4, r2]
 80040ca:	e7c9      	b.n	8004060 <_malloc_r+0x20>
 80040cc:	4622      	mov	r2, r4
 80040ce:	6864      	ldr	r4, [r4, #4]
 80040d0:	e7cc      	b.n	800406c <_malloc_r+0x2c>
 80040d2:	1cc4      	adds	r4, r0, #3
 80040d4:	f024 0403 	bic.w	r4, r4, #3
 80040d8:	42a0      	cmp	r0, r4
 80040da:	d0e3      	beq.n	80040a4 <_malloc_r+0x64>
 80040dc:	1a21      	subs	r1, r4, r0
 80040de:	4630      	mov	r0, r6
 80040e0:	f000 fc52 	bl	8004988 <_sbrk_r>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d1dd      	bne.n	80040a4 <_malloc_r+0x64>
 80040e8:	e7cf      	b.n	800408a <_malloc_r+0x4a>
 80040ea:	bf00      	nop
 80040ec:	20000094 	.word	0x20000094
 80040f0:	20000098 	.word	0x20000098

080040f4 <__ssputs_r>:
 80040f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f8:	688e      	ldr	r6, [r1, #8]
 80040fa:	429e      	cmp	r6, r3
 80040fc:	4682      	mov	sl, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	4690      	mov	r8, r2
 8004102:	461f      	mov	r7, r3
 8004104:	d838      	bhi.n	8004178 <__ssputs_r+0x84>
 8004106:	898a      	ldrh	r2, [r1, #12]
 8004108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800410c:	d032      	beq.n	8004174 <__ssputs_r+0x80>
 800410e:	6825      	ldr	r5, [r4, #0]
 8004110:	6909      	ldr	r1, [r1, #16]
 8004112:	eba5 0901 	sub.w	r9, r5, r1
 8004116:	6965      	ldr	r5, [r4, #20]
 8004118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800411c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004120:	3301      	adds	r3, #1
 8004122:	444b      	add	r3, r9
 8004124:	106d      	asrs	r5, r5, #1
 8004126:	429d      	cmp	r5, r3
 8004128:	bf38      	it	cc
 800412a:	461d      	movcc	r5, r3
 800412c:	0553      	lsls	r3, r2, #21
 800412e:	d531      	bpl.n	8004194 <__ssputs_r+0xa0>
 8004130:	4629      	mov	r1, r5
 8004132:	f7ff ff85 	bl	8004040 <_malloc_r>
 8004136:	4606      	mov	r6, r0
 8004138:	b950      	cbnz	r0, 8004150 <__ssputs_r+0x5c>
 800413a:	230c      	movs	r3, #12
 800413c:	f8ca 3000 	str.w	r3, [sl]
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004150:	6921      	ldr	r1, [r4, #16]
 8004152:	464a      	mov	r2, r9
 8004154:	f000 ff0e 	bl	8004f74 <memcpy>
 8004158:	89a3      	ldrh	r3, [r4, #12]
 800415a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800415e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	6126      	str	r6, [r4, #16]
 8004166:	6165      	str	r5, [r4, #20]
 8004168:	444e      	add	r6, r9
 800416a:	eba5 0509 	sub.w	r5, r5, r9
 800416e:	6026      	str	r6, [r4, #0]
 8004170:	60a5      	str	r5, [r4, #8]
 8004172:	463e      	mov	r6, r7
 8004174:	42be      	cmp	r6, r7
 8004176:	d900      	bls.n	800417a <__ssputs_r+0x86>
 8004178:	463e      	mov	r6, r7
 800417a:	4632      	mov	r2, r6
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	4641      	mov	r1, r8
 8004180:	f000 ff06 	bl	8004f90 <memmove>
 8004184:	68a3      	ldr	r3, [r4, #8]
 8004186:	6822      	ldr	r2, [r4, #0]
 8004188:	1b9b      	subs	r3, r3, r6
 800418a:	4432      	add	r2, r6
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	6022      	str	r2, [r4, #0]
 8004190:	2000      	movs	r0, #0
 8004192:	e7db      	b.n	800414c <__ssputs_r+0x58>
 8004194:	462a      	mov	r2, r5
 8004196:	f000 ff21 	bl	8004fdc <_realloc_r>
 800419a:	4606      	mov	r6, r0
 800419c:	2800      	cmp	r0, #0
 800419e:	d1e1      	bne.n	8004164 <__ssputs_r+0x70>
 80041a0:	6921      	ldr	r1, [r4, #16]
 80041a2:	4650      	mov	r0, sl
 80041a4:	f7ff fefc 	bl	8003fa0 <_free_r>
 80041a8:	e7c7      	b.n	800413a <__ssputs_r+0x46>
	...

080041ac <_svfiprintf_r>:
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	4698      	mov	r8, r3
 80041b2:	898b      	ldrh	r3, [r1, #12]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	b09d      	sub	sp, #116	; 0x74
 80041b8:	4607      	mov	r7, r0
 80041ba:	460d      	mov	r5, r1
 80041bc:	4614      	mov	r4, r2
 80041be:	d50e      	bpl.n	80041de <_svfiprintf_r+0x32>
 80041c0:	690b      	ldr	r3, [r1, #16]
 80041c2:	b963      	cbnz	r3, 80041de <_svfiprintf_r+0x32>
 80041c4:	2140      	movs	r1, #64	; 0x40
 80041c6:	f7ff ff3b 	bl	8004040 <_malloc_r>
 80041ca:	6028      	str	r0, [r5, #0]
 80041cc:	6128      	str	r0, [r5, #16]
 80041ce:	b920      	cbnz	r0, 80041da <_svfiprintf_r+0x2e>
 80041d0:	230c      	movs	r3, #12
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	e0d1      	b.n	800437e <_svfiprintf_r+0x1d2>
 80041da:	2340      	movs	r3, #64	; 0x40
 80041dc:	616b      	str	r3, [r5, #20]
 80041de:	2300      	movs	r3, #0
 80041e0:	9309      	str	r3, [sp, #36]	; 0x24
 80041e2:	2320      	movs	r3, #32
 80041e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ec:	2330      	movs	r3, #48	; 0x30
 80041ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004398 <_svfiprintf_r+0x1ec>
 80041f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041f6:	f04f 0901 	mov.w	r9, #1
 80041fa:	4623      	mov	r3, r4
 80041fc:	469a      	mov	sl, r3
 80041fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004202:	b10a      	cbz	r2, 8004208 <_svfiprintf_r+0x5c>
 8004204:	2a25      	cmp	r2, #37	; 0x25
 8004206:	d1f9      	bne.n	80041fc <_svfiprintf_r+0x50>
 8004208:	ebba 0b04 	subs.w	fp, sl, r4
 800420c:	d00b      	beq.n	8004226 <_svfiprintf_r+0x7a>
 800420e:	465b      	mov	r3, fp
 8004210:	4622      	mov	r2, r4
 8004212:	4629      	mov	r1, r5
 8004214:	4638      	mov	r0, r7
 8004216:	f7ff ff6d 	bl	80040f4 <__ssputs_r>
 800421a:	3001      	adds	r0, #1
 800421c:	f000 80aa 	beq.w	8004374 <_svfiprintf_r+0x1c8>
 8004220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004222:	445a      	add	r2, fp
 8004224:	9209      	str	r2, [sp, #36]	; 0x24
 8004226:	f89a 3000 	ldrb.w	r3, [sl]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80a2 	beq.w	8004374 <_svfiprintf_r+0x1c8>
 8004230:	2300      	movs	r3, #0
 8004232:	f04f 32ff 	mov.w	r2, #4294967295
 8004236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800423a:	f10a 0a01 	add.w	sl, sl, #1
 800423e:	9304      	str	r3, [sp, #16]
 8004240:	9307      	str	r3, [sp, #28]
 8004242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004246:	931a      	str	r3, [sp, #104]	; 0x68
 8004248:	4654      	mov	r4, sl
 800424a:	2205      	movs	r2, #5
 800424c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004250:	4851      	ldr	r0, [pc, #324]	; (8004398 <_svfiprintf_r+0x1ec>)
 8004252:	f7fb ffbd 	bl	80001d0 <memchr>
 8004256:	9a04      	ldr	r2, [sp, #16]
 8004258:	b9d8      	cbnz	r0, 8004292 <_svfiprintf_r+0xe6>
 800425a:	06d0      	lsls	r0, r2, #27
 800425c:	bf44      	itt	mi
 800425e:	2320      	movmi	r3, #32
 8004260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004264:	0711      	lsls	r1, r2, #28
 8004266:	bf44      	itt	mi
 8004268:	232b      	movmi	r3, #43	; 0x2b
 800426a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800426e:	f89a 3000 	ldrb.w	r3, [sl]
 8004272:	2b2a      	cmp	r3, #42	; 0x2a
 8004274:	d015      	beq.n	80042a2 <_svfiprintf_r+0xf6>
 8004276:	9a07      	ldr	r2, [sp, #28]
 8004278:	4654      	mov	r4, sl
 800427a:	2000      	movs	r0, #0
 800427c:	f04f 0c0a 	mov.w	ip, #10
 8004280:	4621      	mov	r1, r4
 8004282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004286:	3b30      	subs	r3, #48	; 0x30
 8004288:	2b09      	cmp	r3, #9
 800428a:	d94e      	bls.n	800432a <_svfiprintf_r+0x17e>
 800428c:	b1b0      	cbz	r0, 80042bc <_svfiprintf_r+0x110>
 800428e:	9207      	str	r2, [sp, #28]
 8004290:	e014      	b.n	80042bc <_svfiprintf_r+0x110>
 8004292:	eba0 0308 	sub.w	r3, r0, r8
 8004296:	fa09 f303 	lsl.w	r3, r9, r3
 800429a:	4313      	orrs	r3, r2
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	46a2      	mov	sl, r4
 80042a0:	e7d2      	b.n	8004248 <_svfiprintf_r+0x9c>
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	1d19      	adds	r1, r3, #4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	9103      	str	r1, [sp, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfbb      	ittet	lt
 80042ae:	425b      	neglt	r3, r3
 80042b0:	f042 0202 	orrlt.w	r2, r2, #2
 80042b4:	9307      	strge	r3, [sp, #28]
 80042b6:	9307      	strlt	r3, [sp, #28]
 80042b8:	bfb8      	it	lt
 80042ba:	9204      	strlt	r2, [sp, #16]
 80042bc:	7823      	ldrb	r3, [r4, #0]
 80042be:	2b2e      	cmp	r3, #46	; 0x2e
 80042c0:	d10c      	bne.n	80042dc <_svfiprintf_r+0x130>
 80042c2:	7863      	ldrb	r3, [r4, #1]
 80042c4:	2b2a      	cmp	r3, #42	; 0x2a
 80042c6:	d135      	bne.n	8004334 <_svfiprintf_r+0x188>
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	9203      	str	r2, [sp, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bfb8      	it	lt
 80042d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80042d8:	3402      	adds	r4, #2
 80042da:	9305      	str	r3, [sp, #20]
 80042dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043a8 <_svfiprintf_r+0x1fc>
 80042e0:	7821      	ldrb	r1, [r4, #0]
 80042e2:	2203      	movs	r2, #3
 80042e4:	4650      	mov	r0, sl
 80042e6:	f7fb ff73 	bl	80001d0 <memchr>
 80042ea:	b140      	cbz	r0, 80042fe <_svfiprintf_r+0x152>
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	eba0 000a 	sub.w	r0, r0, sl
 80042f2:	fa03 f000 	lsl.w	r0, r3, r0
 80042f6:	9b04      	ldr	r3, [sp, #16]
 80042f8:	4303      	orrs	r3, r0
 80042fa:	3401      	adds	r4, #1
 80042fc:	9304      	str	r3, [sp, #16]
 80042fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004302:	4826      	ldr	r0, [pc, #152]	; (800439c <_svfiprintf_r+0x1f0>)
 8004304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004308:	2206      	movs	r2, #6
 800430a:	f7fb ff61 	bl	80001d0 <memchr>
 800430e:	2800      	cmp	r0, #0
 8004310:	d038      	beq.n	8004384 <_svfiprintf_r+0x1d8>
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <_svfiprintf_r+0x1f4>)
 8004314:	bb1b      	cbnz	r3, 800435e <_svfiprintf_r+0x1b2>
 8004316:	9b03      	ldr	r3, [sp, #12]
 8004318:	3307      	adds	r3, #7
 800431a:	f023 0307 	bic.w	r3, r3, #7
 800431e:	3308      	adds	r3, #8
 8004320:	9303      	str	r3, [sp, #12]
 8004322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004324:	4433      	add	r3, r6
 8004326:	9309      	str	r3, [sp, #36]	; 0x24
 8004328:	e767      	b.n	80041fa <_svfiprintf_r+0x4e>
 800432a:	fb0c 3202 	mla	r2, ip, r2, r3
 800432e:	460c      	mov	r4, r1
 8004330:	2001      	movs	r0, #1
 8004332:	e7a5      	b.n	8004280 <_svfiprintf_r+0xd4>
 8004334:	2300      	movs	r3, #0
 8004336:	3401      	adds	r4, #1
 8004338:	9305      	str	r3, [sp, #20]
 800433a:	4619      	mov	r1, r3
 800433c:	f04f 0c0a 	mov.w	ip, #10
 8004340:	4620      	mov	r0, r4
 8004342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004346:	3a30      	subs	r2, #48	; 0x30
 8004348:	2a09      	cmp	r2, #9
 800434a:	d903      	bls.n	8004354 <_svfiprintf_r+0x1a8>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0c5      	beq.n	80042dc <_svfiprintf_r+0x130>
 8004350:	9105      	str	r1, [sp, #20]
 8004352:	e7c3      	b.n	80042dc <_svfiprintf_r+0x130>
 8004354:	fb0c 2101 	mla	r1, ip, r1, r2
 8004358:	4604      	mov	r4, r0
 800435a:	2301      	movs	r3, #1
 800435c:	e7f0      	b.n	8004340 <_svfiprintf_r+0x194>
 800435e:	ab03      	add	r3, sp, #12
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	462a      	mov	r2, r5
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <_svfiprintf_r+0x1f8>)
 8004366:	a904      	add	r1, sp, #16
 8004368:	4638      	mov	r0, r7
 800436a:	f3af 8000 	nop.w
 800436e:	1c42      	adds	r2, r0, #1
 8004370:	4606      	mov	r6, r0
 8004372:	d1d6      	bne.n	8004322 <_svfiprintf_r+0x176>
 8004374:	89ab      	ldrh	r3, [r5, #12]
 8004376:	065b      	lsls	r3, r3, #25
 8004378:	f53f af2c 	bmi.w	80041d4 <_svfiprintf_r+0x28>
 800437c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800437e:	b01d      	add	sp, #116	; 0x74
 8004380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004384:	ab03      	add	r3, sp, #12
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	462a      	mov	r2, r5
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <_svfiprintf_r+0x1f8>)
 800438c:	a904      	add	r1, sp, #16
 800438e:	4638      	mov	r0, r7
 8004390:	f000 f9d4 	bl	800473c <_printf_i>
 8004394:	e7eb      	b.n	800436e <_svfiprintf_r+0x1c2>
 8004396:	bf00      	nop
 8004398:	08005366 	.word	0x08005366
 800439c:	08005370 	.word	0x08005370
 80043a0:	00000000 	.word	0x00000000
 80043a4:	080040f5 	.word	0x080040f5
 80043a8:	0800536c 	.word	0x0800536c

080043ac <__sfputc_r>:
 80043ac:	6893      	ldr	r3, [r2, #8]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	b410      	push	{r4}
 80043b4:	6093      	str	r3, [r2, #8]
 80043b6:	da08      	bge.n	80043ca <__sfputc_r+0x1e>
 80043b8:	6994      	ldr	r4, [r2, #24]
 80043ba:	42a3      	cmp	r3, r4
 80043bc:	db01      	blt.n	80043c2 <__sfputc_r+0x16>
 80043be:	290a      	cmp	r1, #10
 80043c0:	d103      	bne.n	80043ca <__sfputc_r+0x1e>
 80043c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043c6:	f000 baef 	b.w	80049a8 <__swbuf_r>
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	1c58      	adds	r0, r3, #1
 80043ce:	6010      	str	r0, [r2, #0]
 80043d0:	7019      	strb	r1, [r3, #0]
 80043d2:	4608      	mov	r0, r1
 80043d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043d8:	4770      	bx	lr

080043da <__sfputs_r>:
 80043da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043dc:	4606      	mov	r6, r0
 80043de:	460f      	mov	r7, r1
 80043e0:	4614      	mov	r4, r2
 80043e2:	18d5      	adds	r5, r2, r3
 80043e4:	42ac      	cmp	r4, r5
 80043e6:	d101      	bne.n	80043ec <__sfputs_r+0x12>
 80043e8:	2000      	movs	r0, #0
 80043ea:	e007      	b.n	80043fc <__sfputs_r+0x22>
 80043ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f0:	463a      	mov	r2, r7
 80043f2:	4630      	mov	r0, r6
 80043f4:	f7ff ffda 	bl	80043ac <__sfputc_r>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d1f3      	bne.n	80043e4 <__sfputs_r+0xa>
 80043fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004400 <_vfiprintf_r>:
 8004400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004404:	460d      	mov	r5, r1
 8004406:	b09d      	sub	sp, #116	; 0x74
 8004408:	4614      	mov	r4, r2
 800440a:	4698      	mov	r8, r3
 800440c:	4606      	mov	r6, r0
 800440e:	b118      	cbz	r0, 8004418 <_vfiprintf_r+0x18>
 8004410:	6983      	ldr	r3, [r0, #24]
 8004412:	b90b      	cbnz	r3, 8004418 <_vfiprintf_r+0x18>
 8004414:	f000 fcaa 	bl	8004d6c <__sinit>
 8004418:	4b89      	ldr	r3, [pc, #548]	; (8004640 <_vfiprintf_r+0x240>)
 800441a:	429d      	cmp	r5, r3
 800441c:	d11b      	bne.n	8004456 <_vfiprintf_r+0x56>
 800441e:	6875      	ldr	r5, [r6, #4]
 8004420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004422:	07d9      	lsls	r1, r3, #31
 8004424:	d405      	bmi.n	8004432 <_vfiprintf_r+0x32>
 8004426:	89ab      	ldrh	r3, [r5, #12]
 8004428:	059a      	lsls	r2, r3, #22
 800442a:	d402      	bmi.n	8004432 <_vfiprintf_r+0x32>
 800442c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800442e:	f000 fd3b 	bl	8004ea8 <__retarget_lock_acquire_recursive>
 8004432:	89ab      	ldrh	r3, [r5, #12]
 8004434:	071b      	lsls	r3, r3, #28
 8004436:	d501      	bpl.n	800443c <_vfiprintf_r+0x3c>
 8004438:	692b      	ldr	r3, [r5, #16]
 800443a:	b9eb      	cbnz	r3, 8004478 <_vfiprintf_r+0x78>
 800443c:	4629      	mov	r1, r5
 800443e:	4630      	mov	r0, r6
 8004440:	f000 fb04 	bl	8004a4c <__swsetup_r>
 8004444:	b1c0      	cbz	r0, 8004478 <_vfiprintf_r+0x78>
 8004446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004448:	07dc      	lsls	r4, r3, #31
 800444a:	d50e      	bpl.n	800446a <_vfiprintf_r+0x6a>
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	b01d      	add	sp, #116	; 0x74
 8004452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004456:	4b7b      	ldr	r3, [pc, #492]	; (8004644 <_vfiprintf_r+0x244>)
 8004458:	429d      	cmp	r5, r3
 800445a:	d101      	bne.n	8004460 <_vfiprintf_r+0x60>
 800445c:	68b5      	ldr	r5, [r6, #8]
 800445e:	e7df      	b.n	8004420 <_vfiprintf_r+0x20>
 8004460:	4b79      	ldr	r3, [pc, #484]	; (8004648 <_vfiprintf_r+0x248>)
 8004462:	429d      	cmp	r5, r3
 8004464:	bf08      	it	eq
 8004466:	68f5      	ldreq	r5, [r6, #12]
 8004468:	e7da      	b.n	8004420 <_vfiprintf_r+0x20>
 800446a:	89ab      	ldrh	r3, [r5, #12]
 800446c:	0598      	lsls	r0, r3, #22
 800446e:	d4ed      	bmi.n	800444c <_vfiprintf_r+0x4c>
 8004470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004472:	f000 fd1a 	bl	8004eaa <__retarget_lock_release_recursive>
 8004476:	e7e9      	b.n	800444c <_vfiprintf_r+0x4c>
 8004478:	2300      	movs	r3, #0
 800447a:	9309      	str	r3, [sp, #36]	; 0x24
 800447c:	2320      	movs	r3, #32
 800447e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004482:	f8cd 800c 	str.w	r8, [sp, #12]
 8004486:	2330      	movs	r3, #48	; 0x30
 8004488:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800464c <_vfiprintf_r+0x24c>
 800448c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004490:	f04f 0901 	mov.w	r9, #1
 8004494:	4623      	mov	r3, r4
 8004496:	469a      	mov	sl, r3
 8004498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800449c:	b10a      	cbz	r2, 80044a2 <_vfiprintf_r+0xa2>
 800449e:	2a25      	cmp	r2, #37	; 0x25
 80044a0:	d1f9      	bne.n	8004496 <_vfiprintf_r+0x96>
 80044a2:	ebba 0b04 	subs.w	fp, sl, r4
 80044a6:	d00b      	beq.n	80044c0 <_vfiprintf_r+0xc0>
 80044a8:	465b      	mov	r3, fp
 80044aa:	4622      	mov	r2, r4
 80044ac:	4629      	mov	r1, r5
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7ff ff93 	bl	80043da <__sfputs_r>
 80044b4:	3001      	adds	r0, #1
 80044b6:	f000 80aa 	beq.w	800460e <_vfiprintf_r+0x20e>
 80044ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044bc:	445a      	add	r2, fp
 80044be:	9209      	str	r2, [sp, #36]	; 0x24
 80044c0:	f89a 3000 	ldrb.w	r3, [sl]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80a2 	beq.w	800460e <_vfiprintf_r+0x20e>
 80044ca:	2300      	movs	r3, #0
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295
 80044d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044d4:	f10a 0a01 	add.w	sl, sl, #1
 80044d8:	9304      	str	r3, [sp, #16]
 80044da:	9307      	str	r3, [sp, #28]
 80044dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044e0:	931a      	str	r3, [sp, #104]	; 0x68
 80044e2:	4654      	mov	r4, sl
 80044e4:	2205      	movs	r2, #5
 80044e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ea:	4858      	ldr	r0, [pc, #352]	; (800464c <_vfiprintf_r+0x24c>)
 80044ec:	f7fb fe70 	bl	80001d0 <memchr>
 80044f0:	9a04      	ldr	r2, [sp, #16]
 80044f2:	b9d8      	cbnz	r0, 800452c <_vfiprintf_r+0x12c>
 80044f4:	06d1      	lsls	r1, r2, #27
 80044f6:	bf44      	itt	mi
 80044f8:	2320      	movmi	r3, #32
 80044fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044fe:	0713      	lsls	r3, r2, #28
 8004500:	bf44      	itt	mi
 8004502:	232b      	movmi	r3, #43	; 0x2b
 8004504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004508:	f89a 3000 	ldrb.w	r3, [sl]
 800450c:	2b2a      	cmp	r3, #42	; 0x2a
 800450e:	d015      	beq.n	800453c <_vfiprintf_r+0x13c>
 8004510:	9a07      	ldr	r2, [sp, #28]
 8004512:	4654      	mov	r4, sl
 8004514:	2000      	movs	r0, #0
 8004516:	f04f 0c0a 	mov.w	ip, #10
 800451a:	4621      	mov	r1, r4
 800451c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004520:	3b30      	subs	r3, #48	; 0x30
 8004522:	2b09      	cmp	r3, #9
 8004524:	d94e      	bls.n	80045c4 <_vfiprintf_r+0x1c4>
 8004526:	b1b0      	cbz	r0, 8004556 <_vfiprintf_r+0x156>
 8004528:	9207      	str	r2, [sp, #28]
 800452a:	e014      	b.n	8004556 <_vfiprintf_r+0x156>
 800452c:	eba0 0308 	sub.w	r3, r0, r8
 8004530:	fa09 f303 	lsl.w	r3, r9, r3
 8004534:	4313      	orrs	r3, r2
 8004536:	9304      	str	r3, [sp, #16]
 8004538:	46a2      	mov	sl, r4
 800453a:	e7d2      	b.n	80044e2 <_vfiprintf_r+0xe2>
 800453c:	9b03      	ldr	r3, [sp, #12]
 800453e:	1d19      	adds	r1, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	9103      	str	r1, [sp, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	bfbb      	ittet	lt
 8004548:	425b      	neglt	r3, r3
 800454a:	f042 0202 	orrlt.w	r2, r2, #2
 800454e:	9307      	strge	r3, [sp, #28]
 8004550:	9307      	strlt	r3, [sp, #28]
 8004552:	bfb8      	it	lt
 8004554:	9204      	strlt	r2, [sp, #16]
 8004556:	7823      	ldrb	r3, [r4, #0]
 8004558:	2b2e      	cmp	r3, #46	; 0x2e
 800455a:	d10c      	bne.n	8004576 <_vfiprintf_r+0x176>
 800455c:	7863      	ldrb	r3, [r4, #1]
 800455e:	2b2a      	cmp	r3, #42	; 0x2a
 8004560:	d135      	bne.n	80045ce <_vfiprintf_r+0x1ce>
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	1d1a      	adds	r2, r3, #4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	9203      	str	r2, [sp, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfb8      	it	lt
 800456e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004572:	3402      	adds	r4, #2
 8004574:	9305      	str	r3, [sp, #20]
 8004576:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800465c <_vfiprintf_r+0x25c>
 800457a:	7821      	ldrb	r1, [r4, #0]
 800457c:	2203      	movs	r2, #3
 800457e:	4650      	mov	r0, sl
 8004580:	f7fb fe26 	bl	80001d0 <memchr>
 8004584:	b140      	cbz	r0, 8004598 <_vfiprintf_r+0x198>
 8004586:	2340      	movs	r3, #64	; 0x40
 8004588:	eba0 000a 	sub.w	r0, r0, sl
 800458c:	fa03 f000 	lsl.w	r0, r3, r0
 8004590:	9b04      	ldr	r3, [sp, #16]
 8004592:	4303      	orrs	r3, r0
 8004594:	3401      	adds	r4, #1
 8004596:	9304      	str	r3, [sp, #16]
 8004598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459c:	482c      	ldr	r0, [pc, #176]	; (8004650 <_vfiprintf_r+0x250>)
 800459e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045a2:	2206      	movs	r2, #6
 80045a4:	f7fb fe14 	bl	80001d0 <memchr>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d03f      	beq.n	800462c <_vfiprintf_r+0x22c>
 80045ac:	4b29      	ldr	r3, [pc, #164]	; (8004654 <_vfiprintf_r+0x254>)
 80045ae:	bb1b      	cbnz	r3, 80045f8 <_vfiprintf_r+0x1f8>
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	3307      	adds	r3, #7
 80045b4:	f023 0307 	bic.w	r3, r3, #7
 80045b8:	3308      	adds	r3, #8
 80045ba:	9303      	str	r3, [sp, #12]
 80045bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045be:	443b      	add	r3, r7
 80045c0:	9309      	str	r3, [sp, #36]	; 0x24
 80045c2:	e767      	b.n	8004494 <_vfiprintf_r+0x94>
 80045c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80045c8:	460c      	mov	r4, r1
 80045ca:	2001      	movs	r0, #1
 80045cc:	e7a5      	b.n	800451a <_vfiprintf_r+0x11a>
 80045ce:	2300      	movs	r3, #0
 80045d0:	3401      	adds	r4, #1
 80045d2:	9305      	str	r3, [sp, #20]
 80045d4:	4619      	mov	r1, r3
 80045d6:	f04f 0c0a 	mov.w	ip, #10
 80045da:	4620      	mov	r0, r4
 80045dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045e0:	3a30      	subs	r2, #48	; 0x30
 80045e2:	2a09      	cmp	r2, #9
 80045e4:	d903      	bls.n	80045ee <_vfiprintf_r+0x1ee>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0c5      	beq.n	8004576 <_vfiprintf_r+0x176>
 80045ea:	9105      	str	r1, [sp, #20]
 80045ec:	e7c3      	b.n	8004576 <_vfiprintf_r+0x176>
 80045ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80045f2:	4604      	mov	r4, r0
 80045f4:	2301      	movs	r3, #1
 80045f6:	e7f0      	b.n	80045da <_vfiprintf_r+0x1da>
 80045f8:	ab03      	add	r3, sp, #12
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	462a      	mov	r2, r5
 80045fe:	4b16      	ldr	r3, [pc, #88]	; (8004658 <_vfiprintf_r+0x258>)
 8004600:	a904      	add	r1, sp, #16
 8004602:	4630      	mov	r0, r6
 8004604:	f3af 8000 	nop.w
 8004608:	4607      	mov	r7, r0
 800460a:	1c78      	adds	r0, r7, #1
 800460c:	d1d6      	bne.n	80045bc <_vfiprintf_r+0x1bc>
 800460e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004610:	07d9      	lsls	r1, r3, #31
 8004612:	d405      	bmi.n	8004620 <_vfiprintf_r+0x220>
 8004614:	89ab      	ldrh	r3, [r5, #12]
 8004616:	059a      	lsls	r2, r3, #22
 8004618:	d402      	bmi.n	8004620 <_vfiprintf_r+0x220>
 800461a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800461c:	f000 fc45 	bl	8004eaa <__retarget_lock_release_recursive>
 8004620:	89ab      	ldrh	r3, [r5, #12]
 8004622:	065b      	lsls	r3, r3, #25
 8004624:	f53f af12 	bmi.w	800444c <_vfiprintf_r+0x4c>
 8004628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800462a:	e711      	b.n	8004450 <_vfiprintf_r+0x50>
 800462c:	ab03      	add	r3, sp, #12
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	462a      	mov	r2, r5
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <_vfiprintf_r+0x258>)
 8004634:	a904      	add	r1, sp, #16
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f880 	bl	800473c <_printf_i>
 800463c:	e7e4      	b.n	8004608 <_vfiprintf_r+0x208>
 800463e:	bf00      	nop
 8004640:	080053bc 	.word	0x080053bc
 8004644:	080053dc 	.word	0x080053dc
 8004648:	0800539c 	.word	0x0800539c
 800464c:	08005366 	.word	0x08005366
 8004650:	08005370 	.word	0x08005370
 8004654:	00000000 	.word	0x00000000
 8004658:	080043db 	.word	0x080043db
 800465c:	0800536c 	.word	0x0800536c

08004660 <_printf_common>:
 8004660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	4616      	mov	r6, r2
 8004666:	4699      	mov	r9, r3
 8004668:	688a      	ldr	r2, [r1, #8]
 800466a:	690b      	ldr	r3, [r1, #16]
 800466c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004670:	4293      	cmp	r3, r2
 8004672:	bfb8      	it	lt
 8004674:	4613      	movlt	r3, r2
 8004676:	6033      	str	r3, [r6, #0]
 8004678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800467c:	4607      	mov	r7, r0
 800467e:	460c      	mov	r4, r1
 8004680:	b10a      	cbz	r2, 8004686 <_printf_common+0x26>
 8004682:	3301      	adds	r3, #1
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	0699      	lsls	r1, r3, #26
 800468a:	bf42      	ittt	mi
 800468c:	6833      	ldrmi	r3, [r6, #0]
 800468e:	3302      	addmi	r3, #2
 8004690:	6033      	strmi	r3, [r6, #0]
 8004692:	6825      	ldr	r5, [r4, #0]
 8004694:	f015 0506 	ands.w	r5, r5, #6
 8004698:	d106      	bne.n	80046a8 <_printf_common+0x48>
 800469a:	f104 0a19 	add.w	sl, r4, #25
 800469e:	68e3      	ldr	r3, [r4, #12]
 80046a0:	6832      	ldr	r2, [r6, #0]
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	42ab      	cmp	r3, r5
 80046a6:	dc26      	bgt.n	80046f6 <_printf_common+0x96>
 80046a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046ac:	1e13      	subs	r3, r2, #0
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	bf18      	it	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	0692      	lsls	r2, r2, #26
 80046b6:	d42b      	bmi.n	8004710 <_printf_common+0xb0>
 80046b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046bc:	4649      	mov	r1, r9
 80046be:	4638      	mov	r0, r7
 80046c0:	47c0      	blx	r8
 80046c2:	3001      	adds	r0, #1
 80046c4:	d01e      	beq.n	8004704 <_printf_common+0xa4>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	68e5      	ldr	r5, [r4, #12]
 80046ca:	6832      	ldr	r2, [r6, #0]
 80046cc:	f003 0306 	and.w	r3, r3, #6
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	bf08      	it	eq
 80046d4:	1aad      	subeq	r5, r5, r2
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	6922      	ldr	r2, [r4, #16]
 80046da:	bf0c      	ite	eq
 80046dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046e0:	2500      	movne	r5, #0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	bfc4      	itt	gt
 80046e6:	1a9b      	subgt	r3, r3, r2
 80046e8:	18ed      	addgt	r5, r5, r3
 80046ea:	2600      	movs	r6, #0
 80046ec:	341a      	adds	r4, #26
 80046ee:	42b5      	cmp	r5, r6
 80046f0:	d11a      	bne.n	8004728 <_printf_common+0xc8>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e008      	b.n	8004708 <_printf_common+0xa8>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4652      	mov	r2, sl
 80046fa:	4649      	mov	r1, r9
 80046fc:	4638      	mov	r0, r7
 80046fe:	47c0      	blx	r8
 8004700:	3001      	adds	r0, #1
 8004702:	d103      	bne.n	800470c <_printf_common+0xac>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470c:	3501      	adds	r5, #1
 800470e:	e7c6      	b.n	800469e <_printf_common+0x3e>
 8004710:	18e1      	adds	r1, r4, r3
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	2030      	movs	r0, #48	; 0x30
 8004716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800471a:	4422      	add	r2, r4
 800471c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004724:	3302      	adds	r3, #2
 8004726:	e7c7      	b.n	80046b8 <_printf_common+0x58>
 8004728:	2301      	movs	r3, #1
 800472a:	4622      	mov	r2, r4
 800472c:	4649      	mov	r1, r9
 800472e:	4638      	mov	r0, r7
 8004730:	47c0      	blx	r8
 8004732:	3001      	adds	r0, #1
 8004734:	d0e6      	beq.n	8004704 <_printf_common+0xa4>
 8004736:	3601      	adds	r6, #1
 8004738:	e7d9      	b.n	80046ee <_printf_common+0x8e>
	...

0800473c <_printf_i>:
 800473c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004740:	460c      	mov	r4, r1
 8004742:	4691      	mov	r9, r2
 8004744:	7e27      	ldrb	r7, [r4, #24]
 8004746:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004748:	2f78      	cmp	r7, #120	; 0x78
 800474a:	4680      	mov	r8, r0
 800474c:	469a      	mov	sl, r3
 800474e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004752:	d807      	bhi.n	8004764 <_printf_i+0x28>
 8004754:	2f62      	cmp	r7, #98	; 0x62
 8004756:	d80a      	bhi.n	800476e <_printf_i+0x32>
 8004758:	2f00      	cmp	r7, #0
 800475a:	f000 80d8 	beq.w	800490e <_printf_i+0x1d2>
 800475e:	2f58      	cmp	r7, #88	; 0x58
 8004760:	f000 80a3 	beq.w	80048aa <_printf_i+0x16e>
 8004764:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800476c:	e03a      	b.n	80047e4 <_printf_i+0xa8>
 800476e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004772:	2b15      	cmp	r3, #21
 8004774:	d8f6      	bhi.n	8004764 <_printf_i+0x28>
 8004776:	a001      	add	r0, pc, #4	; (adr r0, 800477c <_printf_i+0x40>)
 8004778:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047e9 	.word	0x080047e9
 8004784:	08004765 	.word	0x08004765
 8004788:	08004765 	.word	0x08004765
 800478c:	08004765 	.word	0x08004765
 8004790:	08004765 	.word	0x08004765
 8004794:	080047e9 	.word	0x080047e9
 8004798:	08004765 	.word	0x08004765
 800479c:	08004765 	.word	0x08004765
 80047a0:	08004765 	.word	0x08004765
 80047a4:	08004765 	.word	0x08004765
 80047a8:	080048f5 	.word	0x080048f5
 80047ac:	08004819 	.word	0x08004819
 80047b0:	080048d7 	.word	0x080048d7
 80047b4:	08004765 	.word	0x08004765
 80047b8:	08004765 	.word	0x08004765
 80047bc:	08004917 	.word	0x08004917
 80047c0:	08004765 	.word	0x08004765
 80047c4:	08004819 	.word	0x08004819
 80047c8:	08004765 	.word	0x08004765
 80047cc:	08004765 	.word	0x08004765
 80047d0:	080048df 	.word	0x080048df
 80047d4:	680b      	ldr	r3, [r1, #0]
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	600a      	str	r2, [r1, #0]
 80047dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0a3      	b.n	8004930 <_printf_i+0x1f4>
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	6808      	ldr	r0, [r1, #0]
 80047ec:	062e      	lsls	r6, r5, #24
 80047ee:	f100 0304 	add.w	r3, r0, #4
 80047f2:	d50a      	bpl.n	800480a <_printf_i+0xce>
 80047f4:	6805      	ldr	r5, [r0, #0]
 80047f6:	600b      	str	r3, [r1, #0]
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	da03      	bge.n	8004804 <_printf_i+0xc8>
 80047fc:	232d      	movs	r3, #45	; 0x2d
 80047fe:	426d      	negs	r5, r5
 8004800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004804:	485e      	ldr	r0, [pc, #376]	; (8004980 <_printf_i+0x244>)
 8004806:	230a      	movs	r3, #10
 8004808:	e019      	b.n	800483e <_printf_i+0x102>
 800480a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800480e:	6805      	ldr	r5, [r0, #0]
 8004810:	600b      	str	r3, [r1, #0]
 8004812:	bf18      	it	ne
 8004814:	b22d      	sxthne	r5, r5
 8004816:	e7ef      	b.n	80047f8 <_printf_i+0xbc>
 8004818:	680b      	ldr	r3, [r1, #0]
 800481a:	6825      	ldr	r5, [r4, #0]
 800481c:	1d18      	adds	r0, r3, #4
 800481e:	6008      	str	r0, [r1, #0]
 8004820:	0628      	lsls	r0, r5, #24
 8004822:	d501      	bpl.n	8004828 <_printf_i+0xec>
 8004824:	681d      	ldr	r5, [r3, #0]
 8004826:	e002      	b.n	800482e <_printf_i+0xf2>
 8004828:	0669      	lsls	r1, r5, #25
 800482a:	d5fb      	bpl.n	8004824 <_printf_i+0xe8>
 800482c:	881d      	ldrh	r5, [r3, #0]
 800482e:	4854      	ldr	r0, [pc, #336]	; (8004980 <_printf_i+0x244>)
 8004830:	2f6f      	cmp	r7, #111	; 0x6f
 8004832:	bf0c      	ite	eq
 8004834:	2308      	moveq	r3, #8
 8004836:	230a      	movne	r3, #10
 8004838:	2100      	movs	r1, #0
 800483a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800483e:	6866      	ldr	r6, [r4, #4]
 8004840:	60a6      	str	r6, [r4, #8]
 8004842:	2e00      	cmp	r6, #0
 8004844:	bfa2      	ittt	ge
 8004846:	6821      	ldrge	r1, [r4, #0]
 8004848:	f021 0104 	bicge.w	r1, r1, #4
 800484c:	6021      	strge	r1, [r4, #0]
 800484e:	b90d      	cbnz	r5, 8004854 <_printf_i+0x118>
 8004850:	2e00      	cmp	r6, #0
 8004852:	d04d      	beq.n	80048f0 <_printf_i+0x1b4>
 8004854:	4616      	mov	r6, r2
 8004856:	fbb5 f1f3 	udiv	r1, r5, r3
 800485a:	fb03 5711 	mls	r7, r3, r1, r5
 800485e:	5dc7      	ldrb	r7, [r0, r7]
 8004860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004864:	462f      	mov	r7, r5
 8004866:	42bb      	cmp	r3, r7
 8004868:	460d      	mov	r5, r1
 800486a:	d9f4      	bls.n	8004856 <_printf_i+0x11a>
 800486c:	2b08      	cmp	r3, #8
 800486e:	d10b      	bne.n	8004888 <_printf_i+0x14c>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	07df      	lsls	r7, r3, #31
 8004874:	d508      	bpl.n	8004888 <_printf_i+0x14c>
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	6861      	ldr	r1, [r4, #4]
 800487a:	4299      	cmp	r1, r3
 800487c:	bfde      	ittt	le
 800487e:	2330      	movle	r3, #48	; 0x30
 8004880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004888:	1b92      	subs	r2, r2, r6
 800488a:	6122      	str	r2, [r4, #16]
 800488c:	f8cd a000 	str.w	sl, [sp]
 8004890:	464b      	mov	r3, r9
 8004892:	aa03      	add	r2, sp, #12
 8004894:	4621      	mov	r1, r4
 8004896:	4640      	mov	r0, r8
 8004898:	f7ff fee2 	bl	8004660 <_printf_common>
 800489c:	3001      	adds	r0, #1
 800489e:	d14c      	bne.n	800493a <_printf_i+0x1fe>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	b004      	add	sp, #16
 80048a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048aa:	4835      	ldr	r0, [pc, #212]	; (8004980 <_printf_i+0x244>)
 80048ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	680e      	ldr	r6, [r1, #0]
 80048b4:	061f      	lsls	r7, r3, #24
 80048b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80048ba:	600e      	str	r6, [r1, #0]
 80048bc:	d514      	bpl.n	80048e8 <_printf_i+0x1ac>
 80048be:	07d9      	lsls	r1, r3, #31
 80048c0:	bf44      	itt	mi
 80048c2:	f043 0320 	orrmi.w	r3, r3, #32
 80048c6:	6023      	strmi	r3, [r4, #0]
 80048c8:	b91d      	cbnz	r5, 80048d2 <_printf_i+0x196>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	f023 0320 	bic.w	r3, r3, #32
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	2310      	movs	r3, #16
 80048d4:	e7b0      	b.n	8004838 <_printf_i+0xfc>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	f043 0320 	orr.w	r3, r3, #32
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	2378      	movs	r3, #120	; 0x78
 80048e0:	4828      	ldr	r0, [pc, #160]	; (8004984 <_printf_i+0x248>)
 80048e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e6:	e7e3      	b.n	80048b0 <_printf_i+0x174>
 80048e8:	065e      	lsls	r6, r3, #25
 80048ea:	bf48      	it	mi
 80048ec:	b2ad      	uxthmi	r5, r5
 80048ee:	e7e6      	b.n	80048be <_printf_i+0x182>
 80048f0:	4616      	mov	r6, r2
 80048f2:	e7bb      	b.n	800486c <_printf_i+0x130>
 80048f4:	680b      	ldr	r3, [r1, #0]
 80048f6:	6826      	ldr	r6, [r4, #0]
 80048f8:	6960      	ldr	r0, [r4, #20]
 80048fa:	1d1d      	adds	r5, r3, #4
 80048fc:	600d      	str	r5, [r1, #0]
 80048fe:	0635      	lsls	r5, r6, #24
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	d501      	bpl.n	8004908 <_printf_i+0x1cc>
 8004904:	6018      	str	r0, [r3, #0]
 8004906:	e002      	b.n	800490e <_printf_i+0x1d2>
 8004908:	0671      	lsls	r1, r6, #25
 800490a:	d5fb      	bpl.n	8004904 <_printf_i+0x1c8>
 800490c:	8018      	strh	r0, [r3, #0]
 800490e:	2300      	movs	r3, #0
 8004910:	6123      	str	r3, [r4, #16]
 8004912:	4616      	mov	r6, r2
 8004914:	e7ba      	b.n	800488c <_printf_i+0x150>
 8004916:	680b      	ldr	r3, [r1, #0]
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	600a      	str	r2, [r1, #0]
 800491c:	681e      	ldr	r6, [r3, #0]
 800491e:	6862      	ldr	r2, [r4, #4]
 8004920:	2100      	movs	r1, #0
 8004922:	4630      	mov	r0, r6
 8004924:	f7fb fc54 	bl	80001d0 <memchr>
 8004928:	b108      	cbz	r0, 800492e <_printf_i+0x1f2>
 800492a:	1b80      	subs	r0, r0, r6
 800492c:	6060      	str	r0, [r4, #4]
 800492e:	6863      	ldr	r3, [r4, #4]
 8004930:	6123      	str	r3, [r4, #16]
 8004932:	2300      	movs	r3, #0
 8004934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004938:	e7a8      	b.n	800488c <_printf_i+0x150>
 800493a:	6923      	ldr	r3, [r4, #16]
 800493c:	4632      	mov	r2, r6
 800493e:	4649      	mov	r1, r9
 8004940:	4640      	mov	r0, r8
 8004942:	47d0      	blx	sl
 8004944:	3001      	adds	r0, #1
 8004946:	d0ab      	beq.n	80048a0 <_printf_i+0x164>
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	079b      	lsls	r3, r3, #30
 800494c:	d413      	bmi.n	8004976 <_printf_i+0x23a>
 800494e:	68e0      	ldr	r0, [r4, #12]
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	4298      	cmp	r0, r3
 8004954:	bfb8      	it	lt
 8004956:	4618      	movlt	r0, r3
 8004958:	e7a4      	b.n	80048a4 <_printf_i+0x168>
 800495a:	2301      	movs	r3, #1
 800495c:	4632      	mov	r2, r6
 800495e:	4649      	mov	r1, r9
 8004960:	4640      	mov	r0, r8
 8004962:	47d0      	blx	sl
 8004964:	3001      	adds	r0, #1
 8004966:	d09b      	beq.n	80048a0 <_printf_i+0x164>
 8004968:	3501      	adds	r5, #1
 800496a:	68e3      	ldr	r3, [r4, #12]
 800496c:	9903      	ldr	r1, [sp, #12]
 800496e:	1a5b      	subs	r3, r3, r1
 8004970:	42ab      	cmp	r3, r5
 8004972:	dcf2      	bgt.n	800495a <_printf_i+0x21e>
 8004974:	e7eb      	b.n	800494e <_printf_i+0x212>
 8004976:	2500      	movs	r5, #0
 8004978:	f104 0619 	add.w	r6, r4, #25
 800497c:	e7f5      	b.n	800496a <_printf_i+0x22e>
 800497e:	bf00      	nop
 8004980:	08005377 	.word	0x08005377
 8004984:	08005388 	.word	0x08005388

08004988 <_sbrk_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4d06      	ldr	r5, [pc, #24]	; (80049a4 <_sbrk_r+0x1c>)
 800498c:	2300      	movs	r3, #0
 800498e:	4604      	mov	r4, r0
 8004990:	4608      	mov	r0, r1
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	f7fc fb8e 	bl	80010b4 <_sbrk>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d102      	bne.n	80049a2 <_sbrk_r+0x1a>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	b103      	cbz	r3, 80049a2 <_sbrk_r+0x1a>
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	20000240 	.word	0x20000240

080049a8 <__swbuf_r>:
 80049a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049aa:	460e      	mov	r6, r1
 80049ac:	4614      	mov	r4, r2
 80049ae:	4605      	mov	r5, r0
 80049b0:	b118      	cbz	r0, 80049ba <__swbuf_r+0x12>
 80049b2:	6983      	ldr	r3, [r0, #24]
 80049b4:	b90b      	cbnz	r3, 80049ba <__swbuf_r+0x12>
 80049b6:	f000 f9d9 	bl	8004d6c <__sinit>
 80049ba:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <__swbuf_r+0x98>)
 80049bc:	429c      	cmp	r4, r3
 80049be:	d12b      	bne.n	8004a18 <__swbuf_r+0x70>
 80049c0:	686c      	ldr	r4, [r5, #4]
 80049c2:	69a3      	ldr	r3, [r4, #24]
 80049c4:	60a3      	str	r3, [r4, #8]
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	071a      	lsls	r2, r3, #28
 80049ca:	d52f      	bpl.n	8004a2c <__swbuf_r+0x84>
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	b36b      	cbz	r3, 8004a2c <__swbuf_r+0x84>
 80049d0:	6923      	ldr	r3, [r4, #16]
 80049d2:	6820      	ldr	r0, [r4, #0]
 80049d4:	1ac0      	subs	r0, r0, r3
 80049d6:	6963      	ldr	r3, [r4, #20]
 80049d8:	b2f6      	uxtb	r6, r6
 80049da:	4283      	cmp	r3, r0
 80049dc:	4637      	mov	r7, r6
 80049de:	dc04      	bgt.n	80049ea <__swbuf_r+0x42>
 80049e0:	4621      	mov	r1, r4
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 f92e 	bl	8004c44 <_fflush_r>
 80049e8:	bb30      	cbnz	r0, 8004a38 <__swbuf_r+0x90>
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	60a3      	str	r3, [r4, #8]
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	6022      	str	r2, [r4, #0]
 80049f6:	701e      	strb	r6, [r3, #0]
 80049f8:	6963      	ldr	r3, [r4, #20]
 80049fa:	3001      	adds	r0, #1
 80049fc:	4283      	cmp	r3, r0
 80049fe:	d004      	beq.n	8004a0a <__swbuf_r+0x62>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	07db      	lsls	r3, r3, #31
 8004a04:	d506      	bpl.n	8004a14 <__swbuf_r+0x6c>
 8004a06:	2e0a      	cmp	r6, #10
 8004a08:	d104      	bne.n	8004a14 <__swbuf_r+0x6c>
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f000 f919 	bl	8004c44 <_fflush_r>
 8004a12:	b988      	cbnz	r0, 8004a38 <__swbuf_r+0x90>
 8004a14:	4638      	mov	r0, r7
 8004a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a18:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <__swbuf_r+0x9c>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d101      	bne.n	8004a22 <__swbuf_r+0x7a>
 8004a1e:	68ac      	ldr	r4, [r5, #8]
 8004a20:	e7cf      	b.n	80049c2 <__swbuf_r+0x1a>
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <__swbuf_r+0xa0>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	bf08      	it	eq
 8004a28:	68ec      	ldreq	r4, [r5, #12]
 8004a2a:	e7ca      	b.n	80049c2 <__swbuf_r+0x1a>
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 f80c 	bl	8004a4c <__swsetup_r>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d0cb      	beq.n	80049d0 <__swbuf_r+0x28>
 8004a38:	f04f 37ff 	mov.w	r7, #4294967295
 8004a3c:	e7ea      	b.n	8004a14 <__swbuf_r+0x6c>
 8004a3e:	bf00      	nop
 8004a40:	080053bc 	.word	0x080053bc
 8004a44:	080053dc 	.word	0x080053dc
 8004a48:	0800539c 	.word	0x0800539c

08004a4c <__swsetup_r>:
 8004a4c:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <__swsetup_r+0xcc>)
 8004a4e:	b570      	push	{r4, r5, r6, lr}
 8004a50:	681d      	ldr	r5, [r3, #0]
 8004a52:	4606      	mov	r6, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	b125      	cbz	r5, 8004a62 <__swsetup_r+0x16>
 8004a58:	69ab      	ldr	r3, [r5, #24]
 8004a5a:	b913      	cbnz	r3, 8004a62 <__swsetup_r+0x16>
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 f985 	bl	8004d6c <__sinit>
 8004a62:	4b2e      	ldr	r3, [pc, #184]	; (8004b1c <__swsetup_r+0xd0>)
 8004a64:	429c      	cmp	r4, r3
 8004a66:	d10f      	bne.n	8004a88 <__swsetup_r+0x3c>
 8004a68:	686c      	ldr	r4, [r5, #4]
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a70:	0719      	lsls	r1, r3, #28
 8004a72:	d42c      	bmi.n	8004ace <__swsetup_r+0x82>
 8004a74:	06dd      	lsls	r5, r3, #27
 8004a76:	d411      	bmi.n	8004a9c <__swsetup_r+0x50>
 8004a78:	2309      	movs	r3, #9
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	e03e      	b.n	8004b06 <__swsetup_r+0xba>
 8004a88:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <__swsetup_r+0xd4>)
 8004a8a:	429c      	cmp	r4, r3
 8004a8c:	d101      	bne.n	8004a92 <__swsetup_r+0x46>
 8004a8e:	68ac      	ldr	r4, [r5, #8]
 8004a90:	e7eb      	b.n	8004a6a <__swsetup_r+0x1e>
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <__swsetup_r+0xd8>)
 8004a94:	429c      	cmp	r4, r3
 8004a96:	bf08      	it	eq
 8004a98:	68ec      	ldreq	r4, [r5, #12]
 8004a9a:	e7e6      	b.n	8004a6a <__swsetup_r+0x1e>
 8004a9c:	0758      	lsls	r0, r3, #29
 8004a9e:	d512      	bpl.n	8004ac6 <__swsetup_r+0x7a>
 8004aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aa2:	b141      	cbz	r1, 8004ab6 <__swsetup_r+0x6a>
 8004aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	d002      	beq.n	8004ab2 <__swsetup_r+0x66>
 8004aac:	4630      	mov	r0, r6
 8004aae:	f7ff fa77 	bl	8003fa0 <_free_r>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004abc:	81a3      	strh	r3, [r4, #12]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	b94b      	cbnz	r3, 8004ae6 <__swsetup_r+0x9a>
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004adc:	d003      	beq.n	8004ae6 <__swsetup_r+0x9a>
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f000 fa07 	bl	8004ef4 <__smakebuf_r>
 8004ae6:	89a0      	ldrh	r0, [r4, #12]
 8004ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004aec:	f010 0301 	ands.w	r3, r0, #1
 8004af0:	d00a      	beq.n	8004b08 <__swsetup_r+0xbc>
 8004af2:	2300      	movs	r3, #0
 8004af4:	60a3      	str	r3, [r4, #8]
 8004af6:	6963      	ldr	r3, [r4, #20]
 8004af8:	425b      	negs	r3, r3
 8004afa:	61a3      	str	r3, [r4, #24]
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	b943      	cbnz	r3, 8004b12 <__swsetup_r+0xc6>
 8004b00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b04:	d1ba      	bne.n	8004a7c <__swsetup_r+0x30>
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	0781      	lsls	r1, r0, #30
 8004b0a:	bf58      	it	pl
 8004b0c:	6963      	ldrpl	r3, [r4, #20]
 8004b0e:	60a3      	str	r3, [r4, #8]
 8004b10:	e7f4      	b.n	8004afc <__swsetup_r+0xb0>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e7f7      	b.n	8004b06 <__swsetup_r+0xba>
 8004b16:	bf00      	nop
 8004b18:	20000010 	.word	0x20000010
 8004b1c:	080053bc 	.word	0x080053bc
 8004b20:	080053dc 	.word	0x080053dc
 8004b24:	0800539c 	.word	0x0800539c

08004b28 <abort>:
 8004b28:	b508      	push	{r3, lr}
 8004b2a:	2006      	movs	r0, #6
 8004b2c:	f000 faa4 	bl	8005078 <raise>
 8004b30:	2001      	movs	r0, #1
 8004b32:	f7fc fa47 	bl	8000fc4 <_exit>
	...

08004b38 <__sflush_r>:
 8004b38:	898a      	ldrh	r2, [r1, #12]
 8004b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3e:	4605      	mov	r5, r0
 8004b40:	0710      	lsls	r0, r2, #28
 8004b42:	460c      	mov	r4, r1
 8004b44:	d458      	bmi.n	8004bf8 <__sflush_r+0xc0>
 8004b46:	684b      	ldr	r3, [r1, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	dc05      	bgt.n	8004b58 <__sflush_r+0x20>
 8004b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	dc02      	bgt.n	8004b58 <__sflush_r+0x20>
 8004b52:	2000      	movs	r0, #0
 8004b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b5a:	2e00      	cmp	r6, #0
 8004b5c:	d0f9      	beq.n	8004b52 <__sflush_r+0x1a>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b64:	682f      	ldr	r7, [r5, #0]
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	d032      	beq.n	8004bd0 <__sflush_r+0x98>
 8004b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	075a      	lsls	r2, r3, #29
 8004b70:	d505      	bpl.n	8004b7e <__sflush_r+0x46>
 8004b72:	6863      	ldr	r3, [r4, #4]
 8004b74:	1ac0      	subs	r0, r0, r3
 8004b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b78:	b10b      	cbz	r3, 8004b7e <__sflush_r+0x46>
 8004b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b7c:	1ac0      	subs	r0, r0, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	4602      	mov	r2, r0
 8004b82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b84:	6a21      	ldr	r1, [r4, #32]
 8004b86:	4628      	mov	r0, r5
 8004b88:	47b0      	blx	r6
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	d106      	bne.n	8004b9e <__sflush_r+0x66>
 8004b90:	6829      	ldr	r1, [r5, #0]
 8004b92:	291d      	cmp	r1, #29
 8004b94:	d82c      	bhi.n	8004bf0 <__sflush_r+0xb8>
 8004b96:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <__sflush_r+0x108>)
 8004b98:	40ca      	lsrs	r2, r1
 8004b9a:	07d6      	lsls	r6, r2, #31
 8004b9c:	d528      	bpl.n	8004bf0 <__sflush_r+0xb8>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	6062      	str	r2, [r4, #4]
 8004ba2:	04d9      	lsls	r1, r3, #19
 8004ba4:	6922      	ldr	r2, [r4, #16]
 8004ba6:	6022      	str	r2, [r4, #0]
 8004ba8:	d504      	bpl.n	8004bb4 <__sflush_r+0x7c>
 8004baa:	1c42      	adds	r2, r0, #1
 8004bac:	d101      	bne.n	8004bb2 <__sflush_r+0x7a>
 8004bae:	682b      	ldr	r3, [r5, #0]
 8004bb0:	b903      	cbnz	r3, 8004bb4 <__sflush_r+0x7c>
 8004bb2:	6560      	str	r0, [r4, #84]	; 0x54
 8004bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bb6:	602f      	str	r7, [r5, #0]
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d0ca      	beq.n	8004b52 <__sflush_r+0x1a>
 8004bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	d002      	beq.n	8004bca <__sflush_r+0x92>
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f7ff f9eb 	bl	8003fa0 <_free_r>
 8004bca:	2000      	movs	r0, #0
 8004bcc:	6360      	str	r0, [r4, #52]	; 0x34
 8004bce:	e7c1      	b.n	8004b54 <__sflush_r+0x1c>
 8004bd0:	6a21      	ldr	r1, [r4, #32]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b0      	blx	r6
 8004bd8:	1c41      	adds	r1, r0, #1
 8004bda:	d1c7      	bne.n	8004b6c <__sflush_r+0x34>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0c4      	beq.n	8004b6c <__sflush_r+0x34>
 8004be2:	2b1d      	cmp	r3, #29
 8004be4:	d001      	beq.n	8004bea <__sflush_r+0xb2>
 8004be6:	2b16      	cmp	r3, #22
 8004be8:	d101      	bne.n	8004bee <__sflush_r+0xb6>
 8004bea:	602f      	str	r7, [r5, #0]
 8004bec:	e7b1      	b.n	8004b52 <__sflush_r+0x1a>
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	e7ad      	b.n	8004b54 <__sflush_r+0x1c>
 8004bf8:	690f      	ldr	r7, [r1, #16]
 8004bfa:	2f00      	cmp	r7, #0
 8004bfc:	d0a9      	beq.n	8004b52 <__sflush_r+0x1a>
 8004bfe:	0793      	lsls	r3, r2, #30
 8004c00:	680e      	ldr	r6, [r1, #0]
 8004c02:	bf08      	it	eq
 8004c04:	694b      	ldreq	r3, [r1, #20]
 8004c06:	600f      	str	r7, [r1, #0]
 8004c08:	bf18      	it	ne
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	eba6 0807 	sub.w	r8, r6, r7
 8004c10:	608b      	str	r3, [r1, #8]
 8004c12:	f1b8 0f00 	cmp.w	r8, #0
 8004c16:	dd9c      	ble.n	8004b52 <__sflush_r+0x1a>
 8004c18:	6a21      	ldr	r1, [r4, #32]
 8004c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c1c:	4643      	mov	r3, r8
 8004c1e:	463a      	mov	r2, r7
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b0      	blx	r6
 8004c24:	2800      	cmp	r0, #0
 8004c26:	dc06      	bgt.n	8004c36 <__sflush_r+0xfe>
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c2e:	81a3      	strh	r3, [r4, #12]
 8004c30:	f04f 30ff 	mov.w	r0, #4294967295
 8004c34:	e78e      	b.n	8004b54 <__sflush_r+0x1c>
 8004c36:	4407      	add	r7, r0
 8004c38:	eba8 0800 	sub.w	r8, r8, r0
 8004c3c:	e7e9      	b.n	8004c12 <__sflush_r+0xda>
 8004c3e:	bf00      	nop
 8004c40:	20400001 	.word	0x20400001

08004c44 <_fflush_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	690b      	ldr	r3, [r1, #16]
 8004c48:	4605      	mov	r5, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	b913      	cbnz	r3, 8004c54 <_fflush_r+0x10>
 8004c4e:	2500      	movs	r5, #0
 8004c50:	4628      	mov	r0, r5
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	b118      	cbz	r0, 8004c5e <_fflush_r+0x1a>
 8004c56:	6983      	ldr	r3, [r0, #24]
 8004c58:	b90b      	cbnz	r3, 8004c5e <_fflush_r+0x1a>
 8004c5a:	f000 f887 	bl	8004d6c <__sinit>
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <_fflush_r+0x6c>)
 8004c60:	429c      	cmp	r4, r3
 8004c62:	d11b      	bne.n	8004c9c <_fflush_r+0x58>
 8004c64:	686c      	ldr	r4, [r5, #4]
 8004c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0ef      	beq.n	8004c4e <_fflush_r+0xa>
 8004c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c70:	07d0      	lsls	r0, r2, #31
 8004c72:	d404      	bmi.n	8004c7e <_fflush_r+0x3a>
 8004c74:	0599      	lsls	r1, r3, #22
 8004c76:	d402      	bmi.n	8004c7e <_fflush_r+0x3a>
 8004c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c7a:	f000 f915 	bl	8004ea8 <__retarget_lock_acquire_recursive>
 8004c7e:	4628      	mov	r0, r5
 8004c80:	4621      	mov	r1, r4
 8004c82:	f7ff ff59 	bl	8004b38 <__sflush_r>
 8004c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c88:	07da      	lsls	r2, r3, #31
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	d4e0      	bmi.n	8004c50 <_fflush_r+0xc>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	059b      	lsls	r3, r3, #22
 8004c92:	d4dd      	bmi.n	8004c50 <_fflush_r+0xc>
 8004c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c96:	f000 f908 	bl	8004eaa <__retarget_lock_release_recursive>
 8004c9a:	e7d9      	b.n	8004c50 <_fflush_r+0xc>
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <_fflush_r+0x70>)
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	d101      	bne.n	8004ca6 <_fflush_r+0x62>
 8004ca2:	68ac      	ldr	r4, [r5, #8]
 8004ca4:	e7df      	b.n	8004c66 <_fflush_r+0x22>
 8004ca6:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <_fflush_r+0x74>)
 8004ca8:	429c      	cmp	r4, r3
 8004caa:	bf08      	it	eq
 8004cac:	68ec      	ldreq	r4, [r5, #12]
 8004cae:	e7da      	b.n	8004c66 <_fflush_r+0x22>
 8004cb0:	080053bc 	.word	0x080053bc
 8004cb4:	080053dc 	.word	0x080053dc
 8004cb8:	0800539c 	.word	0x0800539c

08004cbc <std>:
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8004cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cca:	6083      	str	r3, [r0, #8]
 8004ccc:	8181      	strh	r1, [r0, #12]
 8004cce:	6643      	str	r3, [r0, #100]	; 0x64
 8004cd0:	81c2      	strh	r2, [r0, #14]
 8004cd2:	6183      	str	r3, [r0, #24]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	305c      	adds	r0, #92	; 0x5c
 8004cda:	f7ff f8c1 	bl	8003e60 <memset>
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <std+0x38>)
 8004ce0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <std+0x3c>)
 8004ce4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <std+0x40>)
 8004ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <std+0x44>)
 8004cec:	6224      	str	r4, [r4, #32]
 8004cee:	6323      	str	r3, [r4, #48]	; 0x30
 8004cf0:	bd10      	pop	{r4, pc}
 8004cf2:	bf00      	nop
 8004cf4:	080050b1 	.word	0x080050b1
 8004cf8:	080050d3 	.word	0x080050d3
 8004cfc:	0800510b 	.word	0x0800510b
 8004d00:	0800512f 	.word	0x0800512f

08004d04 <_cleanup_r>:
 8004d04:	4901      	ldr	r1, [pc, #4]	; (8004d0c <_cleanup_r+0x8>)
 8004d06:	f000 b8af 	b.w	8004e68 <_fwalk_reent>
 8004d0a:	bf00      	nop
 8004d0c:	08004c45 	.word	0x08004c45

08004d10 <__sfmoreglue>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	1e4a      	subs	r2, r1, #1
 8004d14:	2568      	movs	r5, #104	; 0x68
 8004d16:	4355      	muls	r5, r2
 8004d18:	460e      	mov	r6, r1
 8004d1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d1e:	f7ff f98f 	bl	8004040 <_malloc_r>
 8004d22:	4604      	mov	r4, r0
 8004d24:	b140      	cbz	r0, 8004d38 <__sfmoreglue+0x28>
 8004d26:	2100      	movs	r1, #0
 8004d28:	e9c0 1600 	strd	r1, r6, [r0]
 8004d2c:	300c      	adds	r0, #12
 8004d2e:	60a0      	str	r0, [r4, #8]
 8004d30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d34:	f7ff f894 	bl	8003e60 <memset>
 8004d38:	4620      	mov	r0, r4
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}

08004d3c <__sfp_lock_acquire>:
 8004d3c:	4801      	ldr	r0, [pc, #4]	; (8004d44 <__sfp_lock_acquire+0x8>)
 8004d3e:	f000 b8b3 	b.w	8004ea8 <__retarget_lock_acquire_recursive>
 8004d42:	bf00      	nop
 8004d44:	2000023c 	.word	0x2000023c

08004d48 <__sfp_lock_release>:
 8004d48:	4801      	ldr	r0, [pc, #4]	; (8004d50 <__sfp_lock_release+0x8>)
 8004d4a:	f000 b8ae 	b.w	8004eaa <__retarget_lock_release_recursive>
 8004d4e:	bf00      	nop
 8004d50:	2000023c 	.word	0x2000023c

08004d54 <__sinit_lock_acquire>:
 8004d54:	4801      	ldr	r0, [pc, #4]	; (8004d5c <__sinit_lock_acquire+0x8>)
 8004d56:	f000 b8a7 	b.w	8004ea8 <__retarget_lock_acquire_recursive>
 8004d5a:	bf00      	nop
 8004d5c:	20000237 	.word	0x20000237

08004d60 <__sinit_lock_release>:
 8004d60:	4801      	ldr	r0, [pc, #4]	; (8004d68 <__sinit_lock_release+0x8>)
 8004d62:	f000 b8a2 	b.w	8004eaa <__retarget_lock_release_recursive>
 8004d66:	bf00      	nop
 8004d68:	20000237 	.word	0x20000237

08004d6c <__sinit>:
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	4604      	mov	r4, r0
 8004d70:	f7ff fff0 	bl	8004d54 <__sinit_lock_acquire>
 8004d74:	69a3      	ldr	r3, [r4, #24]
 8004d76:	b11b      	cbz	r3, 8004d80 <__sinit+0x14>
 8004d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d7c:	f7ff bff0 	b.w	8004d60 <__sinit_lock_release>
 8004d80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d84:	6523      	str	r3, [r4, #80]	; 0x50
 8004d86:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <__sinit+0x68>)
 8004d88:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <__sinit+0x6c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d8e:	42a3      	cmp	r3, r4
 8004d90:	bf04      	itt	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	61a3      	streq	r3, [r4, #24]
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 f820 	bl	8004ddc <__sfp>
 8004d9c:	6060      	str	r0, [r4, #4]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f000 f81c 	bl	8004ddc <__sfp>
 8004da4:	60a0      	str	r0, [r4, #8]
 8004da6:	4620      	mov	r0, r4
 8004da8:	f000 f818 	bl	8004ddc <__sfp>
 8004dac:	2200      	movs	r2, #0
 8004dae:	60e0      	str	r0, [r4, #12]
 8004db0:	2104      	movs	r1, #4
 8004db2:	6860      	ldr	r0, [r4, #4]
 8004db4:	f7ff ff82 	bl	8004cbc <std>
 8004db8:	68a0      	ldr	r0, [r4, #8]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	2109      	movs	r1, #9
 8004dbe:	f7ff ff7d 	bl	8004cbc <std>
 8004dc2:	68e0      	ldr	r0, [r4, #12]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	2112      	movs	r1, #18
 8004dc8:	f7ff ff78 	bl	8004cbc <std>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	61a3      	str	r3, [r4, #24]
 8004dd0:	e7d2      	b.n	8004d78 <__sinit+0xc>
 8004dd2:	bf00      	nop
 8004dd4:	080052b0 	.word	0x080052b0
 8004dd8:	08004d05 	.word	0x08004d05

08004ddc <__sfp>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	4607      	mov	r7, r0
 8004de0:	f7ff ffac 	bl	8004d3c <__sfp_lock_acquire>
 8004de4:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <__sfp+0x84>)
 8004de6:	681e      	ldr	r6, [r3, #0]
 8004de8:	69b3      	ldr	r3, [r6, #24]
 8004dea:	b913      	cbnz	r3, 8004df2 <__sfp+0x16>
 8004dec:	4630      	mov	r0, r6
 8004dee:	f7ff ffbd 	bl	8004d6c <__sinit>
 8004df2:	3648      	adds	r6, #72	; 0x48
 8004df4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	d503      	bpl.n	8004e04 <__sfp+0x28>
 8004dfc:	6833      	ldr	r3, [r6, #0]
 8004dfe:	b30b      	cbz	r3, 8004e44 <__sfp+0x68>
 8004e00:	6836      	ldr	r6, [r6, #0]
 8004e02:	e7f7      	b.n	8004df4 <__sfp+0x18>
 8004e04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e08:	b9d5      	cbnz	r5, 8004e40 <__sfp+0x64>
 8004e0a:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <__sfp+0x88>)
 8004e0c:	60e3      	str	r3, [r4, #12]
 8004e0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e12:	6665      	str	r5, [r4, #100]	; 0x64
 8004e14:	f000 f847 	bl	8004ea6 <__retarget_lock_init_recursive>
 8004e18:	f7ff ff96 	bl	8004d48 <__sfp_lock_release>
 8004e1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e24:	6025      	str	r5, [r4, #0]
 8004e26:	61a5      	str	r5, [r4, #24]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e30:	f7ff f816 	bl	8003e60 <memset>
 8004e34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e40:	3468      	adds	r4, #104	; 0x68
 8004e42:	e7d9      	b.n	8004df8 <__sfp+0x1c>
 8004e44:	2104      	movs	r1, #4
 8004e46:	4638      	mov	r0, r7
 8004e48:	f7ff ff62 	bl	8004d10 <__sfmoreglue>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	6030      	str	r0, [r6, #0]
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d1d5      	bne.n	8004e00 <__sfp+0x24>
 8004e54:	f7ff ff78 	bl	8004d48 <__sfp_lock_release>
 8004e58:	230c      	movs	r3, #12
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	e7ee      	b.n	8004e3c <__sfp+0x60>
 8004e5e:	bf00      	nop
 8004e60:	080052b0 	.word	0x080052b0
 8004e64:	ffff0001 	.word	0xffff0001

08004e68 <_fwalk_reent>:
 8004e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	4688      	mov	r8, r1
 8004e70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e74:	2700      	movs	r7, #0
 8004e76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e7a:	f1b9 0901 	subs.w	r9, r9, #1
 8004e7e:	d505      	bpl.n	8004e8c <_fwalk_reent+0x24>
 8004e80:	6824      	ldr	r4, [r4, #0]
 8004e82:	2c00      	cmp	r4, #0
 8004e84:	d1f7      	bne.n	8004e76 <_fwalk_reent+0xe>
 8004e86:	4638      	mov	r0, r7
 8004e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e8c:	89ab      	ldrh	r3, [r5, #12]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d907      	bls.n	8004ea2 <_fwalk_reent+0x3a>
 8004e92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e96:	3301      	adds	r3, #1
 8004e98:	d003      	beq.n	8004ea2 <_fwalk_reent+0x3a>
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	47c0      	blx	r8
 8004ea0:	4307      	orrs	r7, r0
 8004ea2:	3568      	adds	r5, #104	; 0x68
 8004ea4:	e7e9      	b.n	8004e7a <_fwalk_reent+0x12>

08004ea6 <__retarget_lock_init_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <__retarget_lock_acquire_recursive>:
 8004ea8:	4770      	bx	lr

08004eaa <__retarget_lock_release_recursive>:
 8004eaa:	4770      	bx	lr

08004eac <__swhatbuf_r>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	460e      	mov	r6, r1
 8004eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	b096      	sub	sp, #88	; 0x58
 8004eb8:	4614      	mov	r4, r2
 8004eba:	461d      	mov	r5, r3
 8004ebc:	da07      	bge.n	8004ece <__swhatbuf_r+0x22>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	602b      	str	r3, [r5, #0]
 8004ec2:	89b3      	ldrh	r3, [r6, #12]
 8004ec4:	061a      	lsls	r2, r3, #24
 8004ec6:	d410      	bmi.n	8004eea <__swhatbuf_r+0x3e>
 8004ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ecc:	e00e      	b.n	8004eec <__swhatbuf_r+0x40>
 8004ece:	466a      	mov	r2, sp
 8004ed0:	f000 f954 	bl	800517c <_fstat_r>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	dbf2      	blt.n	8004ebe <__swhatbuf_r+0x12>
 8004ed8:	9a01      	ldr	r2, [sp, #4]
 8004eda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ede:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ee2:	425a      	negs	r2, r3
 8004ee4:	415a      	adcs	r2, r3
 8004ee6:	602a      	str	r2, [r5, #0]
 8004ee8:	e7ee      	b.n	8004ec8 <__swhatbuf_r+0x1c>
 8004eea:	2340      	movs	r3, #64	; 0x40
 8004eec:	2000      	movs	r0, #0
 8004eee:	6023      	str	r3, [r4, #0]
 8004ef0:	b016      	add	sp, #88	; 0x58
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}

08004ef4 <__smakebuf_r>:
 8004ef4:	898b      	ldrh	r3, [r1, #12]
 8004ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ef8:	079d      	lsls	r5, r3, #30
 8004efa:	4606      	mov	r6, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	d507      	bpl.n	8004f10 <__smakebuf_r+0x1c>
 8004f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	2301      	movs	r3, #1
 8004f0a:	6163      	str	r3, [r4, #20]
 8004f0c:	b002      	add	sp, #8
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	ab01      	add	r3, sp, #4
 8004f12:	466a      	mov	r2, sp
 8004f14:	f7ff ffca 	bl	8004eac <__swhatbuf_r>
 8004f18:	9900      	ldr	r1, [sp, #0]
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f7ff f88f 	bl	8004040 <_malloc_r>
 8004f22:	b948      	cbnz	r0, 8004f38 <__smakebuf_r+0x44>
 8004f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f28:	059a      	lsls	r2, r3, #22
 8004f2a:	d4ef      	bmi.n	8004f0c <__smakebuf_r+0x18>
 8004f2c:	f023 0303 	bic.w	r3, r3, #3
 8004f30:	f043 0302 	orr.w	r3, r3, #2
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	e7e3      	b.n	8004f00 <__smakebuf_r+0xc>
 8004f38:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <__smakebuf_r+0x7c>)
 8004f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	9b00      	ldr	r3, [sp, #0]
 8004f48:	6163      	str	r3, [r4, #20]
 8004f4a:	9b01      	ldr	r3, [sp, #4]
 8004f4c:	6120      	str	r0, [r4, #16]
 8004f4e:	b15b      	cbz	r3, 8004f68 <__smakebuf_r+0x74>
 8004f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f54:	4630      	mov	r0, r6
 8004f56:	f000 f923 	bl	80051a0 <_isatty_r>
 8004f5a:	b128      	cbz	r0, 8004f68 <__smakebuf_r+0x74>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	89a0      	ldrh	r0, [r4, #12]
 8004f6a:	4305      	orrs	r5, r0
 8004f6c:	81a5      	strh	r5, [r4, #12]
 8004f6e:	e7cd      	b.n	8004f0c <__smakebuf_r+0x18>
 8004f70:	08004d05 	.word	0x08004d05

08004f74 <memcpy>:
 8004f74:	440a      	add	r2, r1
 8004f76:	4291      	cmp	r1, r2
 8004f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f7c:	d100      	bne.n	8004f80 <memcpy+0xc>
 8004f7e:	4770      	bx	lr
 8004f80:	b510      	push	{r4, lr}
 8004f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f8a:	4291      	cmp	r1, r2
 8004f8c:	d1f9      	bne.n	8004f82 <memcpy+0xe>
 8004f8e:	bd10      	pop	{r4, pc}

08004f90 <memmove>:
 8004f90:	4288      	cmp	r0, r1
 8004f92:	b510      	push	{r4, lr}
 8004f94:	eb01 0402 	add.w	r4, r1, r2
 8004f98:	d902      	bls.n	8004fa0 <memmove+0x10>
 8004f9a:	4284      	cmp	r4, r0
 8004f9c:	4623      	mov	r3, r4
 8004f9e:	d807      	bhi.n	8004fb0 <memmove+0x20>
 8004fa0:	1e43      	subs	r3, r0, #1
 8004fa2:	42a1      	cmp	r1, r4
 8004fa4:	d008      	beq.n	8004fb8 <memmove+0x28>
 8004fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fae:	e7f8      	b.n	8004fa2 <memmove+0x12>
 8004fb0:	4402      	add	r2, r0
 8004fb2:	4601      	mov	r1, r0
 8004fb4:	428a      	cmp	r2, r1
 8004fb6:	d100      	bne.n	8004fba <memmove+0x2a>
 8004fb8:	bd10      	pop	{r4, pc}
 8004fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fc2:	e7f7      	b.n	8004fb4 <memmove+0x24>

08004fc4 <__malloc_lock>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__malloc_lock+0x8>)
 8004fc6:	f7ff bf6f 	b.w	8004ea8 <__retarget_lock_acquire_recursive>
 8004fca:	bf00      	nop
 8004fcc:	20000238 	.word	0x20000238

08004fd0 <__malloc_unlock>:
 8004fd0:	4801      	ldr	r0, [pc, #4]	; (8004fd8 <__malloc_unlock+0x8>)
 8004fd2:	f7ff bf6a 	b.w	8004eaa <__retarget_lock_release_recursive>
 8004fd6:	bf00      	nop
 8004fd8:	20000238 	.word	0x20000238

08004fdc <_realloc_r>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	4607      	mov	r7, r0
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	460e      	mov	r6, r1
 8004fe4:	b921      	cbnz	r1, 8004ff0 <_realloc_r+0x14>
 8004fe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fea:	4611      	mov	r1, r2
 8004fec:	f7ff b828 	b.w	8004040 <_malloc_r>
 8004ff0:	b922      	cbnz	r2, 8004ffc <_realloc_r+0x20>
 8004ff2:	f7fe ffd5 	bl	8003fa0 <_free_r>
 8004ff6:	4625      	mov	r5, r4
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ffc:	f000 f8f2 	bl	80051e4 <_malloc_usable_size_r>
 8005000:	42a0      	cmp	r0, r4
 8005002:	d20f      	bcs.n	8005024 <_realloc_r+0x48>
 8005004:	4621      	mov	r1, r4
 8005006:	4638      	mov	r0, r7
 8005008:	f7ff f81a 	bl	8004040 <_malloc_r>
 800500c:	4605      	mov	r5, r0
 800500e:	2800      	cmp	r0, #0
 8005010:	d0f2      	beq.n	8004ff8 <_realloc_r+0x1c>
 8005012:	4631      	mov	r1, r6
 8005014:	4622      	mov	r2, r4
 8005016:	f7ff ffad 	bl	8004f74 <memcpy>
 800501a:	4631      	mov	r1, r6
 800501c:	4638      	mov	r0, r7
 800501e:	f7fe ffbf 	bl	8003fa0 <_free_r>
 8005022:	e7e9      	b.n	8004ff8 <_realloc_r+0x1c>
 8005024:	4635      	mov	r5, r6
 8005026:	e7e7      	b.n	8004ff8 <_realloc_r+0x1c>

08005028 <_raise_r>:
 8005028:	291f      	cmp	r1, #31
 800502a:	b538      	push	{r3, r4, r5, lr}
 800502c:	4604      	mov	r4, r0
 800502e:	460d      	mov	r5, r1
 8005030:	d904      	bls.n	800503c <_raise_r+0x14>
 8005032:	2316      	movs	r3, #22
 8005034:	6003      	str	r3, [r0, #0]
 8005036:	f04f 30ff 	mov.w	r0, #4294967295
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800503e:	b112      	cbz	r2, 8005046 <_raise_r+0x1e>
 8005040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005044:	b94b      	cbnz	r3, 800505a <_raise_r+0x32>
 8005046:	4620      	mov	r0, r4
 8005048:	f000 f830 	bl	80050ac <_getpid_r>
 800504c:	462a      	mov	r2, r5
 800504e:	4601      	mov	r1, r0
 8005050:	4620      	mov	r0, r4
 8005052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005056:	f000 b817 	b.w	8005088 <_kill_r>
 800505a:	2b01      	cmp	r3, #1
 800505c:	d00a      	beq.n	8005074 <_raise_r+0x4c>
 800505e:	1c59      	adds	r1, r3, #1
 8005060:	d103      	bne.n	800506a <_raise_r+0x42>
 8005062:	2316      	movs	r3, #22
 8005064:	6003      	str	r3, [r0, #0]
 8005066:	2001      	movs	r0, #1
 8005068:	e7e7      	b.n	800503a <_raise_r+0x12>
 800506a:	2400      	movs	r4, #0
 800506c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005070:	4628      	mov	r0, r5
 8005072:	4798      	blx	r3
 8005074:	2000      	movs	r0, #0
 8005076:	e7e0      	b.n	800503a <_raise_r+0x12>

08005078 <raise>:
 8005078:	4b02      	ldr	r3, [pc, #8]	; (8005084 <raise+0xc>)
 800507a:	4601      	mov	r1, r0
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	f7ff bfd3 	b.w	8005028 <_raise_r>
 8005082:	bf00      	nop
 8005084:	20000010 	.word	0x20000010

08005088 <_kill_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d07      	ldr	r5, [pc, #28]	; (80050a8 <_kill_r+0x20>)
 800508c:	2300      	movs	r3, #0
 800508e:	4604      	mov	r4, r0
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	602b      	str	r3, [r5, #0]
 8005096:	f7fb ff85 	bl	8000fa4 <_kill>
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d102      	bne.n	80050a4 <_kill_r+0x1c>
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	b103      	cbz	r3, 80050a4 <_kill_r+0x1c>
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
 80050a6:	bf00      	nop
 80050a8:	20000240 	.word	0x20000240

080050ac <_getpid_r>:
 80050ac:	f7fb bf72 	b.w	8000f94 <_getpid>

080050b0 <__sread>:
 80050b0:	b510      	push	{r4, lr}
 80050b2:	460c      	mov	r4, r1
 80050b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b8:	f000 f89c 	bl	80051f4 <_read_r>
 80050bc:	2800      	cmp	r0, #0
 80050be:	bfab      	itete	ge
 80050c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050c2:	89a3      	ldrhlt	r3, [r4, #12]
 80050c4:	181b      	addge	r3, r3, r0
 80050c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050ca:	bfac      	ite	ge
 80050cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80050ce:	81a3      	strhlt	r3, [r4, #12]
 80050d0:	bd10      	pop	{r4, pc}

080050d2 <__swrite>:
 80050d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d6:	461f      	mov	r7, r3
 80050d8:	898b      	ldrh	r3, [r1, #12]
 80050da:	05db      	lsls	r3, r3, #23
 80050dc:	4605      	mov	r5, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	4616      	mov	r6, r2
 80050e2:	d505      	bpl.n	80050f0 <__swrite+0x1e>
 80050e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e8:	2302      	movs	r3, #2
 80050ea:	2200      	movs	r2, #0
 80050ec:	f000 f868 	bl	80051c0 <_lseek_r>
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fa:	81a3      	strh	r3, [r4, #12]
 80050fc:	4632      	mov	r2, r6
 80050fe:	463b      	mov	r3, r7
 8005100:	4628      	mov	r0, r5
 8005102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005106:	f000 b817 	b.w	8005138 <_write_r>

0800510a <__sseek>:
 800510a:	b510      	push	{r4, lr}
 800510c:	460c      	mov	r4, r1
 800510e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005112:	f000 f855 	bl	80051c0 <_lseek_r>
 8005116:	1c43      	adds	r3, r0, #1
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	bf15      	itete	ne
 800511c:	6560      	strne	r0, [r4, #84]	; 0x54
 800511e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005126:	81a3      	strheq	r3, [r4, #12]
 8005128:	bf18      	it	ne
 800512a:	81a3      	strhne	r3, [r4, #12]
 800512c:	bd10      	pop	{r4, pc}

0800512e <__sclose>:
 800512e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005132:	f000 b813 	b.w	800515c <_close_r>
	...

08005138 <_write_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	4d07      	ldr	r5, [pc, #28]	; (8005158 <_write_r+0x20>)
 800513c:	4604      	mov	r4, r0
 800513e:	4608      	mov	r0, r1
 8005140:	4611      	mov	r1, r2
 8005142:	2200      	movs	r2, #0
 8005144:	602a      	str	r2, [r5, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	f7fb ff63 	bl	8001012 <_write>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_write_r+0x1e>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_write_r+0x1e>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	20000240 	.word	0x20000240

0800515c <_close_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d06      	ldr	r5, [pc, #24]	; (8005178 <_close_r+0x1c>)
 8005160:	2300      	movs	r3, #0
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	602b      	str	r3, [r5, #0]
 8005168:	f7fb ff6f 	bl	800104a <_close>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_close_r+0x1a>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_close_r+0x1a>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	20000240 	.word	0x20000240

0800517c <_fstat_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4d07      	ldr	r5, [pc, #28]	; (800519c <_fstat_r+0x20>)
 8005180:	2300      	movs	r3, #0
 8005182:	4604      	mov	r4, r0
 8005184:	4608      	mov	r0, r1
 8005186:	4611      	mov	r1, r2
 8005188:	602b      	str	r3, [r5, #0]
 800518a:	f7fb ff6a 	bl	8001062 <_fstat>
 800518e:	1c43      	adds	r3, r0, #1
 8005190:	d102      	bne.n	8005198 <_fstat_r+0x1c>
 8005192:	682b      	ldr	r3, [r5, #0]
 8005194:	b103      	cbz	r3, 8005198 <_fstat_r+0x1c>
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	bd38      	pop	{r3, r4, r5, pc}
 800519a:	bf00      	nop
 800519c:	20000240 	.word	0x20000240

080051a0 <_isatty_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d06      	ldr	r5, [pc, #24]	; (80051bc <_isatty_r+0x1c>)
 80051a4:	2300      	movs	r3, #0
 80051a6:	4604      	mov	r4, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	602b      	str	r3, [r5, #0]
 80051ac:	f7fb ff69 	bl	8001082 <_isatty>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d102      	bne.n	80051ba <_isatty_r+0x1a>
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	b103      	cbz	r3, 80051ba <_isatty_r+0x1a>
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	20000240 	.word	0x20000240

080051c0 <_lseek_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4d07      	ldr	r5, [pc, #28]	; (80051e0 <_lseek_r+0x20>)
 80051c4:	4604      	mov	r4, r0
 80051c6:	4608      	mov	r0, r1
 80051c8:	4611      	mov	r1, r2
 80051ca:	2200      	movs	r2, #0
 80051cc:	602a      	str	r2, [r5, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f7fb ff62 	bl	8001098 <_lseek>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_lseek_r+0x1e>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	b103      	cbz	r3, 80051de <_lseek_r+0x1e>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	20000240 	.word	0x20000240

080051e4 <_malloc_usable_size_r>:
 80051e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e8:	1f18      	subs	r0, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bfbc      	itt	lt
 80051ee:	580b      	ldrlt	r3, [r1, r0]
 80051f0:	18c0      	addlt	r0, r0, r3
 80051f2:	4770      	bx	lr

080051f4 <_read_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d07      	ldr	r5, [pc, #28]	; (8005214 <_read_r+0x20>)
 80051f8:	4604      	mov	r4, r0
 80051fa:	4608      	mov	r0, r1
 80051fc:	4611      	mov	r1, r2
 80051fe:	2200      	movs	r2, #0
 8005200:	602a      	str	r2, [r5, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f7fb fee8 	bl	8000fd8 <_read>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_read_r+0x1e>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_read_r+0x1e>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	20000240 	.word	0x20000240

08005218 <_init>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr

08005224 <_fini>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	bf00      	nop
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr
