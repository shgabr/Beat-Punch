
nucleo-l432kc-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008250  08008250  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008258  08008258  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004750  2000008c  080082ec  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200047dc  080082ec  000247dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df2f  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003462  00000000  00000000  0003dfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00041450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  00042908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023801  00000000  00000000  00043c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7f1  00000000  00000000  00067479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d011a  00000000  00000000  00081c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151d84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa4  00000000  00000000  00151dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cac 	.word	0x08007cac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08007cac 	.word	0x08007cac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2108      	movs	r1, #8
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <SELECT+0x18>)
 8000582:	f001 fcdf 	bl	8001f44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f001 fa30 	bl	80019ec <HAL_Delay>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	48000400 	.word	0x48000400

08000594 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2108      	movs	r1, #8
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <DESELECT+0x18>)
 800059e:	f001 fcd1 	bl	8001f44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 fa22 	bl	80019ec <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	48000400 	.word	0x48000400

080005b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ba:	bf00      	nop
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SPI_TxByte+0x30>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d1f8      	bne.n	80005bc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2201      	movs	r2, #1
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <SPI_TxByte+0x30>)
 80005d2:	f002 ff12 	bl	80033fa <HAL_SPI_Transmit>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200015f0 	.word	0x200015f0

080005e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005f0:	bf00      	nop
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SPI_TxBuffer+0x30>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d1f8      	bne.n	80005f2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000600:	887a      	ldrh	r2, [r7, #2]
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <SPI_TxBuffer+0x30>)
 8000608:	f002 fef7 	bl	80033fa <HAL_SPI_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200015f0 	.word	0x200015f0

08000618 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800061e:	23ff      	movs	r3, #255	; 0xff
 8000620:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000622:	bf00      	nop
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <SPI_RxByte+0x34>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	2b02      	cmp	r3, #2
 8000630:	d1f8      	bne.n	8000624 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000632:	1dba      	adds	r2, r7, #6
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <SPI_RxByte+0x34>)
 800063e:	f003 f84a 	bl	80036d6 <HAL_SPI_TransmitReceive>

	return data;
 8000642:	79bb      	ldrb	r3, [r7, #6]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200015f0 	.word	0x200015f0

08000650 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000658:	f7ff ffde 	bl	8000618 <SPI_RxByte>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	701a      	strb	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <SD_ReadyWait+0x30>)
 8000674:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000678:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800067a:	f7ff ffcd 	bl	8000618 <SPI_RxByte>
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2bff      	cmp	r3, #255	; 0xff
 8000686:	d003      	beq.n	8000690 <SD_ReadyWait+0x24>
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <SD_ReadyWait+0x30>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f4      	bne.n	800067a <SD_ReadyWait+0xe>

	return res;
 8000690:	79fb      	ldrb	r3, [r7, #7]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000047c 	.word	0x2000047c

080006a0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006aa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006ac:	f7ff ff72 	bl	8000594 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	e005      	b.n	80006c2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006b6:	20ff      	movs	r0, #255	; 0xff
 80006b8:	f7ff ff7a 	bl	80005b0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	3301      	adds	r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	ddf6      	ble.n	80006b6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006c8:	f7ff ff56 	bl	8000578 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006e0:	2395      	movs	r3, #149	; 0x95
 80006e2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006e4:	463b      	mov	r3, r7
 80006e6:	2106      	movs	r1, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff7b 	bl	80005e4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006ee:	e002      	b.n	80006f6 <SD_PowerOn+0x56>
	{
		cnt--;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006f6:	f7ff ff8f 	bl	8000618 <SPI_RxByte>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d002      	beq.n	8000706 <SD_PowerOn+0x66>
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f4      	bne.n	80006f0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000706:	f7ff ff45 	bl	8000594 <DESELECT>
	SPI_TxByte(0XFF);
 800070a:	20ff      	movs	r0, #255	; 0xff
 800070c:	f7ff ff50 	bl	80005b0 <SPI_TxByte>

	PowerFlag = 1;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <SD_PowerOn+0x80>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000a9 	.word	0x200000a9

08000724 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <SD_PowerOff+0x14>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	200000a9 	.word	0x200000a9

0800073c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <SD_CheckPower+0x14>)
 8000742:	781b      	ldrb	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000a9 	.word	0x200000a9

08000754 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SD_RxDataBlock+0x58>)
 8000760:	22c8      	movs	r2, #200	; 0xc8
 8000762:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000764:	f7ff ff58 	bl	8000618 <SPI_RxByte>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2bff      	cmp	r3, #255	; 0xff
 8000770:	d103      	bne.n	800077a <SD_RxDataBlock+0x26>
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <SD_RxDataBlock+0x58>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	2bfe      	cmp	r3, #254	; 0xfe
 800077e:	d001      	beq.n	8000784 <SD_RxDataBlock+0x30>
 8000780:	2300      	movs	r3, #0
 8000782:	e00f      	b.n	80007a4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff60 	bl	8000650 <SPI_RxBytePtr>
	} while(len--);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	1e5a      	subs	r2, r3, #1
 8000794:	603a      	str	r2, [r7, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f4      	bne.n	8000784 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800079a:	f7ff ff3d 	bl	8000618 <SPI_RxByte>
	SPI_RxByte();
 800079e:	f7ff ff3b 	bl	8000618 <SPI_RxByte>

	return TRUE;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000047e 	.word	0x2000047e

080007b0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007c0:	f7ff ff54 	bl	800066c <SD_ReadyWait>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2bff      	cmp	r3, #255	; 0xff
 80007c8:	d001      	beq.n	80007ce <SD_TxDataBlock+0x1e>
 80007ca:	2300      	movs	r3, #0
 80007cc:	e02f      	b.n	800082e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff feed 	bl	80005b0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2bfd      	cmp	r3, #253	; 0xfd
 80007da:	d020      	beq.n	800081e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff feff 	bl	80005e4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007e6:	f7ff ff17 	bl	8000618 <SPI_RxByte>
		SPI_RxByte();
 80007ea:	f7ff ff15 	bl	8000618 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007ee:	e00b      	b.n	8000808 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007f0:	f7ff ff12 	bl	8000618 <SPI_RxByte>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f003 031f 	and.w	r3, r3, #31
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d006      	beq.n	8000810 <SD_TxDataBlock+0x60>
			i++;
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	2b40      	cmp	r3, #64	; 0x40
 800080c:	d9f0      	bls.n	80007f0 <SD_TxDataBlock+0x40>
 800080e:	e000      	b.n	8000812 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000810:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000812:	bf00      	nop
 8000814:	f7ff ff00 	bl	8000618 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0fa      	beq.n	8000814 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2b05      	cmp	r3, #5
 8000826:	d101      	bne.n	800082c <SD_TxDataBlock+0x7c>
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <SD_TxDataBlock+0x7e>

	return FALSE;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	6039      	str	r1, [r7, #0]
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000842:	f7ff ff13 	bl	800066c <SD_ReadyWait>
 8000846:	4603      	mov	r3, r0
 8000848:	2bff      	cmp	r3, #255	; 0xff
 800084a:	d001      	beq.n	8000850 <SD_SendCmd+0x1a>
 800084c:	23ff      	movs	r3, #255	; 0xff
 800084e:	e042      	b.n	80008d6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff feac 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	0e1b      	lsrs	r3, r3, #24
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fea6 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0c1b      	lsrs	r3, r3, #16
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fea0 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe9a 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe95 	bl	80005b0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b40      	cmp	r3, #64	; 0x40
 800088a:	d102      	bne.n	8000892 <SD_SendCmd+0x5c>
 800088c:	2395      	movs	r3, #149	; 0x95
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e007      	b.n	80008a2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b48      	cmp	r3, #72	; 0x48
 8000896:	d102      	bne.n	800089e <SD_SendCmd+0x68>
 8000898:	2387      	movs	r3, #135	; 0x87
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e001      	b.n	80008a2 <SD_SendCmd+0x6c>
	else crc = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe83 	bl	80005b0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b4c      	cmp	r3, #76	; 0x4c
 80008ae:	d101      	bne.n	80008b4 <SD_SendCmd+0x7e>
 80008b0:	f7ff feb2 	bl	8000618 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008b4:	230a      	movs	r3, #10
 80008b6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008b8:	f7ff feae 	bl	8000618 <SPI_RxByte>
 80008bc:	4603      	mov	r3, r0
 80008be:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	da05      	bge.n	80008d4 <SD_SendCmd+0x9e>
 80008c8:	7bbb      	ldrb	r3, [r7, #14]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	73bb      	strb	r3, [r7, #14]
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f1      	bne.n	80008b8 <SD_SendCmd+0x82>

	return res;
 80008d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SD_disk_initialize+0x14>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e0d1      	b.n	8000a98 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008f4:	4b6a      	ldr	r3, [pc, #424]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <SD_disk_initialize+0x2a>
 8000902:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	e0c6      	b.n	8000a98 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800090a:	f7ff fec9 	bl	80006a0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800090e:	f7ff fe33 	bl	8000578 <SELECT>

	/* check disk type */
	type = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000916:	2100      	movs	r1, #0
 8000918:	2040      	movs	r0, #64	; 0x40
 800091a:	f7ff ff8c 	bl	8000836 <SD_SendCmd>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	f040 80a1 	bne.w	8000a68 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000926:	4b5f      	ldr	r3, [pc, #380]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800092e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000932:	2048      	movs	r0, #72	; 0x48
 8000934:	f7ff ff7f 	bl	8000836 <SD_SendCmd>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d155      	bne.n	80009ea <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e00c      	b.n	800095e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000944:	7bfc      	ldrb	r4, [r7, #15]
 8000946:	f7ff fe67 	bl	8000618 <SPI_RxByte>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4423      	add	r3, r4
 8000954:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	3301      	adds	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d9ef      	bls.n	8000944 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000964:	7abb      	ldrb	r3, [r7, #10]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d17e      	bne.n	8000a68 <SD_disk_initialize+0x188>
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	2baa      	cmp	r3, #170	; 0xaa
 800096e:	d17b      	bne.n	8000a68 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000970:	2100      	movs	r1, #0
 8000972:	2077      	movs	r0, #119	; 0x77
 8000974:	f7ff ff5f 	bl	8000836 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d807      	bhi.n	800098e <SD_disk_initialize+0xae>
 800097e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000982:	2069      	movs	r0, #105	; 0x69
 8000984:	f7ff ff57 	bl	8000836 <SD_SendCmd>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800098e:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1ec      	bne.n	8000970 <SD_disk_initialize+0x90>
 8000996:	e000      	b.n	800099a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000998:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800099a:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d062      	beq.n	8000a68 <SD_disk_initialize+0x188>
 80009a2:	2100      	movs	r1, #0
 80009a4:	207a      	movs	r0, #122	; 0x7a
 80009a6:	f7ff ff46 	bl	8000836 <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d15b      	bne.n	8000a68 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e00c      	b.n	80009d0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009b6:	7bfc      	ldrb	r4, [r7, #15]
 80009b8:	f7ff fe2e 	bl	8000618 <SPI_RxByte>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4423      	add	r3, r4
 80009c6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	3301      	adds	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d9ef      	bls.n	80009b6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009d6:	7a3b      	ldrb	r3, [r7, #8]
 80009d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SD_disk_initialize+0x104>
 80009e0:	230c      	movs	r3, #12
 80009e2:	e000      	b.n	80009e6 <SD_disk_initialize+0x106>
 80009e4:	2304      	movs	r3, #4
 80009e6:	73bb      	strb	r3, [r7, #14]
 80009e8:	e03e      	b.n	8000a68 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009ea:	2100      	movs	r1, #0
 80009ec:	2077      	movs	r0, #119	; 0x77
 80009ee:	f7ff ff22 	bl	8000836 <SD_SendCmd>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d808      	bhi.n	8000a0a <SD_disk_initialize+0x12a>
 80009f8:	2100      	movs	r1, #0
 80009fa:	2069      	movs	r0, #105	; 0x69
 80009fc:	f7ff ff1b 	bl	8000836 <SD_SendCmd>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d801      	bhi.n	8000a0a <SD_disk_initialize+0x12a>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e000      	b.n	8000a0c <SD_disk_initialize+0x12c>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d10e      	bne.n	8000a32 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a14:	2100      	movs	r1, #0
 8000a16:	2077      	movs	r0, #119	; 0x77
 8000a18:	f7ff ff0d 	bl	8000836 <SD_SendCmd>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d80e      	bhi.n	8000a40 <SD_disk_initialize+0x160>
 8000a22:	2100      	movs	r1, #0
 8000a24:	2069      	movs	r0, #105	; 0x69
 8000a26:	f7ff ff06 	bl	8000836 <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d107      	bne.n	8000a40 <SD_disk_initialize+0x160>
 8000a30:	e00c      	b.n	8000a4c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a32:	2100      	movs	r1, #0
 8000a34:	2041      	movs	r0, #65	; 0x41
 8000a36:	f7ff fefe 	bl	8000836 <SD_SendCmd>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d004      	beq.n	8000a4a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1e2      	bne.n	8000a0e <SD_disk_initialize+0x12e>
 8000a48:	e000      	b.n	8000a4c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a4a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d007      	beq.n	8000a64 <SD_disk_initialize+0x184>
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	2050      	movs	r0, #80	; 0x50
 8000a5a:	f7ff feec 	bl	8000836 <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SD_disk_initialize+0x188>
 8000a64:	2300      	movs	r3, #0
 8000a66:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <SD_disk_initialize+0x1c8>)
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a6e:	f7ff fd91 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000a72:	f7ff fdd1 	bl	8000618 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d008      	beq.n	8000a8e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f023 0301 	bic.w	r3, r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e001      	b.n	8000a92 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a8e:	f7ff fe49 	bl	8000724 <SD_PowerOff>
	}

	return Stat;
 8000a92:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	2000047e 	.word	0x2000047e
 8000aa8:	200000a8 	.word	0x200000a8

08000aac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SD_disk_status+0x14>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e002      	b.n	8000ac6 <SD_disk_status+0x1a>
	return Stat;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SD_disk_status+0x28>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <SD_disk_read+0x1c>
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <SD_disk_read+0x20>
 8000af4:	2304      	movs	r3, #4
 8000af6:	e051      	b.n	8000b9c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <SD_disk_read+0xcc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SD_disk_read+0x32>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e048      	b.n	8000b9c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <SD_disk_read+0xd0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <SD_disk_read+0x44>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b1c:	f7ff fd2c 	bl	8000578 <SELECT>

	if (count == 1)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d111      	bne.n	8000b4a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2051      	movs	r0, #81	; 0x51
 8000b2a:	f7ff fe84 	bl	8000836 <SD_SendCmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d129      	bne.n	8000b88 <SD_disk_read+0xb0>
 8000b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b38:	68b8      	ldr	r0, [r7, #8]
 8000b3a:	f7ff fe0b 	bl	8000754 <SD_RxDataBlock>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d021      	beq.n	8000b88 <SD_disk_read+0xb0>
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	e01e      	b.n	8000b88 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2052      	movs	r0, #82	; 0x52
 8000b4e:	f7ff fe72 	bl	8000836 <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d117      	bne.n	8000b88 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fdf9 	bl	8000754 <SD_RxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00a      	beq.n	8000b7e <SD_disk_read+0xa6>
				buff += 512;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1ed      	bne.n	8000b58 <SD_disk_read+0x80>
 8000b7c:	e000      	b.n	8000b80 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b7e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	204c      	movs	r0, #76	; 0x4c
 8000b84:	f7ff fe57 	bl	8000836 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b88:	f7ff fd04 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000b8c:	f7ff fd44 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	200000a8 	.word	0x200000a8

08000bac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <SD_disk_write+0x1c>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <SD_disk_write+0x20>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e06b      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <SD_disk_write+0x100>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SD_disk_write+0x32>
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e062      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <SD_disk_write+0x100>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SD_disk_write+0x44>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e059      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <SD_disk_write+0x104>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <SD_disk_write+0x56>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	025b      	lsls	r3, r3, #9
 8000c00:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c02:	f7ff fcb9 	bl	8000578 <SELECT>

	if (count == 1)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d110      	bne.n	8000c2e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	2058      	movs	r0, #88	; 0x58
 8000c10:	f7ff fe11 	bl	8000836 <SD_SendCmd>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d13a      	bne.n	8000c90 <SD_disk_write+0xe4>
 8000c1a:	21fe      	movs	r1, #254	; 0xfe
 8000c1c:	68b8      	ldr	r0, [r7, #8]
 8000c1e:	f7ff fdc7 	bl	80007b0 <SD_TxDataBlock>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d033      	beq.n	8000c90 <SD_disk_write+0xe4>
			count = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	e030      	b.n	8000c90 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <SD_disk_write+0x104>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d007      	beq.n	8000c4a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2077      	movs	r0, #119	; 0x77
 8000c3e:	f7ff fdfa 	bl	8000836 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	2057      	movs	r0, #87	; 0x57
 8000c46:	f7ff fdf6 	bl	8000836 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2059      	movs	r0, #89	; 0x59
 8000c4e:	f7ff fdf2 	bl	8000836 <SD_SendCmd>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11b      	bne.n	8000c90 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c58:	21fc      	movs	r1, #252	; 0xfc
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	f7ff fda8 	bl	80007b0 <SD_TxDataBlock>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00a      	beq.n	8000c7c <SD_disk_write+0xd0>
				buff += 512;
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1ee      	bne.n	8000c58 <SD_disk_write+0xac>
 8000c7a:	e000      	b.n	8000c7e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c7c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c7e:	21fd      	movs	r1, #253	; 0xfd
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fd95 	bl	80007b0 <SD_TxDataBlock>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c90:	f7ff fc80 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000c94:	f7ff fcc0 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	200000a8 	.word	0x200000a8

08000cb4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b08b      	sub	sp, #44	; 0x2c
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	603a      	str	r2, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SD_disk_ioctl+0x1e>
 8000cce:	2304      	movs	r3, #4
 8000cd0:	e115      	b.n	8000efe <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b05      	cmp	r3, #5
 8000cdc:	d124      	bne.n	8000d28 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d012      	beq.n	8000d0c <SD_disk_ioctl+0x58>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	dc1a      	bgt.n	8000d20 <SD_disk_ioctl+0x6c>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <SD_disk_ioctl+0x40>
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d006      	beq.n	8000d00 <SD_disk_ioctl+0x4c>
 8000cf2:	e015      	b.n	8000d20 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000cf4:	f7ff fd16 	bl	8000724 <SD_PowerOff>
			res = RES_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cfe:	e0fc      	b.n	8000efa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d00:	f7ff fcce 	bl	80006a0 <SD_PowerOn>
			res = RES_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0a:	e0f6      	b.n	8000efa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	1c5c      	adds	r4, r3, #1
 8000d10:	f7ff fd14 	bl	800073c <SD_CheckPower>
 8000d14:	4603      	mov	r3, r0
 8000d16:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d1e:	e0ec      	b.n	8000efa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d20:	2304      	movs	r3, #4
 8000d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d26:	e0e8      	b.n	8000efa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d28:	4b77      	ldr	r3, [pc, #476]	; (8000f08 <SD_disk_ioctl+0x254>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SD_disk_ioctl+0x86>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e0e1      	b.n	8000efe <SD_disk_ioctl+0x24a>

		SELECT();
 8000d3a:	f7ff fc1d 	bl	8000578 <SELECT>

		switch (ctrl)
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	2b0d      	cmp	r3, #13
 8000d42:	f200 80cb 	bhi.w	8000edc <SD_disk_ioctl+0x228>
 8000d46:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <SD_disk_ioctl+0x98>)
 8000d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4c:	08000e47 	.word	0x08000e47
 8000d50:	08000d85 	.word	0x08000d85
 8000d54:	08000e37 	.word	0x08000e37
 8000d58:	08000edd 	.word	0x08000edd
 8000d5c:	08000edd 	.word	0x08000edd
 8000d60:	08000edd 	.word	0x08000edd
 8000d64:	08000edd 	.word	0x08000edd
 8000d68:	08000edd 	.word	0x08000edd
 8000d6c:	08000edd 	.word	0x08000edd
 8000d70:	08000edd 	.word	0x08000edd
 8000d74:	08000edd 	.word	0x08000edd
 8000d78:	08000e59 	.word	0x08000e59
 8000d7c:	08000e7d 	.word	0x08000e7d
 8000d80:	08000ea1 	.word	0x08000ea1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d84:	2100      	movs	r1, #0
 8000d86:	2049      	movs	r0, #73	; 0x49
 8000d88:	f7ff fd55 	bl	8000836 <SD_SendCmd>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 80a8 	bne.w	8000ee4 <SD_disk_ioctl+0x230>
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fcda 	bl	8000754 <SD_RxDataBlock>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 809e 	beq.w	8000ee4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	099b      	lsrs	r3, r3, #6
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d10e      	bne.n	8000dd0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000db2:	7d7b      	ldrb	r3, [r7, #21]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	7d3b      	ldrb	r3, [r7, #20]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dc6:	8bfb      	ldrh	r3, [r7, #30]
 8000dc8:	029a      	lsls	r2, r3, #10
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e02e      	b.n	8000e2e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dd0:	7c7b      	ldrb	r3, [r7, #17]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	7dbb      	ldrb	r3, [r7, #22]
 8000dda:	09db      	lsrs	r3, r3, #7
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	7d7b      	ldrb	r3, [r7, #21]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f003 0306 	and.w	r3, r3, #6
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	3302      	adds	r3, #2
 8000df4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000df8:	7d3b      	ldrb	r3, [r7, #20]
 8000dfa:	099b      	lsrs	r3, r3, #6
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	7cfb      	ldrb	r3, [r7, #19]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cbb      	ldrb	r3, [r7, #18]
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e20:	8bfa      	ldrh	r2, [r7, #30]
 8000e22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e26:	3b09      	subs	r3, #9
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e34:	e056      	b.n	8000ee4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e44:	e055      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e46:	f7ff fc11 	bl	800066c <SD_ReadyWait>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d14b      	bne.n	8000ee8 <SD_disk_ioctl+0x234>
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e56:	e047      	b.n	8000ee8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2049      	movs	r0, #73	; 0x49
 8000e5c:	f7ff fceb 	bl	8000836 <SD_SendCmd>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d142      	bne.n	8000eec <SD_disk_ioctl+0x238>
 8000e66:	2110      	movs	r1, #16
 8000e68:	6a38      	ldr	r0, [r7, #32]
 8000e6a:	f7ff fc73 	bl	8000754 <SD_RxDataBlock>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d03b      	beq.n	8000eec <SD_disk_ioctl+0x238>
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e7a:	e037      	b.n	8000eec <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	204a      	movs	r0, #74	; 0x4a
 8000e80:	f7ff fcd9 	bl	8000836 <SD_SendCmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d132      	bne.n	8000ef0 <SD_disk_ioctl+0x23c>
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f7ff fc61 	bl	8000754 <SD_RxDataBlock>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d02b      	beq.n	8000ef0 <SD_disk_ioctl+0x23c>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9e:	e027      	b.n	8000ef0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	207a      	movs	r0, #122	; 0x7a
 8000ea4:	f7ff fcc7 	bl	8000836 <SD_SendCmd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb4:	e00b      	b.n	8000ece <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000eb6:	6a3c      	ldr	r4, [r7, #32]
 8000eb8:	1c63      	adds	r3, r4, #1
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	f7ff fbac 	bl	8000618 <SPI_RxByte>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d9ef      	bls.n	8000eb6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000edc:	2304      	movs	r3, #4
 8000ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ee2:	e006      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ee4:	bf00      	nop
 8000ee6:	e004      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ee8:	bf00      	nop
 8000eea:	e002      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000eec:	bf00      	nop
 8000eee:	e000      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ef0:	bf00      	nop
		}

		DESELECT();
 8000ef2:	f7ff fb4f 	bl	8000594 <DESELECT>
		SPI_RxByte();
 8000ef6:	f7ff fb8f 	bl	8000618 <SPI_RxByte>
	}

	return res;
 8000efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	372c      	adds	r7, #44	; 0x2c
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000

08000f0c <transmit_uart>:
static void MX_USART2_UART_Init(void);
static void MX_TIM16_Init(void);
static void MX_TIM1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void transmit_uart (char * msg){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(msg);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff f95b 	bl	80001d0 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit (&huart2, (uint8_t*) msg, len, 200);
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	23c8      	movs	r3, #200	; 0xc8
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <transmit_uart+0x28>)
 8000f28:	f003 fc00 	bl	800472c <HAL_UART_Transmit>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20001654 	.word	0x20001654

08000f38 <listDirectory>:
void listDirectory (){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0dc      	sub	sp, #368	; 0x170
 8000f3c:	af00      	add	r7, sp, #0
	DIR dir;
    char *path;
    UINT BytesWritten;
    char string[20];
    FRESULT res;
    int c = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    path = ""; // where you want to list
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <listDirectory+0xf0>)
 8000f46:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    res = f_opendir(&dir, path);
 8000f4a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000f4e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8000f52:	4618      	mov	r0, r3
 8000f54:	f006 f870 	bl	8007038 <f_opendir>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
#ifdef DBG
    if (res != FR_OK)
      printf("res = %d f_opendir\n", res);
#endif

    if (res == FR_OK)
 8000f5e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d15b      	bne.n	800101e <listDirectory+0xe6>
    {
      while(1)
      {
        FILINFO fno;

        res = f_readdir(&dir, &fno);
 8000f66:	463a      	mov	r2, r7
 8000f68:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f006 f8d5 	bl	800711e <f_readdir>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
#ifdef DBG
        if (res != FR_OK)
          printf("res = %d f_readdir\n", res);
#endif

        if ((res != FR_OK) || (fno.fname[0] == 0))
 8000f7a:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d14d      	bne.n	800101e <listDirectory+0xe6>
 8000f82:	463b      	mov	r3, r7
 8000f84:	7d9b      	ldrb	r3, [r3, #22]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d049      	beq.n	800101e <listDirectory+0xe6>
          break;

        int size = strlen(fno.fname);
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	3316      	adds	r3, #22
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff f91e 	bl	80001d0 <strlen>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        if (fno.fname[size-3] == 't' && fno.fname[size-2] == 'x' && fno.fname[size-1] == 't' && fno.fname[0] != '.'){
 8000f9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f9e:	3b03      	subs	r3, #3
 8000fa0:	463a      	mov	r2, r7
 8000fa2:	4413      	add	r3, r2
 8000fa4:	7d9b      	ldrb	r3, [r3, #22]
 8000fa6:	2b74      	cmp	r3, #116	; 0x74
 8000fa8:	d1dd      	bne.n	8000f66 <listDirectory+0x2e>
 8000faa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fae:	3b02      	subs	r3, #2
 8000fb0:	463a      	mov	r2, r7
 8000fb2:	4413      	add	r3, r2
 8000fb4:	7d9b      	ldrb	r3, [r3, #22]
 8000fb6:	2b78      	cmp	r3, #120	; 0x78
 8000fb8:	d1d5      	bne.n	8000f66 <listDirectory+0x2e>
 8000fba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	463a      	mov	r2, r7
 8000fc2:	4413      	add	r3, r2
 8000fc4:	7d9b      	ldrb	r3, [r3, #22]
 8000fc6:	2b74      	cmp	r3, #116	; 0x74
 8000fc8:	d1cd      	bne.n	8000f66 <listDirectory+0x2e>
 8000fca:	463b      	mov	r3, r7
 8000fcc:	7d9b      	ldrb	r3, [r3, #22]
 8000fce:	2b2e      	cmp	r3, #46	; 0x2e
 8000fd0:	d0c9      	beq.n	8000f66 <listDirectory+0x2e>
        	sprintf(string, "%s\r\n", fno.fname);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	f103 0216 	add.w	r2, r3, #22
 8000fd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fdc:	4913      	ldr	r1, [pc, #76]	; (800102c <listDirectory+0xf4>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f006 fa2e 	bl	8007440 <siprintf>
        	transmit_uart(string);
 8000fe4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff8f 	bl	8000f0c <transmit_uart>
        	if (c<20){
 8000fee:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000ff2:	2b13      	cmp	r3, #19
 8000ff4:	dcb7      	bgt.n	8000f66 <listDirectory+0x2e>
				strcpy(fileNames[c],string);
 8000ff6:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <listDirectory+0xf8>)
 8001004:	4413      	add	r3, r2
 8001006:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fa37 	bl	8007480 <strcpy>
				c++;
 8001012:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001016:	3301      	adds	r3, #1
 8001018:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
      {
 800101c:	e7a3      	b.n	8000f66 <listDirectory+0x2e>
        	}
        }
      }
    }
}
 800101e:	bf00      	nop
 8001020:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08007cc4 	.word	0x08007cc4
 800102c:	08007cc8 	.word	0x08007cc8
 8001030:	200000ac 	.word	0x200000ac

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09e      	sub	sp, #120	; 0x78
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f000 fc62 	bl	8001902 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f87f 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 f9c7 	bl	80013d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001046:	f000 f995 	bl	8001374 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800104a:	f000 f96d 	bl	8001328 <MX_TIM16_Init>
  MX_TIM1_Init();
 800104e:	f000 f917 	bl	8001280 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001052:	f000 f8d7 	bl	8001204 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001056:	f003 ffb7 	bl	8004fc8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 800105a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105e:	f000 fcc5 	bl	80019ec <HAL_Delay>

  fres = f_mount(&fs, "", 1);
 8001062:	2201      	movs	r2, #1
 8001064:	492b      	ldr	r1, [pc, #172]	; (8001114 <main+0xe0>)
 8001066:	482c      	ldr	r0, [pc, #176]	; (8001118 <main+0xe4>)
 8001068:	f005 ffa0 	bl	8006fac <f_mount>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <main+0xe8>)
 8001072:	701a      	strb	r2, [r3, #0]
   if (fres == FR_OK){
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <main+0xe8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d103      	bne.n	8001084 <main+0x50>
	   transmit_uart("Micro SD card is mounted successfully!\r\n");
 800107c:	4828      	ldr	r0, [pc, #160]	; (8001120 <main+0xec>)
 800107e:	f7ff ff45 	bl	8000f0c <transmit_uart>
 8001082:	e006      	b.n	8001092 <main+0x5e>
   } else if (fres != FR_OK){
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <main+0xe8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <main+0x5e>
	   transmit_uart("Error Micro SD card mount\r\n");
 800108c:	4825      	ldr	r0, [pc, #148]	; (8001124 <main+0xf0>)
 800108e:	f7ff ff3d 	bl	8000f0c <transmit_uart>
//      	   transmit_uart("File closed\r\n");
//         } else if (fres != FR_OK){
//         	   transmit_uart("Error closing file\r\n");
//         }

   listDirectory();
 8001092:	f7ff ff51 	bl	8000f38 <listDirectory>


   fres = f_mount(NULL, "", 1);
 8001096:	2201      	movs	r2, #1
 8001098:	491e      	ldr	r1, [pc, #120]	; (8001114 <main+0xe0>)
 800109a:	2000      	movs	r0, #0
 800109c:	f005 ff86 	bl	8006fac <f_mount>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <main+0xe8>)
 80010a6:	701a      	strb	r2, [r3, #0]
   if (fres == FR_OK){
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <main+0xe8>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d103      	bne.n	80010b8 <main+0x84>
      	   transmit_uart("Micro SD unmounted\r\n");
 80010b0:	481d      	ldr	r0, [pc, #116]	; (8001128 <main+0xf4>)
 80010b2:	f7ff ff2b 	bl	8000f0c <transmit_uart>
 80010b6:	e006      	b.n	80010c6 <main+0x92>
         } else if (fres != FR_OK){
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <main+0xe8>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <main+0x92>
         	   transmit_uart("Error unmounting SD card\r\n");
 80010c0:	481a      	ldr	r0, [pc, #104]	; (800112c <main+0xf8>)
 80010c2:	f7ff ff23 	bl	8000f0c <transmit_uart>
         }

   transmit_uart(fileNames[0]);
 80010c6:	481a      	ldr	r0, [pc, #104]	; (8001130 <main+0xfc>)
 80010c8:	f7ff ff20 	bl	8000f0c <transmit_uart>
   transmit_uart(fileNames[1]);
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <main+0x100>)
 80010ce:	f7ff ff1d 	bl	8000f0c <transmit_uart>
   transmit_uart(fileNames[2]);
 80010d2:	4819      	ldr	r0, [pc, #100]	; (8001138 <main+0x104>)
 80010d4:	f7ff ff1a 	bl	8000f0c <transmit_uart>





  HAL_TIM_Base_Start(&htim16);
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <main+0x108>)
 80010da:	f002 fecb 	bl	8003e74 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	677b      	str	r3, [r7, #116]	; 0x74
  int sum = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	673b      	str	r3, [r7, #112]	; 0x70
  int average = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  char buff [100] = {0};
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2260      	movs	r2, #96	; 0x60
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f006 f99b 	bl	8007430 <memset>
  int once = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	66bb      	str	r3, [r7, #104]	; 0x68

  HAL_Delay(5000);
 80010fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8001102:	f000 fc73 	bl	80019ec <HAL_Delay>
  uint16_t end_time, start_time = __HAL_TIM_GET_COUNTER(&htim16);
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <main+0x108>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  while (1)
 8001110:	e7fe      	b.n	8001110 <main+0xdc>
 8001112:	bf00      	nop
 8001114:	08007cc4 	.word	0x08007cc4
 8001118:	2000048c 	.word	0x2000048c
 800111c:	200016d8 	.word	0x200016d8
 8001120:	08007cd0 	.word	0x08007cd0
 8001124:	08007cfc 	.word	0x08007cfc
 8001128:	08007d18 	.word	0x08007d18
 800112c:	08007d30 	.word	0x08007d30
 8001130:	200000ac 	.word	0x200000ac
 8001134:	200000c0 	.word	0x200000c0
 8001138:	200000d4 	.word	0x200000d4
 800113c:	2000270c 	.word	0x2000270c

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b096      	sub	sp, #88	; 0x58
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2244      	movs	r2, #68	; 0x44
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f006 f96e 	bl	8007430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001162:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001166:	f000 ff23 	bl	8001fb0 <HAL_PWREx_ControlVoltageScaling>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001170:	f000 f9b4 	bl	80014dc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001174:	f000 fefe 	bl	8001f74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <SystemClock_Config+0xc0>)
 800117a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <SystemClock_Config+0xc0>)
 8001180:	f023 0318 	bic.w	r3, r3, #24
 8001184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001188:	2314      	movs	r3, #20
 800118a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011a0:	2301      	movs	r3, #1
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011a8:	2310      	movs	r3, #16
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011ac:	2307      	movs	r3, #7
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 ff4d 	bl	800205c <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011c8:	f000 f988 	bl	80014dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2303      	movs	r3, #3
 80011d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	2101      	movs	r1, #1
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fb4b 	bl	8002880 <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011f0:	f000 f974 	bl	80014dc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011f4:	f001 ff5c 	bl	80030b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011f8:	bf00      	nop
 80011fa:	3758      	adds	r7, #88	; 0x58
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_SPI1_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <MX_SPI1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_SPI1_Init+0x74>)
 8001210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_SPI1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_SPI1_Init+0x74>)
 800121e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001222:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_SPI1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_SPI1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_SPI1_Init+0x74>)
 8001232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001236:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_SPI1_Init+0x74>)
 800123a:	2208      	movs	r2, #8
 800123c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_SPI1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_SPI1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_SPI1_Init+0x74>)
 8001252:	2207      	movs	r2, #7
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_SPI1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_SPI1_Init+0x74>)
 800125e:	2208      	movs	r2, #8
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_SPI1_Init+0x74>)
 8001264:	f002 f826 	bl	80032b4 <HAL_SPI_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f000 f935 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200015f0 	.word	0x200015f0
 800127c:	40013000 	.word	0x40013000

08001280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <MX_TIM1_Init+0xa0>)
 80012a0:	4a20      	ldr	r2, [pc, #128]	; (8001324 <MX_TIM1_Init+0xa4>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31999;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_TIM1_Init+0xa0>)
 80012a6:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80012aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <MX_TIM1_Init+0xa0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_TIM1_Init+0xa0>)
 80012b4:	f241 3287 	movw	r2, #4999	; 0x1387
 80012b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <MX_TIM1_Init+0xa0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_TIM1_Init+0xa0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <MX_TIM1_Init+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <MX_TIM1_Init+0xa0>)
 80012ce:	f002 fd79 	bl	8003dc4 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80012d8:	f000 f900 	bl	80014dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	4619      	mov	r1, r3
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_TIM1_Init+0xa0>)
 80012ea:	f002 ff5d 	bl	80041a8 <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80012f4:	f000 f8f2 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_TIM1_Init+0xa0>)
 800130a:	f003 f93d 	bl	8004588 <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001314:	f000 f8e2 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20001598 	.word	0x20001598
 8001324:	40012c00 	.word	0x40012c00

08001328 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_TIM16_Init+0x44>)
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <MX_TIM16_Init+0x48>)
 8001330:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_TIM16_Init+0x44>)
 8001334:	221f      	movs	r2, #31
 8001336:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_TIM16_Init+0x44>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_TIM16_Init+0x44>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_TIM16_Init+0x44>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_TIM16_Init+0x44>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_TIM16_Init+0x44>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_TIM16_Init+0x44>)
 800135a:	f002 fd33 	bl	8003dc4 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001364:	f000 f8ba 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000270c 	.word	0x2000270c
 8001370:	40014400 	.word	0x40014400

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USART2_UART_Init+0x58>)
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_USART2_UART_Init+0x58>)
 8001380:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART2_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_USART2_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART2_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART2_UART_Init+0x58>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013b8:	f003 f96a 	bl	8004690 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013c2:	f000 f88b 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20001654 	.word	0x20001654
 80013d0:	40004400 	.word	0x40004400

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_GPIO_Init+0xd4>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a2e      	ldr	r2, [pc, #184]	; (80014a8 <MX_GPIO_Init+0xd4>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MX_GPIO_Init+0xd4>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_GPIO_Init+0xd4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <MX_GPIO_Init+0xd4>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_GPIO_Init+0xd4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_GPIO_Init+0xd4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <MX_GPIO_Init+0xd4>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <MX_GPIO_Init+0xd4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin|LED2_Pin|LED5_Pin
 8001432:	2200      	movs	r2, #0
 8001434:	f240 619a 	movw	r1, #1690	; 0x69a
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f000 fd82 	bl	8001f44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2108      	movs	r1, #8
 8001444:	4819      	ldr	r0, [pc, #100]	; (80014ac <MX_GPIO_Init+0xd8>)
 8001446:	f000 fd7d 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED5_Pin
                           PA9 PA10 */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED5_Pin
 800144a:	f240 639a 	movw	r3, #1690	; 0x69a
 800144e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f000 fc03 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800146a:	23f3      	movs	r3, #243	; 0xf3
 800146c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	480b      	ldr	r0, [pc, #44]	; (80014ac <MX_GPIO_Init+0xd8>)
 800147e:	f000 fbf7 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001482:	2308      	movs	r3, #8
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4619      	mov	r1, r3
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_GPIO_Init+0xd8>)
 800149a:	f000 fbe9 	bl	8001c70 <HAL_GPIO_Init>

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400

080014b0 <HAL_TIM_PeriodElapsedCallback>:
//		HAL_TIM_Base_Start_IT(&htim1);
//		state = 0;
//	}
//
//}
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
//	}
//	else {
//		timer_end = __HAL_TIM_GET_COUNTER(&htim16) + 5000;
//		state = 1;
//	}
	if (htim == &htim1){
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d105      	bne.n	80014cc <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_TIM_Base_Stop_IT(&htim1);
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014c2:	f002 fd23 	bl	8003f0c <HAL_TIM_Base_Stop_IT>
		state = 0;
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
	}
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20001598 	.word	0x20001598
 80014d8:	20000004 	.word	0x20000004

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <Error_Handler+0x8>
	...

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_MspInit+0x44>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_MspInit+0x44>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6613      	str	r3, [r2, #96]	; 0x60
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_MspInit+0x44>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_MspInit+0x44>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6593      	str	r3, [r2, #88]	; 0x58
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <HAL_SPI_MspInit+0x80>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d129      	bne.n	80015a6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800155c:	6613      	str	r3, [r2, #96]	; 0x60
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8001582:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001594:	2305      	movs	r3, #5
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f000 fb65 	bl	8001c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40013000 	.word	0x40013000
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_TIM_Base_MspInit+0xa8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12c      	bne.n	8001624 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_TIM_Base_MspInit+0xac>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	4a25      	ldr	r2, [pc, #148]	; (8001664 <HAL_TIM_Base_MspInit+0xac>)
 80015d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d4:	6613      	str	r3, [r2, #96]	; 0x60
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_TIM_Base_MspInit+0xac>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2018      	movs	r0, #24
 80015e8:	f000 faff 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80015ec:	2018      	movs	r0, #24
 80015ee:	f000 fb18 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2019      	movs	r0, #25
 80015f8:	f000 faf7 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015fc:	2019      	movs	r0, #25
 80015fe:	f000 fb10 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201a      	movs	r0, #26
 8001608:	f000 faef 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800160c:	201a      	movs	r0, #26
 800160e:	f000 fb08 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	201b      	movs	r0, #27
 8001618:	f000 fae7 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800161c:	201b      	movs	r0, #27
 800161e:	f000 fb00 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001622:	e018      	b.n	8001656 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_TIM_Base_MspInit+0xb0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d113      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_TIM_Base_MspInit+0xac>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <HAL_TIM_Base_MspInit+0xac>)
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	6613      	str	r3, [r2, #96]	; 0x60
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_TIM_Base_MspInit+0xac>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2019      	movs	r0, #25
 800164c:	f000 facd 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001650:	2019      	movs	r0, #25
 8001652:	f000 fae6 	bl	8001c22 <HAL_NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40014400 	.word	0x40014400

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b09e      	sub	sp, #120	; 0x78
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	2254      	movs	r2, #84	; 0x54
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f005 fecf 	bl	8007430 <memset>
  if(huart->Instance==USART2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a28      	ldr	r2, [pc, #160]	; (8001738 <HAL_UART_MspInit+0xcc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d148      	bne.n	800172e <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800169c:	2302      	movs	r3, #2
 800169e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fb0d 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b4:	f7ff ff12 	bl	80014dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_UART_MspInit+0xd0>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_UART_MspInit+0xd0>)
 80016be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c2:	6593      	str	r3, [r2, #88]	; 0x58
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_UART_MspInit+0xd0>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_UART_MspInit+0xd0>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_UART_MspInit+0xd0>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_UART_MspInit+0xd0>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80016e8:	2304      	movs	r3, #4
 80016ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f8:	2307      	movs	r3, #7
 80016fa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f000 fab3 	bl	8001c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800170a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800170e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800171c:	2303      	movs	r3, #3
 800171e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f000 faa1 	bl	8001c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3778      	adds	r7, #120	; 0x78
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	40021000 	.word	0x40021000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1 > 0)
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <SysTick_Handler+0x38>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <SysTick_Handler+0x18>
		Timer1--;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <SysTick_Handler+0x38>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <SysTick_Handler+0x38>)
 800179e:	801a      	strh	r2, [r3, #0]
	if (Timer2 > 0)
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <SysTick_Handler+0x3c>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <SysTick_Handler+0x2c>
		Timer2--;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SysTick_Handler+0x3c>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Handler+0x3c>)
 80017b2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b4:	f000 f8fa 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80017b8:	f000 fa4d 	bl	8001c56 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000047e 	.word	0x2000047e
 80017c4:	2000047c 	.word	0x2000047c

080017c8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80017ce:	f002 fbcc 	bl	8003f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20001598 	.word	0x20001598

080017dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80017e2:	f002 fbc2 	bl	8003f6a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80017e8:	f002 fbbf 	bl	8003f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20001598 	.word	0x20001598
 80017f4:	2000270c 	.word	0x2000270c

080017f8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <TIM1_TRG_COM_IRQHandler+0x10>)
 80017fe:	f002 fbb4 	bl	8003f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20001598 	.word	0x20001598

0800180c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM1_CC_IRQHandler+0x10>)
 8001812:	f002 fbaa 	bl	8003f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20001598 	.word	0x20001598

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f005 fdc4 	bl	80073dc <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20010000 	.word	0x20010000
 8001880:	00000400 	.word	0x00000400
 8001884:	2000023c 	.word	0x2000023c
 8001888:	200047e0 	.word	0x200047e0

0800188c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b4:	f7ff ffea 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <LoopForever+0x6>)
  ldr r1, =_edata
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <LoopForever+0xe>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d0:	4c0a      	ldr	r4, [pc, #40]	; (80018fc <LoopForever+0x16>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f005 fd83 	bl	80073e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018e2:	f7ff fba7 	bl	8001034 <main>

080018e6 <LoopForever>:

LoopForever:
    b LoopForever
 80018e6:	e7fe      	b.n	80018e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80018f4:	08008260 	.word	0x08008260
  ldr r2, =_sbss
 80018f8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80018fc:	200047dc 	.word	0x200047dc

08001900 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC1_IRQHandler>

08001902 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f961 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f80e 	bl	8001934 <HAL_InitTick>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	71fb      	strb	r3, [r7, #7]
 8001922:	e001      	b.n	8001928 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001924:	f7ff fde0 	bl	80014e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001928:	79fb      	ldrb	r3, [r7, #7]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_InitTick+0x6c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d023      	beq.n	8001990 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_InitTick+0x70>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_InitTick+0x6c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f96d 	bl	8001c3e <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10f      	bne.n	800198a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d809      	bhi.n	8001984 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f000 f937 	bl	8001bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_InitTick+0x74>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e007      	b.n	8001994 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	e004      	b.n	8001994 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	e001      	b.n	8001994 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000010 	.word	0x20000010
 80019a4:	20000008 	.word	0x20000008
 80019a8:	2000000c 	.word	0x2000000c

080019ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x20>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_IncTick+0x24>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_IncTick+0x24>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000010 	.word	0x20000010
 80019d0:	20002758 	.word	0x20002758

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20002758 	.word	0x20002758

080019ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff ffee 	bl	80019d4 <HAL_GetTick>
 80019f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d005      	beq.n	8001a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_Delay+0x44>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a12:	bf00      	nop
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8f7      	bhi.n	8001a14 <HAL_Delay+0x28>
  {
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000010 	.word	0x20000010

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f7ff ff8e 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff29 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfc:	f7ff ff3e 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	6978      	ldr	r0, [r7, #20]
 8001c08:	f7ff ff8e 	bl	8001b28 <NVIC_EncodePriority>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff5d 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff31 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffa2 	bl	8001b90 <SysTick_Config>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c5a:	f000 f802 	bl	8001c62 <HAL_SYSTICK_Callback>
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	e148      	b.n	8001f12 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 813a 	beq.w	8001f0c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d005      	beq.n	8001cb0 <HAL_GPIO_Init+0x40>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d130      	bne.n	8001d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	f003 0201 	and.w	r2, r3, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d017      	beq.n	8001d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d123      	bne.n	8001da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	6939      	ldr	r1, [r7, #16]
 8001d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0203 	and.w	r2, r3, #3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8094 	beq.w	8001f0c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de4:	4b52      	ldr	r3, [pc, #328]	; (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6613      	str	r3, [r2, #96]	; 0x60
 8001df0:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e26:	d00d      	beq.n	8001e44 <HAL_GPIO_Init+0x1d4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <HAL_GPIO_Init+0x2c8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d007      	beq.n	8001e40 <HAL_GPIO_Init+0x1d0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a42      	ldr	r2, [pc, #264]	; (8001f3c <HAL_GPIO_Init+0x2cc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_GPIO_Init+0x1cc>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e004      	b.n	8001e46 <HAL_GPIO_Init+0x1d6>
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	e002      	b.n	8001e46 <HAL_GPIO_Init+0x1d6>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_GPIO_Init+0x1d6>
 8001e44:	2300      	movs	r3, #0
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	f002 0203 	and.w	r2, r2, #3
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	4093      	lsls	r3, r2
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e56:	4937      	ldr	r1, [pc, #220]	; (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e88:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f47f aeaf 	bne.w	8001c80 <HAL_GPIO_Init+0x10>
  }
}
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	48000800 	.word	0x48000800
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40007000 	.word	0x40007000

08001f94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_PWREx_GetVoltageRange+0x18>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000

08001fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fbe:	d130      	bne.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc0:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fcc:	d038      	beq.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2232      	movs	r2, #50	; 0x32
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9b      	lsrs	r3, r3, #18
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff4:	e002      	b.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002008:	d102      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x60>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f2      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201c:	d110      	bne.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e00f      	b.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800202a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202e:	d007      	beq.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002038:	4a05      	ldr	r2, [pc, #20]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40007000 	.word	0x40007000
 8002054:	20000008 	.word	0x20000008
 8002058:	431bde83 	.word	0x431bde83

0800205c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e3fe      	b.n	800286c <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206e:	4ba1      	ldr	r3, [pc, #644]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002078:	4b9e      	ldr	r3, [pc, #632]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80e4 	beq.w	8002258 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4a>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	f040 808b 	bne.w	80021b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	f040 8087 	bne.w	80021b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a6:	4b93      	ldr	r3, [pc, #588]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x62>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e3d6      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	4b8c      	ldr	r3, [pc, #560]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_RCC_OscConfig+0x7c>
 80020ce:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d6:	e005      	b.n	80020e4 <HAL_RCC_OscConfig+0x88>
 80020d8:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d223      	bcs.n	8002130 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fd8b 	bl	8002c08 <RCC_SetFlashLatencyFromMSIRange>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e3b7      	b.n	800286c <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fc:	4b7d      	ldr	r3, [pc, #500]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a7c      	ldr	r2, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4977      	ldr	r1, [pc, #476]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	4972      	ldr	r1, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
 800212e:	e025      	b.n	800217c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002130:	4b70      	ldr	r3, [pc, #448]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a6f      	ldr	r2, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	496a      	ldr	r1, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214e:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	4965      	ldr	r1, [pc, #404]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fd4b 	bl	8002c08 <RCC_SetFlashLatencyFromMSIRange>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e377      	b.n	800286c <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800217c:	f000 fc80 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	495a      	ldr	r1, [pc, #360]	; (80022f8 <HAL_RCC_OscConfig+0x29c>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_RCC_OscConfig+0x2a0>)
 800219a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800219c:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_RCC_OscConfig+0x2a4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fbc7 	bl	8001934 <HAL_InitTick>
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d052      	beq.n	8002256 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	e35b      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d032      	beq.n	8002222 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021bc:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4c      	ldr	r2, [pc, #304]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fc04 	bl	80019d4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d0:	f7ff fc00 	bl	80019d4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e344      	b.n	800286c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e2:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a40      	ldr	r2, [pc, #256]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	493b      	ldr	r1, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	4936      	ldr	r1, [pc, #216]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
 8002220:	e01a      	b.n	8002258 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002222:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a33      	ldr	r2, [pc, #204]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800222e:	f7ff fbd1 	bl	80019d4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002236:	f7ff fbcd 	bl	80019d4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e311      	b.n	800286c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x1da>
 8002254:	e000      	b.n	8002258 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002256:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d074      	beq.n	800234e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b08      	cmp	r3, #8
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x21a>
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b0c      	cmp	r3, #12
 800226e:	d10e      	bne.n	800228e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d10b      	bne.n	800228e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d064      	beq.n	800234c <HAL_RCC_OscConfig+0x2f0>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d160      	bne.n	800234c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e2ee      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x24a>
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e01d      	b.n	80022e2 <HAL_RCC_OscConfig+0x286>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x26e>
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80022b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x286>
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x298>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01c      	beq.n	8002324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7ff fb73 	bl	80019d4 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f0:	e011      	b.n	8002316 <HAL_RCC_OscConfig+0x2ba>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08007d94 	.word	0x08007d94
 80022fc:	20000008 	.word	0x20000008
 8002300:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fb66 	bl	80019d4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e2aa      	b.n	800286c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002316:	4baf      	ldr	r3, [pc, #700]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x2a8>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff fb56 	bl	80019d4 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fb52 	bl	80019d4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e296      	b.n	800286c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233e:	4ba5      	ldr	r3, [pc, #660]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x2d0>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d060      	beq.n	800241c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x310>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d119      	bne.n	800239a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d116      	bne.n	800239a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800236c:	4b99      	ldr	r3, [pc, #612]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x328>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e273      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b93      	ldr	r3, [pc, #588]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	4990      	ldr	r1, [pc, #576]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002398:	e040      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d023      	beq.n	80023ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a2:	4b8c      	ldr	r3, [pc, #560]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a8b      	ldr	r2, [pc, #556]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7ff fb11 	bl	80019d4 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b6:	f7ff fb0d 	bl	80019d4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e251      	b.n	800286c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	4b82      	ldr	r3, [pc, #520]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b7f      	ldr	r3, [pc, #508]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	497c      	ldr	r1, [pc, #496]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
 80023e8:	e018      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b7a      	ldr	r3, [pc, #488]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a79      	ldr	r2, [pc, #484]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80023f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7ff faed 	bl	80019d4 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7ff fae9 	bl	80019d4 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e22d      	b.n	800286c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002410:	4b70      	ldr	r3, [pc, #448]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01c      	beq.n	800246a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002430:	4b68      	ldr	r3, [pc, #416]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	4a67      	ldr	r2, [pc, #412]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7ff fac8 	bl	80019d4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7ff fac4 	bl	80019d4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e208      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245a:	4b5e      	ldr	r3, [pc, #376]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ef      	beq.n	8002448 <HAL_RCC_OscConfig+0x3ec>
 8002468:	e01b      	b.n	80024a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246a:	4b5a      	ldr	r3, [pc, #360]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002470:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7ff faab 	bl	80019d4 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff faa7 	bl	80019d4 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e1eb      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002494:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ef      	bne.n	8002482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80a6 	beq.w	80025fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024b4:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a43      	ldr	r2, [pc, #268]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
 80024cc:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024dc:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <HAL_RCC_OscConfig+0x57c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d118      	bne.n	800251a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e8:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCC_OscConfig+0x57c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_RCC_OscConfig+0x57c>)
 80024ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f4:	f7ff fa6e 	bl	80019d4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fc:	f7ff fa6a 	bl	80019d4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1ae      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250e:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <HAL_RCC_OscConfig+0x57c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <HAL_RCC_OscConfig+0x4d8>
 8002522:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	4a2a      	ldr	r2, [pc, #168]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002532:	e024      	b.n	800257e <HAL_RCC_OscConfig+0x522>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d110      	bne.n	800255e <HAL_RCC_OscConfig+0x502>
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	4a20      	ldr	r2, [pc, #128]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255c:	e00f      	b.n	800257e <HAL_RCC_OscConfig+0x522>
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800256e:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7ff fa25 	bl	80019d4 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7ff fa21 	bl	80019d4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e163      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_OscConfig+0x578>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ed      	beq.n	800258e <HAL_RCC_OscConfig+0x532>
 80025b2:	e01a      	b.n	80025ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff fa0e 	bl	80019d4 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ba:	e00f      	b.n	80025dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7ff fa0a 	bl	80019d4 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d906      	bls.n	80025dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e14c      	b.n	800286c <HAL_RCC_OscConfig+0x810>
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025dc:	4ba5      	ldr	r3, [pc, #660]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e8      	bne.n	80025bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ea:	7ffb      	ldrb	r3, [r7, #31]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4a9f      	ldr	r2, [pc, #636]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80025f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03c      	beq.n	8002682 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01c      	beq.n	800264a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002610:	4b98      	ldr	r3, [pc, #608]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002616:	4a97      	ldr	r2, [pc, #604]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7ff f9d8 	bl	80019d4 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002628:	f7ff f9d4 	bl	80019d4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e118      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800263a:	4b8e      	ldr	r3, [pc, #568]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800263c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ef      	beq.n	8002628 <HAL_RCC_OscConfig+0x5cc>
 8002648:	e01b      	b.n	8002682 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800264a:	4b8a      	ldr	r3, [pc, #552]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800264c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002650:	4a88      	ldr	r2, [pc, #544]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7ff f9bb 	bl	80019d4 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002662:	f7ff f9b7 	bl	80019d4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0fb      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002674:	4b7f      	ldr	r3, [pc, #508]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ef      	bne.n	8002662 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80ef 	beq.w	800286a <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	2b02      	cmp	r3, #2
 8002692:	f040 80c5 	bne.w	8002820 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002696:	4b77      	ldr	r3, [pc, #476]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 0203 	and.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d12c      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	3b01      	subs	r3, #1
 80026b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d123      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d11b      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d113      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d109      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	3b01      	subs	r3, #1
 80026fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d067      	beq.n	80027d4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d062      	beq.n	80027d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800270a:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0a8      	b.n	800286c <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800271a:	4b56      	ldr	r3, [pc, #344]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a55      	ldr	r2, [pc, #340]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002724:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002726:	f7ff f955 	bl	80019d4 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272e:	f7ff f951 	bl	80019d4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e095      	b.n	800286c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002740:	4b4c      	ldr	r3, [pc, #304]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b49      	ldr	r3, [pc, #292]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4b49      	ldr	r3, [pc, #292]	; (8002878 <HAL_RCC_OscConfig+0x81c>)
 8002752:	4013      	ands	r3, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800275c:	3a01      	subs	r2, #1
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002766:	0212      	lsls	r2, r2, #8
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800276e:	0852      	lsrs	r2, r2, #1
 8002770:	3a01      	subs	r2, #1
 8002772:	0552      	lsls	r2, r2, #21
 8002774:	4311      	orrs	r1, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800277a:	0852      	lsrs	r2, r2, #1
 800277c:	3a01      	subs	r2, #1
 800277e:	0652      	lsls	r2, r2, #25
 8002780:	4311      	orrs	r1, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002786:	06d2      	lsls	r2, r2, #27
 8002788:	430a      	orrs	r2, r1
 800278a:	493a      	ldr	r1, [pc, #232]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002790:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800279c:	4b35      	ldr	r3, [pc, #212]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a34      	ldr	r2, [pc, #208]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a8:	f7ff f914 	bl	80019d4 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff f910 	bl	80019d4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e054      	b.n	800286c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ce:	e04c      	b.n	800286a <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e04b      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d144      	bne.n	800286a <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a23      	ldr	r2, [pc, #140]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80027e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027f8:	f7ff f8ec 	bl	80019d4 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff f8e8 	bl	80019d4 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e02c      	b.n	800286c <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x7a4>
 800281e:	e024      	b.n	800286a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d01f      	beq.n	8002866 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800282c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7ff f8cf 	bl	80019d4 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7ff f8cb 	bl	80019d4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e00f      	b.n	800286c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	4905      	ldr	r1, [pc, #20]	; (8002874 <HAL_RCC_OscConfig+0x818>)
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_RCC_OscConfig+0x820>)
 8002860:	4013      	ands	r3, r2
 8002862:	60cb      	str	r3, [r1, #12]
 8002864:	e001      	b.n	800286a <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	019d808c 	.word	0x019d808c
 800287c:	feeefffc 	.word	0xfeeefffc

08002880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0e7      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <HAL_RCC_ClockConfig+0x1ec>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d910      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b72      	ldr	r3, [pc, #456]	; (8002a6c <HAL_RCC_ClockConfig+0x1ec>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0207 	bic.w	r2, r3, #7
 80028aa:	4970      	ldr	r1, [pc, #448]	; (8002a6c <HAL_RCC_ClockConfig+0x1ec>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b6e      	ldr	r3, [pc, #440]	; (8002a6c <HAL_RCC_ClockConfig+0x1ec>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0cf      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d010      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	4b66      	ldr	r3, [pc, #408]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028dc:	429a      	cmp	r2, r3
 80028de:	d908      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b63      	ldr	r3, [pc, #396]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4960      	ldr	r1, [pc, #384]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d04c      	beq.n	8002998 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002906:	4b5a      	ldr	r3, [pc, #360]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d121      	bne.n	8002956 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0a6      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291e:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d115      	bne.n	8002956 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e09a      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002936:	4b4e      	ldr	r3, [pc, #312]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e08e      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002946:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e086      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002956:	4b46      	ldr	r3, [pc, #280]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 0203 	bic.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4943      	ldr	r1, [pc, #268]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002968:	f7ff f834 	bl	80019d4 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	e00a      	b.n	8002986 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002970:	f7ff f830 	bl	80019d4 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e06e      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 020c 	and.w	r2, r3, #12
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	429a      	cmp	r2, r3
 8002996:	d1eb      	bne.n	8002970 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d010      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d208      	bcs.n	80029c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	492b      	ldr	r1, [pc, #172]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c6:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_RCC_ClockConfig+0x1ec>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d210      	bcs.n	80029f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_ClockConfig+0x1ec>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 0207 	bic.w	r2, r3, #7
 80029dc:	4923      	ldr	r1, [pc, #140]	; (8002a6c <HAL_RCC_ClockConfig+0x1ec>)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_RCC_ClockConfig+0x1ec>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d001      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e036      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4918      	ldr	r1, [pc, #96]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4910      	ldr	r1, [pc, #64]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a34:	f000 f824 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	490b      	ldr	r1, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x1f4>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a50:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1f8>)
 8002a52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1fc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe ff6b 	bl	8001934 <HAL_InitTick>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a62:	7afb      	ldrb	r3, [r7, #11]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08007d94 	.word	0x08007d94
 8002a78:	20000008 	.word	0x20000008
 8002a7c:	2000000c 	.word	0x2000000c

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8e:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d121      	bne.n	8002af2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d11e      	bne.n	8002af2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ab4:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	e005      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002adc:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10d      	bne.n	8002b08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d102      	bne.n	8002afe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002af8:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e004      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b04:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	d134      	bne.n	8002b78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d003      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0xac>
 8002b24:	e005      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b26:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b28:	617b      	str	r3, [r7, #20]
      break;
 8002b2a:	e005      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b2e:	617b      	str	r3, [r7, #20]
      break;
 8002b30:	e002      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	617b      	str	r3, [r7, #20]
      break;
 8002b36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	3301      	adds	r3, #1
 8002b44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	fb02 f203 	mul.w	r2, r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	0e5b      	lsrs	r3, r3, #25
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b78:	69bb      	ldr	r3, [r7, #24]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08007dac 	.word	0x08007dac
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	007a1200 	.word	0x007a1200

08002b98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_RCC_GetHCLKFreq+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000008 	.word	0x20000008

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bb4:	f7ff fff0 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	08007da4 	.word	0x08007da4

08002bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002be0:	f7ff ffda 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	0adb      	lsrs	r3, r3, #11
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4904      	ldr	r1, [pc, #16]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08007da4 	.word	0x08007da4

08002c08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c14:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c20:	f7ff f9b8 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002c24:	6178      	str	r0, [r7, #20]
 8002c26:	e014      	b.n	8002c52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c32:	6593      	str	r3, [r2, #88]	; 0x58
 8002c34:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c40:	f7ff f9a8 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002c44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c46:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c58:	d10b      	bne.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d919      	bls.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2ba0      	cmp	r3, #160	; 0xa0
 8002c64:	d902      	bls.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c66:	2302      	movs	r3, #2
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e013      	b.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	e010      	b.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b80      	cmp	r3, #128	; 0x80
 8002c76:	d902      	bls.n	8002c7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c78:	2303      	movs	r3, #3
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e00a      	b.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d102      	bne.n	8002c8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c84:	2302      	movs	r3, #2
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	e004      	b.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b70      	cmp	r3, #112	; 0x70
 8002c8e:	d101      	bne.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c90:	2301      	movs	r3, #1
 8002c92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 0207 	bic.w	r2, r3, #7
 8002c9c:	4909      	ldr	r1, [pc, #36]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40022000 	.word	0x40022000

08002cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d031      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cec:	d01a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002cee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cf2:	d814      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cfc:	d10f      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002cfe:	4bac      	ldr	r3, [pc, #688]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	4aab      	ldr	r2, [pc, #684]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d0a:	e00c      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f9dc 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d1c:	e003      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	74fb      	strb	r3, [r7, #19]
      break;
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d2c:	4ba0      	ldr	r3, [pc, #640]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	499d      	ldr	r1, [pc, #628]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d42:	e001      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8099 	beq.w	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d5a:	4b95      	ldr	r3, [pc, #596]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	4a8e      	ldr	r2, [pc, #568]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7c:	4b8c      	ldr	r3, [pc, #560]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d8c:	4b89      	ldr	r3, [pc, #548]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a88      	ldr	r2, [pc, #544]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d98:	f7fe fe1c 	bl	80019d4 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d9e:	e009      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fe fe18 	bl	80019d4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d902      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	74fb      	strb	r3, [r7, #19]
        break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002db4:	4b7f      	ldr	r3, [pc, #508]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ef      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d155      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dc6:	4b7a      	ldr	r3, [pc, #488]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01e      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d019      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002de2:	4b73      	ldr	r3, [pc, #460]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	4a6e      	ldr	r2, [pc, #440]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dfe:	4b6c      	ldr	r3, [pc, #432]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e04:	4a6a      	ldr	r2, [pc, #424]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e0e:	4a68      	ldr	r2, [pc, #416]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d016      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fdd8 	bl	80019d4 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e26:	e00b      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fe fdd4 	bl	80019d4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d902      	bls.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	74fb      	strb	r3, [r7, #19]
            break;
 8002e3e:	e006      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e40:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ec      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10b      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e54:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	4953      	ldr	r1, [pc, #332]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e6a:	e004      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	74bb      	strb	r3, [r7, #18]
 8002e70:	e001      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e76:	7c7b      	ldrb	r3, [r7, #17]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	4a4b      	ldr	r2, [pc, #300]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e94:	4b46      	ldr	r3, [pc, #280]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4943      	ldr	r1, [pc, #268]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eb6:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f023 020c 	bic.w	r2, r3, #12
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	493a      	ldr	r1, [pc, #232]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	4932      	ldr	r1, [pc, #200]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efa:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f08:	4929      	ldr	r1, [pc, #164]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	4921      	ldr	r1, [pc, #132]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	4918      	ldr	r1, [pc, #96]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4910      	ldr	r1, [pc, #64]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d02c      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4907      	ldr	r1, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa2:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4a02      	ldr	r2, [pc, #8]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fac:	60d3      	str	r3, [r2, #12]
 8002fae:	e015      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f881 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d028      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fe8:	4b30      	ldr	r3, [pc, #192]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	492d      	ldr	r1, [pc, #180]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003006:	d106      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a27      	ldr	r2, [pc, #156]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800300e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003012:	60d3      	str	r3, [r2, #12]
 8003014:	e011      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800301e:	d10c      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f852 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003036:	7cfb      	ldrb	r3, [r7, #19]
 8003038:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01c      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	4915      	ldr	r1, [pc, #84]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003064:	d10c      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f82f 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800308c:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309a:	4904      	ldr	r1, [pc, #16]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000

080030b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a04      	ldr	r2, [pc, #16]	; (80030cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000

080030d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030de:	4b74      	ldr	r3, [pc, #464]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d018      	beq.n	800311c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ea:	4b71      	ldr	r3, [pc, #452]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0203 	and.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d10d      	bne.n	8003116 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
       ||
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003102:	4b6b      	ldr	r3, [pc, #428]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
       ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d047      	beq.n	80031a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	e044      	b.n	80031a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d018      	beq.n	8003156 <RCCEx_PLLSAI1_Config+0x86>
 8003124:	2b03      	cmp	r3, #3
 8003126:	d825      	bhi.n	8003174 <RCCEx_PLLSAI1_Config+0xa4>
 8003128:	2b01      	cmp	r3, #1
 800312a:	d002      	beq.n	8003132 <RCCEx_PLLSAI1_Config+0x62>
 800312c:	2b02      	cmp	r3, #2
 800312e:	d009      	beq.n	8003144 <RCCEx_PLLSAI1_Config+0x74>
 8003130:	e020      	b.n	8003174 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003132:	4b5f      	ldr	r3, [pc, #380]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d11d      	bne.n	800317a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003142:	e01a      	b.n	800317a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003144:	4b5a      	ldr	r3, [pc, #360]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d116      	bne.n	800317e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003154:	e013      	b.n	800317e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003156:	4b56      	ldr	r3, [pc, #344]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003162:	4b53      	ldr	r3, [pc, #332]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003172:	e006      	b.n	8003182 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e004      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800317a:	bf00      	nop
 800317c:	e002      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003182:	bf00      	nop
    }

    if(status == HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800318a:	4b49      	ldr	r3, [pc, #292]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	430b      	orrs	r3, r1
 80031a0:	4943      	ldr	r1, [pc, #268]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d17c      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031ac:	4b40      	ldr	r3, [pc, #256]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a3f      	ldr	r2, [pc, #252]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b8:	f7fe fc0c 	bl	80019d4 <HAL_GetTick>
 80031bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031be:	e009      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c0:	f7fe fc08 	bl	80019d4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d902      	bls.n	80031d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	73fb      	strb	r3, [r7, #15]
        break;
 80031d2:	e005      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031d4:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ef      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d15f      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d110      	bne.n	800320e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ec:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6892      	ldr	r2, [r2, #8]
 80031fc:	0211      	lsls	r1, r2, #8
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	06d2      	lsls	r2, r2, #27
 8003204:	430a      	orrs	r2, r1
 8003206:	492a      	ldr	r1, [pc, #168]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003208:	4313      	orrs	r3, r2
 800320a:	610b      	str	r3, [r1, #16]
 800320c:	e027      	b.n	800325e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d112      	bne.n	800323a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003214:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800321c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6892      	ldr	r2, [r2, #8]
 8003224:	0211      	lsls	r1, r2, #8
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6912      	ldr	r2, [r2, #16]
 800322a:	0852      	lsrs	r2, r2, #1
 800322c:	3a01      	subs	r2, #1
 800322e:	0552      	lsls	r2, r2, #21
 8003230:	430a      	orrs	r2, r1
 8003232:	491f      	ldr	r1, [pc, #124]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003234:	4313      	orrs	r3, r2
 8003236:	610b      	str	r3, [r1, #16]
 8003238:	e011      	b.n	800325e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003242:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6892      	ldr	r2, [r2, #8]
 800324a:	0211      	lsls	r1, r2, #8
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6952      	ldr	r2, [r2, #20]
 8003250:	0852      	lsrs	r2, r2, #1
 8003252:	3a01      	subs	r2, #1
 8003254:	0652      	lsls	r2, r2, #25
 8003256:	430a      	orrs	r2, r1
 8003258:	4915      	ldr	r1, [pc, #84]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800325e:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003268:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe fbb3 	bl	80019d4 <HAL_GetTick>
 800326e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003270:	e009      	b.n	8003286 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003272:	f7fe fbaf 	bl	80019d4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d902      	bls.n	8003286 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	73fb      	strb	r3, [r7, #15]
          break;
 8003284:	e005      	b.n	8003292 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ef      	beq.n	8003272 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	4903      	ldr	r1, [pc, #12]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000

080032b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e095      	b.n	80033f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d108      	bne.n	80032e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d6:	d009      	beq.n	80032ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	61da      	str	r2, [r3, #28]
 80032de:	e005      	b.n	80032ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe f912 	bl	8001530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003322:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800332c:	d902      	bls.n	8003334 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e002      	b.n	800333a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003338:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003342:	d007      	beq.n	8003354 <HAL_SPI_Init+0xa0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800334c:	d002      	beq.n	8003354 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	ea42 0103 	orr.w	r1, r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	f003 0204 	and.w	r2, r3, #4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033d0:	ea42 0103 	orr.w	r1, r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b088      	sub	sp, #32
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_SPI_Transmit+0x22>
 8003418:	2302      	movs	r3, #2
 800341a:	e158      	b.n	80036ce <HAL_SPI_Transmit+0x2d4>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003424:	f7fe fad6 	bl	80019d4 <HAL_GetTick>
 8003428:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d002      	beq.n	8003440 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800343e:	e13d      	b.n	80036bc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_SPI_Transmit+0x52>
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003450:	e134      	b.n	80036bc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2203      	movs	r2, #3
 8003456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	88fa      	ldrh	r2, [r7, #6]
 800346a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349c:	d10f      	bne.n	80034be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d007      	beq.n	80034dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034e4:	d94b      	bls.n	800357e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_SPI_Transmit+0xfa>
 80034ee:	8afb      	ldrh	r3, [r7, #22]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d13e      	bne.n	8003572 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	1c9a      	adds	r2, r3, #2
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003518:	e02b      	b.n	8003572 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b02      	cmp	r3, #2
 8003526:	d112      	bne.n	800354e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	881a      	ldrh	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	1c9a      	adds	r2, r3, #2
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800354c:	e011      	b.n	8003572 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800354e:	f7fe fa41 	bl	80019d4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d803      	bhi.n	8003566 <HAL_SPI_Transmit+0x16c>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d102      	bne.n	800356c <HAL_SPI_Transmit+0x172>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003570:	e0a4      	b.n	80036bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ce      	bne.n	800351a <HAL_SPI_Transmit+0x120>
 800357c:	e07c      	b.n	8003678 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_SPI_Transmit+0x192>
 8003586:	8afb      	ldrh	r3, [r7, #22]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d170      	bne.n	800366e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d912      	bls.n	80035bc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b02      	subs	r3, #2
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035ba:	e058      	b.n	800366e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	7812      	ldrb	r2, [r2, #0]
 80035c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035e2:	e044      	b.n	800366e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d12b      	bne.n	800364a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d912      	bls.n	8003622 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	881a      	ldrh	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	1c9a      	adds	r2, r3, #2
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b02      	subs	r3, #2
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003620:	e025      	b.n	800366e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003648:	e011      	b.n	800366e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800364a:	f7fe f9c3 	bl	80019d4 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d803      	bhi.n	8003662 <HAL_SPI_Transmit+0x268>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d102      	bne.n	8003668 <HAL_SPI_Transmit+0x26e>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800366c:	e026      	b.n	80036bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1b5      	bne.n	80035e4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fb5b 	bl	8003d38 <SPI_EndRxTxTransaction>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e000      	b.n	80036bc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80036ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b08a      	sub	sp, #40	; 0x28
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036e4:	2301      	movs	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x26>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e1fb      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x41e>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003704:	f7fe f966 	bl	80019d4 <HAL_GetTick>
 8003708:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003710:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003720:	7efb      	ldrb	r3, [r7, #27]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d00e      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x6e>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372c:	d106      	bne.n	800373c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_SPI_TransmitReceive+0x66>
 8003736:	7efb      	ldrb	r3, [r7, #27]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d003      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800373c:	2302      	movs	r3, #2
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003742:	e1cd      	b.n	8003ae0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_SPI_TransmitReceive+0x80>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_SPI_TransmitReceive+0x80>
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800375c:	e1c0      	b.n	8003ae0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b04      	cmp	r3, #4
 8003768:	d003      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2205      	movs	r2, #5
 800376e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	887a      	ldrh	r2, [r7, #2]
 8003782:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	887a      	ldrh	r2, [r7, #2]
 800378a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	887a      	ldrh	r2, [r7, #2]
 8003798:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	887a      	ldrh	r2, [r7, #2]
 800379e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b4:	d802      	bhi.n	80037bc <HAL_SPI_TransmitReceive+0xe6>
 80037b6:	8a3b      	ldrh	r3, [r7, #16]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d908      	bls.n	80037ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	e007      	b.n	80037de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d007      	beq.n	80037fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003804:	d97c      	bls.n	8003900 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x13e>
 800380e:	8a7b      	ldrh	r3, [r7, #18]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d169      	bne.n	80038e8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	881a      	ldrh	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	1c9a      	adds	r2, r3, #2
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003838:	e056      	b.n	80038e8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	d11b      	bne.n	8003880 <HAL_SPI_TransmitReceive+0x1aa>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x1aa>
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	2b01      	cmp	r3, #1
 8003856:	d113      	bne.n	8003880 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	881a      	ldrh	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	1c9a      	adds	r2, r3, #2
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d11c      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x1f2>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	b292      	uxth	r2, r2
 80038a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	1c9a      	adds	r2, r3, #2
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038c4:	2301      	movs	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038c8:	f7fe f884 	bl	80019d4 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d807      	bhi.n	80038e8 <HAL_SPI_TransmitReceive+0x212>
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d003      	beq.n	80038e8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038e6:	e0fb      	b.n	8003ae0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1a3      	bne.n	800383a <HAL_SPI_TransmitReceive+0x164>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d19d      	bne.n	800383a <HAL_SPI_TransmitReceive+0x164>
 80038fe:	e0df      	b.n	8003ac0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x23a>
 8003908:	8a7b      	ldrh	r3, [r7, #18]
 800390a:	2b01      	cmp	r3, #1
 800390c:	f040 80cb 	bne.w	8003aa6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d912      	bls.n	8003940 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	881a      	ldrh	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	1c9a      	adds	r2, r3, #2
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b02      	subs	r3, #2
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800393e:	e0b2      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003966:	e09e      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d134      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x30a>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02f      	beq.n	80039e0 <HAL_SPI_TransmitReceive+0x30a>
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	2b01      	cmp	r3, #1
 8003984:	d12c      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d912      	bls.n	80039b6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	1c9a      	adds	r2, r3, #2
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b02      	subs	r3, #2
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039b4:	e012      	b.n	80039dc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	7812      	ldrb	r2, [r2, #0]
 80039c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d148      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x3aa>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d042      	beq.n	8003a80 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d923      	bls.n	8003a4e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	b292      	uxth	r2, r2
 8003a12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	1c9a      	adds	r2, r3, #2
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b02      	subs	r3, #2
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d81f      	bhi.n	8003a7c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	e016      	b.n	8003a7c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f103 020c 	add.w	r2, r3, #12
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	7812      	ldrb	r2, [r2, #0]
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a80:	f7fd ffa8 	bl	80019d4 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d803      	bhi.n	8003a98 <HAL_SPI_TransmitReceive+0x3c2>
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0x3c8>
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003aa4:	e01c      	b.n	8003ae0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f47f af5b 	bne.w	8003968 <HAL_SPI_TransmitReceive+0x292>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f47f af54 	bne.w	8003968 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f937 	bl	8003d38 <SPI_EndRxTxTransaction>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	661a      	str	r2, [r3, #96]	; 0x60
 8003adc:	e000      	b.n	8003ae0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003ade:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	; 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b0c:	f7fd ff62 	bl	80019d4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	4413      	add	r3, r2
 8003b1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b1c:	f7fd ff5a 	bl	80019d4 <HAL_GetTick>
 8003b20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b22:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	015b      	lsls	r3, r3, #5
 8003b28:	0d1b      	lsrs	r3, r3, #20
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b32:	e054      	b.n	8003bde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d050      	beq.n	8003bde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b3c:	f7fd ff4a 	bl	80019d4 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d902      	bls.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d13d      	bne.n	8003bce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6a:	d111      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b74:	d004      	beq.n	8003b80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7e:	d107      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b98:	d10f      	bne.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e017      	b.n	8003bfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d19b      	bne.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000008 	.word	0x20000008

08003c0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c1e:	f7fd fed9 	bl	80019d4 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c2e:	f7fd fed1 	bl	80019d4 <HAL_GetTick>
 8003c32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c3c:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	00da      	lsls	r2, r3, #3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	0d1b      	lsrs	r3, r3, #20
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c54:	e060      	b.n	8003d18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c5c:	d107      	bne.n	8003c6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d050      	beq.n	8003d18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c76:	f7fd fead 	bl	80019d4 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d902      	bls.n	8003c8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d13d      	bne.n	8003d08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca4:	d111      	bne.n	8003cca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cae:	d004      	beq.n	8003cba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb8:	d107      	bne.n	8003cca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd2:	d10f      	bne.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e010      	b.n	8003d2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d196      	bne.n	8003c56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3728      	adds	r7, #40	; 0x28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000008 	.word	0x20000008

08003d38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7ff ff5b 	bl	8003c0c <SPI_WaitFifoStateUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e027      	b.n	8003dbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff fec0 	bl	8003afc <SPI_WaitFlagStateUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d86:	f043 0220 	orr.w	r2, r3, #32
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e014      	b.n	8003dbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff ff34 	bl	8003c0c <SPI_WaitFifoStateUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e000      	b.n	8003dbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e049      	b.n	8003e6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd fbe4 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f000 fac2 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d001      	beq.n	8003e8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e033      	b.n	8003ef4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <HAL_TIM_Base_Start+0x8c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_TIM_Base_Start+0x3e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea6:	d004      	beq.n	8003eb2 <HAL_TIM_Base_Start+0x3e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <HAL_TIM_Base_Start+0x90>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d115      	bne.n	8003ede <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <HAL_TIM_Base_Start+0x94>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d015      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x7c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d011      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	e008      	b.n	8003ef0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e000      	b.n	8003ef2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40014000 	.word	0x40014000
 8003f08:	00010007 	.word	0x00010007

08003f0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6a1a      	ldr	r2, [r3, #32]
 8003f2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <HAL_TIM_Base_Stop_IT+0x48>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	f240 4344 	movw	r3, #1092	; 0x444
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <HAL_TIM_Base_Stop_IT+0x48>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d122      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d11b      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0202 	mvn.w	r2, #2
 8003f96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f9ce 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 8003fb2:	e005      	b.n	8003fc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f9c0 	bl	800433a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f9d1 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d122      	bne.n	800401a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d11b      	bne.n	800401a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f06f 0204 	mvn.w	r2, #4
 8003fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f9a4 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 8004006:	e005      	b.n	8004014 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f996 	bl	800433a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f9a7 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d122      	bne.n	800406e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11b      	bne.n	800406e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f06f 0208 	mvn.w	r2, #8
 800403e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f97a 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 800405a:	e005      	b.n	8004068 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f96c 	bl	800433a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f97d 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d122      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b10      	cmp	r3, #16
 8004088:	d11b      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f06f 0210 	mvn.w	r2, #16
 8004092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2208      	movs	r2, #8
 8004098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f950 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 80040ae:	e005      	b.n	80040bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f942 	bl	800433a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f953 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10e      	bne.n	80040ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d107      	bne.n	80040ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f06f 0201 	mvn.w	r2, #1
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fd f9e1 	bl	80014b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f8:	2b80      	cmp	r3, #128	; 0x80
 80040fa:	d10e      	bne.n	800411a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b80      	cmp	r3, #128	; 0x80
 8004108:	d107      	bne.n	800411a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 faa7 	bl	8004668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004128:	d10e      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d107      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa9a 	bl	800467c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f901 	bl	8004376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b20      	cmp	r3, #32
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b20      	cmp	r3, #32
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0220 	mvn.w	r2, #32
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fa5a 	bl	8004654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_TIM_ConfigClockSource+0x1c>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e0b6      	b.n	8004332 <HAL_TIM_ConfigClockSource+0x18a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d03e      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0xd8>
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004206:	f200 8087 	bhi.w	8004318 <HAL_TIM_ConfigClockSource+0x170>
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420e:	f000 8086 	beq.w	800431e <HAL_TIM_ConfigClockSource+0x176>
 8004212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004216:	d87f      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x170>
 8004218:	2b70      	cmp	r3, #112	; 0x70
 800421a:	d01a      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0xaa>
 800421c:	2b70      	cmp	r3, #112	; 0x70
 800421e:	d87b      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x170>
 8004220:	2b60      	cmp	r3, #96	; 0x60
 8004222:	d050      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x11e>
 8004224:	2b60      	cmp	r3, #96	; 0x60
 8004226:	d877      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x170>
 8004228:	2b50      	cmp	r3, #80	; 0x50
 800422a:	d03c      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0xfe>
 800422c:	2b50      	cmp	r3, #80	; 0x50
 800422e:	d873      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x170>
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	d058      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x13e>
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d86f      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x170>
 8004238:	2b30      	cmp	r3, #48	; 0x30
 800423a:	d064      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15e>
 800423c:	2b30      	cmp	r3, #48	; 0x30
 800423e:	d86b      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x170>
 8004240:	2b20      	cmp	r3, #32
 8004242:	d060      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15e>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d867      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x170>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15e>
 800424c:	2b10      	cmp	r3, #16
 800424e:	d05a      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15e>
 8004250:	e062      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6899      	ldr	r1, [r3, #8]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f000 f971 	bl	8004548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	609a      	str	r2, [r3, #8]
      break;
 800427e:	e04f      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f000 f95a 	bl	8004548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a2:	609a      	str	r2, [r3, #8]
      break;
 80042a4:	e03c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f000 f8ce 	bl	8004454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2150      	movs	r1, #80	; 0x50
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f927 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042c4:	e02c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6859      	ldr	r1, [r3, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f000 f8ed 	bl	80044b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2160      	movs	r1, #96	; 0x60
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f917 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042e4:	e01c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f000 f8ae 	bl	8004454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2140      	movs	r1, #64	; 0x40
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f907 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8004304:	e00c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f000 f8fe 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8004316:	e003      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
      break;
 800431c:	e000      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800431e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a2a      	ldr	r2, [pc, #168]	; (8004448 <TIM_Base_SetConfig+0xbc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_Base_SetConfig+0x20>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d108      	bne.n	80043be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a21      	ldr	r2, [pc, #132]	; (8004448 <TIM_Base_SetConfig+0xbc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_Base_SetConfig+0x52>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043cc:	d007      	beq.n	80043de <TIM_Base_SetConfig+0x52>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1e      	ldr	r2, [pc, #120]	; (800444c <TIM_Base_SetConfig+0xc0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_Base_SetConfig+0x52>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <TIM_Base_SetConfig+0xc4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <TIM_Base_SetConfig+0xbc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_Base_SetConfig+0xa0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0b      	ldr	r2, [pc, #44]	; (800444c <TIM_Base_SetConfig+0xc0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0xa0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <TIM_Base_SetConfig+0xc4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d103      	bne.n	8004434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	615a      	str	r2, [r3, #20]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40014000 	.word	0x40014000
 8004450:	40014400 	.word	0x40014400

08004454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 030a 	bic.w	r3, r3, #10
 8004490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b087      	sub	sp, #28
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0210 	bic.w	r2, r3, #16
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	031b      	lsls	r3, r3, #12
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	f043 0307 	orr.w	r3, r3, #7
 8004534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	021a      	lsls	r2, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	431a      	orrs	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800459c:	2302      	movs	r3, #2
 800459e:	e04f      	b.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a21      	ldr	r2, [pc, #132]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a14      	ldr	r2, [pc, #80]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004608:	d004      	beq.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d10c      	bne.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800461a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	4313      	orrs	r3, r2
 8004624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40014000 	.word	0x40014000

08004654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e040      	b.n	8004724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc ffda 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8c0 	bl	8004854 <UART_SetConfig>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e022      	b.n	8004724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fabe 	bl	8004c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800470a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fb45 	bl	8004dac <UART_CheckIdleState>
 8004722:	4603      	mov	r3, r0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	; 0x28
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004740:	2b20      	cmp	r3, #32
 8004742:	f040 8082 	bne.w	800484a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_UART_Transmit+0x26>
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e07a      	b.n	800484c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_UART_Transmit+0x38>
 8004760:	2302      	movs	r3, #2
 8004762:	e073      	b.n	800484c <HAL_UART_Transmit+0x120>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2221      	movs	r2, #33	; 0x21
 8004778:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800477a:	f7fd f92b 	bl	80019d4 <HAL_GetTick>
 800477e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	88fa      	ldrh	r2, [r7, #6]
 8004784:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004798:	d108      	bne.n	80047ac <HAL_UART_Transmit+0x80>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d104      	bne.n	80047ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	e003      	b.n	80047b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047bc:	e02d      	b.n	800481a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fb38 	bl	8004e3e <UART_WaitOnFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e039      	b.n	800484c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	881a      	ldrh	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ea:	b292      	uxth	r2, r2
 80047ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	3302      	adds	r3, #2
 80047f2:	61bb      	str	r3, [r7, #24]
 80047f4:	e008      	b.n	8004808 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	781a      	ldrb	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	b292      	uxth	r2, r2
 8004800:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3301      	adds	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1cb      	bne.n	80047be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	2140      	movs	r1, #64	; 0x40
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fb04 	bl	8004e3e <UART_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e005      	b.n	800484c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e000      	b.n	800484c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800484a:	2302      	movs	r3, #2
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004854:	b5b0      	push	{r4, r5, r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	4313      	orrs	r3, r2
 8004876:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4baf      	ldr	r3, [pc, #700]	; (8004b3c <UART_SetConfig+0x2e8>)
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	69f9      	ldr	r1, [r7, #28]
 8004888:	430b      	orrs	r3, r1
 800488a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4aa4      	ldr	r2, [pc, #656]	; (8004b40 <UART_SetConfig+0x2ec>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d004      	beq.n	80048bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a9b      	ldr	r2, [pc, #620]	; (8004b44 <UART_SetConfig+0x2f0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d121      	bne.n	800491e <UART_SetConfig+0xca>
 80048da:	4b9b      	ldr	r3, [pc, #620]	; (8004b48 <UART_SetConfig+0x2f4>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d817      	bhi.n	8004918 <UART_SetConfig+0xc4>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <UART_SetConfig+0x9c>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004901 	.word	0x08004901
 80048f4:	0800490d 	.word	0x0800490d
 80048f8:	08004907 	.word	0x08004907
 80048fc:	08004913 	.word	0x08004913
 8004900:	2301      	movs	r3, #1
 8004902:	76fb      	strb	r3, [r7, #27]
 8004904:	e070      	b.n	80049e8 <UART_SetConfig+0x194>
 8004906:	2302      	movs	r3, #2
 8004908:	76fb      	strb	r3, [r7, #27]
 800490a:	e06d      	b.n	80049e8 <UART_SetConfig+0x194>
 800490c:	2304      	movs	r3, #4
 800490e:	76fb      	strb	r3, [r7, #27]
 8004910:	e06a      	b.n	80049e8 <UART_SetConfig+0x194>
 8004912:	2308      	movs	r3, #8
 8004914:	76fb      	strb	r3, [r7, #27]
 8004916:	e067      	b.n	80049e8 <UART_SetConfig+0x194>
 8004918:	2310      	movs	r3, #16
 800491a:	76fb      	strb	r3, [r7, #27]
 800491c:	e064      	b.n	80049e8 <UART_SetConfig+0x194>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a8a      	ldr	r2, [pc, #552]	; (8004b4c <UART_SetConfig+0x2f8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d132      	bne.n	800498e <UART_SetConfig+0x13a>
 8004928:	4b87      	ldr	r3, [pc, #540]	; (8004b48 <UART_SetConfig+0x2f4>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d828      	bhi.n	8004988 <UART_SetConfig+0x134>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0xe8>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004971 	.word	0x08004971
 8004940:	08004989 	.word	0x08004989
 8004944:	08004989 	.word	0x08004989
 8004948:	08004989 	.word	0x08004989
 800494c:	0800497d 	.word	0x0800497d
 8004950:	08004989 	.word	0x08004989
 8004954:	08004989 	.word	0x08004989
 8004958:	08004989 	.word	0x08004989
 800495c:	08004977 	.word	0x08004977
 8004960:	08004989 	.word	0x08004989
 8004964:	08004989 	.word	0x08004989
 8004968:	08004989 	.word	0x08004989
 800496c:	08004983 	.word	0x08004983
 8004970:	2300      	movs	r3, #0
 8004972:	76fb      	strb	r3, [r7, #27]
 8004974:	e038      	b.n	80049e8 <UART_SetConfig+0x194>
 8004976:	2302      	movs	r3, #2
 8004978:	76fb      	strb	r3, [r7, #27]
 800497a:	e035      	b.n	80049e8 <UART_SetConfig+0x194>
 800497c:	2304      	movs	r3, #4
 800497e:	76fb      	strb	r3, [r7, #27]
 8004980:	e032      	b.n	80049e8 <UART_SetConfig+0x194>
 8004982:	2308      	movs	r3, #8
 8004984:	76fb      	strb	r3, [r7, #27]
 8004986:	e02f      	b.n	80049e8 <UART_SetConfig+0x194>
 8004988:	2310      	movs	r3, #16
 800498a:	76fb      	strb	r3, [r7, #27]
 800498c:	e02c      	b.n	80049e8 <UART_SetConfig+0x194>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a6b      	ldr	r2, [pc, #428]	; (8004b40 <UART_SetConfig+0x2ec>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d125      	bne.n	80049e4 <UART_SetConfig+0x190>
 8004998:	4b6b      	ldr	r3, [pc, #428]	; (8004b48 <UART_SetConfig+0x2f4>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a6:	d017      	beq.n	80049d8 <UART_SetConfig+0x184>
 80049a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ac:	d817      	bhi.n	80049de <UART_SetConfig+0x18a>
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b2:	d00b      	beq.n	80049cc <UART_SetConfig+0x178>
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b8:	d811      	bhi.n	80049de <UART_SetConfig+0x18a>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <UART_SetConfig+0x172>
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c2:	d006      	beq.n	80049d2 <UART_SetConfig+0x17e>
 80049c4:	e00b      	b.n	80049de <UART_SetConfig+0x18a>
 80049c6:	2300      	movs	r3, #0
 80049c8:	76fb      	strb	r3, [r7, #27]
 80049ca:	e00d      	b.n	80049e8 <UART_SetConfig+0x194>
 80049cc:	2302      	movs	r3, #2
 80049ce:	76fb      	strb	r3, [r7, #27]
 80049d0:	e00a      	b.n	80049e8 <UART_SetConfig+0x194>
 80049d2:	2304      	movs	r3, #4
 80049d4:	76fb      	strb	r3, [r7, #27]
 80049d6:	e007      	b.n	80049e8 <UART_SetConfig+0x194>
 80049d8:	2308      	movs	r3, #8
 80049da:	76fb      	strb	r3, [r7, #27]
 80049dc:	e004      	b.n	80049e8 <UART_SetConfig+0x194>
 80049de:	2310      	movs	r3, #16
 80049e0:	76fb      	strb	r3, [r7, #27]
 80049e2:	e001      	b.n	80049e8 <UART_SetConfig+0x194>
 80049e4:	2310      	movs	r3, #16
 80049e6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a54      	ldr	r2, [pc, #336]	; (8004b40 <UART_SetConfig+0x2ec>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d173      	bne.n	8004ada <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049f2:	7efb      	ldrb	r3, [r7, #27]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d824      	bhi.n	8004a42 <UART_SetConfig+0x1ee>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x1ac>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a25 	.word	0x08004a25
 8004a04:	08004a43 	.word	0x08004a43
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a43 	.word	0x08004a43
 8004a10:	08004a33 	.word	0x08004a33
 8004a14:	08004a43 	.word	0x08004a43
 8004a18:	08004a43 	.word	0x08004a43
 8004a1c:	08004a43 	.word	0x08004a43
 8004a20:	08004a3b 	.word	0x08004a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a24:	f7fe f8c4 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8004a28:	6178      	str	r0, [r7, #20]
        break;
 8004a2a:	e00f      	b.n	8004a4c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a2c:	4b48      	ldr	r3, [pc, #288]	; (8004b50 <UART_SetConfig+0x2fc>)
 8004a2e:	617b      	str	r3, [r7, #20]
        break;
 8004a30:	e00c      	b.n	8004a4c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a32:	f7fe f825 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8004a36:	6178      	str	r0, [r7, #20]
        break;
 8004a38:	e008      	b.n	8004a4c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3e:	617b      	str	r3, [r7, #20]
        break;
 8004a40:	e004      	b.n	8004a4c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	76bb      	strb	r3, [r7, #26]
        break;
 8004a4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80fc 	beq.w	8004c4c <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d305      	bcc.n	8004a70 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d902      	bls.n	8004a76 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	76bb      	strb	r3, [r7, #26]
 8004a74:	e0ea      	b.n	8004c4c <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f04f 0100 	mov.w	r1, #0
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	020b      	lsls	r3, r1, #8
 8004a88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a8c:	0202      	lsls	r2, r0, #8
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	6849      	ldr	r1, [r1, #4]
 8004a92:	0849      	lsrs	r1, r1, #1
 8004a94:	4608      	mov	r0, r1
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	1814      	adds	r4, r2, r0
 8004a9c:	eb43 0501 	adc.w	r5, r3, r1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	4620      	mov	r0, r4
 8004aac:	4629      	mov	r1, r5
 8004aae:	f7fb fbe7 	bl	8000280 <__aeabi_uldivmod>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac0:	d308      	bcc.n	8004ad4 <UART_SetConfig+0x280>
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac8:	d204      	bcs.n	8004ad4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	e0bb      	b.n	8004c4c <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	76bb      	strb	r3, [r7, #26]
 8004ad8:	e0b8      	b.n	8004c4c <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae2:	d167      	bne.n	8004bb4 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8004ae4:	7efb      	ldrb	r3, [r7, #27]
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d834      	bhi.n	8004b54 <UART_SetConfig+0x300>
 8004aea:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <UART_SetConfig+0x29c>)
 8004aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b1d 	.word	0x08004b1d
 8004af8:	08004b25 	.word	0x08004b25
 8004afc:	08004b55 	.word	0x08004b55
 8004b00:	08004b2b 	.word	0x08004b2b
 8004b04:	08004b55 	.word	0x08004b55
 8004b08:	08004b55 	.word	0x08004b55
 8004b0c:	08004b55 	.word	0x08004b55
 8004b10:	08004b33 	.word	0x08004b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b14:	f7fe f84c 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8004b18:	6178      	str	r0, [r7, #20]
        break;
 8004b1a:	e020      	b.n	8004b5e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b1c:	f7fe f85e 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8004b20:	6178      	str	r0, [r7, #20]
        break;
 8004b22:	e01c      	b.n	8004b5e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b24:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <UART_SetConfig+0x2fc>)
 8004b26:	617b      	str	r3, [r7, #20]
        break;
 8004b28:	e019      	b.n	8004b5e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2a:	f7fd ffa9 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8004b2e:	6178      	str	r0, [r7, #20]
        break;
 8004b30:	e015      	b.n	8004b5e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b36:	617b      	str	r3, [r7, #20]
        break;
 8004b38:	e011      	b.n	8004b5e <UART_SetConfig+0x30a>
 8004b3a:	bf00      	nop
 8004b3c:	efff69f3 	.word	0xefff69f3
 8004b40:	40008000 	.word	0x40008000
 8004b44:	40013800 	.word	0x40013800
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40004400 	.word	0x40004400
 8004b50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	76bb      	strb	r3, [r7, #26]
        break;
 8004b5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d073      	beq.n	8004c4c <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	005a      	lsls	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	085b      	lsrs	r3, r3, #1
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b0f      	cmp	r3, #15
 8004b7e:	d916      	bls.n	8004bae <UART_SetConfig+0x35a>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b86:	d212      	bcs.n	8004bae <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f023 030f 	bic.w	r3, r3, #15
 8004b90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	89fb      	ldrh	r3, [r7, #14]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	89fa      	ldrh	r2, [r7, #14]
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	e04e      	b.n	8004c4c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	76bb      	strb	r3, [r7, #26]
 8004bb2:	e04b      	b.n	8004c4c <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bb4:	7efb      	ldrb	r3, [r7, #27]
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d827      	bhi.n	8004c0a <UART_SetConfig+0x3b6>
 8004bba:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0x36c>)
 8004bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004bed 	.word	0x08004bed
 8004bc8:	08004bf5 	.word	0x08004bf5
 8004bcc:	08004c0b 	.word	0x08004c0b
 8004bd0:	08004bfb 	.word	0x08004bfb
 8004bd4:	08004c0b 	.word	0x08004c0b
 8004bd8:	08004c0b 	.word	0x08004c0b
 8004bdc:	08004c0b 	.word	0x08004c0b
 8004be0:	08004c03 	.word	0x08004c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be4:	f7fd ffe4 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8004be8:	6178      	str	r0, [r7, #20]
        break;
 8004bea:	e013      	b.n	8004c14 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bec:	f7fd fff6 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8004bf0:	6178      	str	r0, [r7, #20]
        break;
 8004bf2:	e00f      	b.n	8004c14 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <UART_SetConfig+0x410>)
 8004bf6:	617b      	str	r3, [r7, #20]
        break;
 8004bf8:	e00c      	b.n	8004c14 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfa:	f7fd ff41 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8004bfe:	6178      	str	r0, [r7, #20]
        break;
 8004c00:	e008      	b.n	8004c14 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c06:	617b      	str	r3, [r7, #20]
        break;
 8004c08:	e004      	b.n	8004c14 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	76bb      	strb	r3, [r7, #26]
        break;
 8004c12:	bf00      	nop
    }

    if (pclk != 0U)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d018      	beq.n	8004c4c <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	085a      	lsrs	r2, r3, #1
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	441a      	add	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b0f      	cmp	r3, #15
 8004c32:	d909      	bls.n	8004c48 <UART_SetConfig+0x3f4>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3a:	d205      	bcs.n	8004c48 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	e001      	b.n	8004c4c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c58:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bdb0      	pop	{r4, r5, r7, pc}
 8004c62:	bf00      	nop
 8004c64:	00f42400 	.word	0x00f42400

08004c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01a      	beq.n	8004d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d66:	d10a      	bne.n	8004d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dbc:	f7fc fe0a 	bl	80019d4 <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d10e      	bne.n	8004dee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f82d 	bl	8004e3e <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e023      	b.n	8004e36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d10e      	bne.n	8004e1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f817 	bl	8004e3e <UART_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e00d      	b.n	8004e36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b09c      	sub	sp, #112	; 0x70
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4e:	e0a5      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	f000 80a1 	beq.w	8004f9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5a:	f7fc fdbb 	bl	80019d4 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d302      	bcc.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d13e      	bne.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e84:	667b      	str	r3, [r7, #100]	; 0x64
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e6      	bne.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ec2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e5      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e067      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d04f      	beq.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0a:	d147      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f14:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
 8004f36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	613b      	str	r3, [r7, #16]
   return(result);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3308      	adds	r3, #8
 8004f66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f68:	623a      	str	r2, [r7, #32]
 8004f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	69f9      	ldr	r1, [r7, #28]
 8004f6e:	6a3a      	ldr	r2, [r7, #32]
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e5      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e010      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	f43f af4a 	beq.w	8004e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3770      	adds	r7, #112	; 0x70
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004fcc:	4904      	ldr	r1, [pc, #16]	; (8004fe0 <MX_FATFS_Init+0x18>)
 8004fce:	4805      	ldr	r0, [pc, #20]	; (8004fe4 <MX_FATFS_Init+0x1c>)
 8004fd0:	f002 f92e 	bl	8007230 <FATFS_LinkDriver>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <MX_FATFS_Init+0x20>)
 8004fda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004fdc:	bf00      	nop
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	2000275c 	.word	0x2000275c
 8004fe4:	20000014 	.word	0x20000014
 8004fe8:	20002760 	.word	0x20002760

08004fec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fb fc71 	bl	80008e0 <SD_disk_initialize>
 8004ffe:	4603      	mov	r3, r0
 8005000:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	4603      	mov	r3, r0
 8005012:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fb fd48 	bl	8000aac <SD_disk_status>
 800501c:	4603      	mov	r3, r0
 800501e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read (pdrv, buff, sector, count);
 8005038:	7bf8      	ldrb	r0, [r7, #15]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	f7fb fd4a 	bl	8000ad8 <SD_disk_read>
 8005044:	4603      	mov	r3, r0
 8005046:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 8005060:	7bf8      	ldrb	r0, [r7, #15]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	f7fb fda0 	bl	8000bac <SD_disk_write>
 800506c:	4603      	mov	r3, r0
 800506e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	603a      	str	r2, [r7, #0]
 8005082:	71fb      	strb	r3, [r7, #7]
 8005084:	460b      	mov	r3, r1
 8005086:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	79b9      	ldrb	r1, [r7, #6]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7fb fe10 	bl	8000cb4 <SD_disk_ioctl>
 8005094:	4603      	mov	r3, r0
 8005096:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <disk_status+0x30>)
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	79fa      	ldrb	r2, [r7, #7]
 80050b8:	4905      	ldr	r1, [pc, #20]	; (80050d0 <disk_status+0x30>)
 80050ba:	440a      	add	r2, r1
 80050bc:	7a12      	ldrb	r2, [r2, #8]
 80050be:	4610      	mov	r0, r2
 80050c0:	4798      	blx	r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000468 	.word	0x20000468

080050d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	4a0d      	ldr	r2, [pc, #52]	; (800511c <disk_initialize+0x48>)
 80050e6:	5cd3      	ldrb	r3, [r2, r3]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d111      	bne.n	8005110 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	4a0b      	ldr	r2, [pc, #44]	; (800511c <disk_initialize+0x48>)
 80050f0:	2101      	movs	r1, #1
 80050f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <disk_initialize+0x48>)
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	79fa      	ldrb	r2, [r7, #7]
 8005102:	4906      	ldr	r1, [pc, #24]	; (800511c <disk_initialize+0x48>)
 8005104:	440a      	add	r2, r1
 8005106:	7a12      	ldrb	r2, [r2, #8]
 8005108:	4610      	mov	r0, r2
 800510a:	4798      	blx	r3
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000468 	.word	0x20000468

08005120 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <disk_read+0x3c>)
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	689c      	ldr	r4, [r3, #8]
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	4a07      	ldr	r2, [pc, #28]	; (800515c <disk_read+0x3c>)
 8005140:	4413      	add	r3, r2
 8005142:	7a18      	ldrb	r0, [r3, #8]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	47a0      	blx	r4
 800514c:	4603      	mov	r3, r0
 800514e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005150:	7dfb      	ldrb	r3, [r7, #23]
}
 8005152:	4618      	mov	r0, r3
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	bd90      	pop	{r4, r7, pc}
 800515a:	bf00      	nop
 800515c:	20000468 	.word	0x20000468

08005160 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <disk_write+0x3c>)
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	68dc      	ldr	r4, [r3, #12]
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	4a07      	ldr	r2, [pc, #28]	; (800519c <disk_write+0x3c>)
 8005180:	4413      	add	r3, r2
 8005182:	7a18      	ldrb	r0, [r3, #8]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	47a0      	blx	r4
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd90      	pop	{r4, r7, pc}
 800519a:	bf00      	nop
 800519c:	20000468 	.word	0x20000468

080051a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	603a      	str	r2, [r7, #0]
 80051aa:	71fb      	strb	r3, [r7, #7]
 80051ac:	460b      	mov	r3, r1
 80051ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <disk_ioctl+0x38>)
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	79fa      	ldrb	r2, [r7, #7]
 80051be:	4906      	ldr	r1, [pc, #24]	; (80051d8 <disk_ioctl+0x38>)
 80051c0:	440a      	add	r2, r1
 80051c2:	7a10      	ldrb	r0, [r2, #8]
 80051c4:	79b9      	ldrb	r1, [r7, #6]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	4798      	blx	r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000468 	.word	0x20000468

080051dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3301      	adds	r3, #1
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	b21a      	sxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b21b      	sxth	r3, r3
 80051f8:	4313      	orrs	r3, r2
 80051fa:	b21b      	sxth	r3, r3
 80051fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80051fe:	89fb      	ldrh	r3, [r7, #14]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3303      	adds	r3, #3
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	3202      	adds	r2, #2
 8005224:	7812      	ldrb	r2, [r2, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	3201      	adds	r2, #1
 8005232:	7812      	ldrb	r2, [r2, #0]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
	return rv;
 8005244:	68fb      	ldr	r3, [r7, #12]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	460b      	mov	r3, r1
 800525c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	887a      	ldrh	r2, [r7, #2]
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	887b      	ldrh	r3, [r7, #2]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	887a      	ldrh	r2, [r7, #2]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	0a1b      	lsrs	r3, r3, #8
 80052a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	0a1b      	lsrs	r3, r3, #8
 80052c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	617a      	str	r2, [r7, #20]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3b01      	subs	r3, #1
 8005300:	607b      	str	r3, [r7, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f3      	bne.n	80052f0 <mem_set+0x10>
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005316:	b480      	push	{r7}
 8005318:	b089      	sub	sp, #36	; 0x24
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	61fa      	str	r2, [r7, #28]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	4619      	mov	r1, r3
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	61ba      	str	r2, [r7, #24]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	1acb      	subs	r3, r1, r3
 8005342:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3b01      	subs	r3, #1
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <mem_cmp+0x40>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0eb      	beq.n	800532e <mem_cmp+0x18>

	return r;
 8005356:	697b      	ldr	r3, [r7, #20]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3724      	adds	r7, #36	; 0x24
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800536e:	e002      	b.n	8005376 <chk_chr+0x12>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3301      	adds	r3, #1
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <chk_chr+0x26>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	4293      	cmp	r3, r2
 8005388:	d1f2      	bne.n	8005370 <chk_chr+0xc>
	return *str;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	781b      	ldrb	r3, [r3, #0]
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e01f      	b.n	80053ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80053ac:	4a41      	ldr	r2, [pc, #260]	; (80054b4 <inc_lock+0x118>)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	4413      	add	r3, r2
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d113      	bne.n	80053e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80053be:	4a3d      	ldr	r2, [pc, #244]	; (80054b4 <inc_lock+0x118>)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	4413      	add	r3, r2
 80053c6:	3304      	adds	r3, #4
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d109      	bne.n	80053e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80053d2:	4a38      	ldr	r2, [pc, #224]	; (80054b4 <inc_lock+0x118>)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	4413      	add	r3, r2
 80053da:	3308      	adds	r3, #8
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d006      	beq.n	80053f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d9dc      	bls.n	80053ac <inc_lock+0x10>
 80053f2:	e000      	b.n	80053f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80053f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d132      	bne.n	8005462 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e002      	b.n	8005408 <inc_lock+0x6c>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d806      	bhi.n	800541c <inc_lock+0x80>
 800540e:	4a29      	ldr	r2, [pc, #164]	; (80054b4 <inc_lock+0x118>)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	4413      	add	r3, r2
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f2      	bne.n	8005402 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d101      	bne.n	8005426 <inc_lock+0x8a>
 8005422:	2300      	movs	r3, #0
 8005424:	e040      	b.n	80054a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4922      	ldr	r1, [pc, #136]	; (80054b4 <inc_lock+0x118>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	440b      	add	r3, r1
 8005432:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	491e      	ldr	r1, [pc, #120]	; (80054b4 <inc_lock+0x118>)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	440b      	add	r3, r1
 8005440:	3304      	adds	r3, #4
 8005442:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695a      	ldr	r2, [r3, #20]
 8005448:	491a      	ldr	r1, [pc, #104]	; (80054b4 <inc_lock+0x118>)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	440b      	add	r3, r1
 8005450:	3308      	adds	r3, #8
 8005452:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005454:	4a17      	ldr	r2, [pc, #92]	; (80054b4 <inc_lock+0x118>)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	4413      	add	r3, r2
 800545c:	330c      	adds	r3, #12
 800545e:	2200      	movs	r2, #0
 8005460:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <inc_lock+0xe0>
 8005468:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <inc_lock+0x118>)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	4413      	add	r3, r2
 8005470:	330c      	adds	r3, #12
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <inc_lock+0xe0>
 8005478:	2300      	movs	r3, #0
 800547a:	e015      	b.n	80054a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d108      	bne.n	8005494 <inc_lock+0xf8>
 8005482:	4a0c      	ldr	r2, [pc, #48]	; (80054b4 <inc_lock+0x118>)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	4413      	add	r3, r2
 800548a:	330c      	adds	r3, #12
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	3301      	adds	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	e001      	b.n	8005498 <inc_lock+0xfc>
 8005494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005498:	4906      	ldr	r1, [pc, #24]	; (80054b4 <inc_lock+0x118>)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	440b      	add	r3, r1
 80054a0:	330c      	adds	r3, #12
 80054a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3301      	adds	r3, #1
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20000248 	.word	0x20000248

080054b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e010      	b.n	80054e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80054c6:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <clear_lock+0x44>)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	4413      	add	r3, r2
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d105      	bne.n	80054e2 <clear_lock+0x2a>
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <clear_lock+0x44>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	4413      	add	r3, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3301      	adds	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d9eb      	bls.n	80054c6 <clear_lock+0xe>
	}
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000248 	.word	0x20000248

08005500 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	78db      	ldrb	r3, [r3, #3]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d034      	beq.n	800557e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005518:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	7858      	ldrb	r0, [r3, #1]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005524:	2301      	movs	r3, #1
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	f7ff fe1a 	bl	8005160 <disk_write>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
 8005536:	e022      	b.n	800557e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	1ad2      	subs	r2, r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	429a      	cmp	r2, r3
 800554c:	d217      	bcs.n	800557e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	789b      	ldrb	r3, [r3, #2]
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	e010      	b.n	8005578 <sync_window+0x78>
					wsect += fs->fsize;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4413      	add	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	7858      	ldrb	r0, [r3, #1]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800556a:	2301      	movs	r3, #1
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	f7ff fdf7 	bl	8005160 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	3b01      	subs	r3, #1
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d8eb      	bhi.n	8005556 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d01b      	beq.n	80055d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ffad 	bl	8005500 <sync_window>
 80055a6:	4603      	mov	r3, r0
 80055a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d113      	bne.n	80055d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	7858      	ldrb	r0, [r3, #1]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055ba:	2301      	movs	r3, #1
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	f7ff fdaf 	bl	8005120 <disk_read>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295
 80055cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	3b02      	subs	r3, #2
 80055f0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	3b02      	subs	r3, #2
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d301      	bcc.n	8005602 <clust2sect+0x20>
 80055fe:	2300      	movs	r3, #0
 8005600:	e008      	b.n	8005614 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	895b      	ldrh	r3, [r3, #10]
 8005606:	461a      	mov	r2, r3
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	fb03 f202 	mul.w	r2, r3, r2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4413      	add	r3, r2
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d904      	bls.n	8005640 <get_fat+0x20>
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005640:	2301      	movs	r3, #1
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e0bb      	b.n	80057be <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005646:	f04f 33ff 	mov.w	r3, #4294967295
 800564a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b03      	cmp	r3, #3
 8005652:	f000 8083 	beq.w	800575c <get_fat+0x13c>
 8005656:	2b03      	cmp	r3, #3
 8005658:	f300 80a7 	bgt.w	80057aa <get_fat+0x18a>
 800565c:	2b01      	cmp	r3, #1
 800565e:	d002      	beq.n	8005666 <get_fat+0x46>
 8005660:	2b02      	cmp	r3, #2
 8005662:	d056      	beq.n	8005712 <get_fat+0xf2>
 8005664:	e0a1      	b.n	80057aa <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	899b      	ldrh	r3, [r3, #12]
 800567c:	4619      	mov	r1, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	fbb3 f3f1 	udiv	r3, r3, r1
 8005684:	4413      	add	r3, r2
 8005686:	4619      	mov	r1, r3
 8005688:	6938      	ldr	r0, [r7, #16]
 800568a:	f7ff ff7d 	bl	8005588 <move_window>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f040 808d 	bne.w	80057b0 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	60fa      	str	r2, [r7, #12]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	8992      	ldrh	r2, [r2, #12]
 80056a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80056a4:	fb02 f201 	mul.w	r2, r2, r1
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056b2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	899b      	ldrh	r3, [r3, #12]
 80056bc:	4619      	mov	r1, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80056c4:	4413      	add	r3, r2
 80056c6:	4619      	mov	r1, r3
 80056c8:	6938      	ldr	r0, [r7, #16]
 80056ca:	f7ff ff5d 	bl	8005588 <move_window>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d16f      	bne.n	80057b4 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	899b      	ldrh	r3, [r3, #12]
 80056d8:	461a      	mov	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80056e0:	fb02 f201 	mul.w	r2, r2, r1
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4413      	add	r3, r2
 80056ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	461a      	mov	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <get_fat+0xe8>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	e002      	b.n	800570e <get_fat+0xee>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570e:	617b      	str	r3, [r7, #20]
			break;
 8005710:	e055      	b.n	80057be <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	899b      	ldrh	r3, [r3, #12]
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	b29b      	uxth	r3, r3
 800571e:	4619      	mov	r1, r3
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	fbb3 f3f1 	udiv	r3, r3, r1
 8005726:	4413      	add	r3, r2
 8005728:	4619      	mov	r1, r3
 800572a:	6938      	ldr	r0, [r7, #16]
 800572c:	f7ff ff2c 	bl	8005588 <move_window>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d140      	bne.n	80057b8 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	8992      	ldrh	r2, [r2, #12]
 8005744:	fbb3 f0f2 	udiv	r0, r3, r2
 8005748:	fb02 f200 	mul.w	r2, r2, r0
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	440b      	add	r3, r1
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fd43 	bl	80051dc <ld_word>
 8005756:	4603      	mov	r3, r0
 8005758:	617b      	str	r3, [r7, #20]
			break;
 800575a:	e030      	b.n	80057be <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	899b      	ldrh	r3, [r3, #12]
 8005764:	089b      	lsrs	r3, r3, #2
 8005766:	b29b      	uxth	r3, r3
 8005768:	4619      	mov	r1, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005770:	4413      	add	r3, r2
 8005772:	4619      	mov	r1, r3
 8005774:	6938      	ldr	r0, [r7, #16]
 8005776:	f7ff ff07 	bl	8005588 <move_window>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d11d      	bne.n	80057bc <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	8992      	ldrh	r2, [r2, #12]
 800578e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005792:	fb02 f200 	mul.w	r2, r2, r0
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	440b      	add	r3, r1
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fd36 	bl	800520c <ld_dword>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057a6:	617b      	str	r3, [r7, #20]
			break;
 80057a8:	e009      	b.n	80057be <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80057aa:	2301      	movs	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	e006      	b.n	80057be <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057b0:	bf00      	nop
 80057b2:	e004      	b.n	80057be <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057b4:	bf00      	nop
 80057b6:	e002      	b.n	80057be <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057b8:	bf00      	nop
 80057ba:	e000      	b.n	80057be <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057bc:	bf00      	nop
		}
	}

	return val;
 80057be:	697b      	ldr	r3, [r7, #20]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b089      	sub	sp, #36	; 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80057d4:	2302      	movs	r3, #2
 80057d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	f240 8102 	bls.w	80059e4 <put_fat+0x21c>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	f080 80fc 	bcs.w	80059e4 <put_fat+0x21c>
		switch (fs->fs_type) {
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	f000 80b6 	beq.w	8005962 <put_fat+0x19a>
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	f300 80fd 	bgt.w	80059f6 <put_fat+0x22e>
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d003      	beq.n	8005808 <put_fat+0x40>
 8005800:	2b02      	cmp	r3, #2
 8005802:	f000 8083 	beq.w	800590c <put_fat+0x144>
 8005806:	e0f6      	b.n	80059f6 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4413      	add	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	899b      	ldrh	r3, [r3, #12]
 800581e:	4619      	mov	r1, r3
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	fbb3 f3f1 	udiv	r3, r3, r1
 8005826:	4413      	add	r3, r2
 8005828:	4619      	mov	r1, r3
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff feac 	bl	8005588 <move_window>
 8005830:	4603      	mov	r3, r0
 8005832:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005834:	7ffb      	ldrb	r3, [r7, #31]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f040 80d6 	bne.w	80059e8 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	61ba      	str	r2, [r7, #24]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	8992      	ldrh	r2, [r2, #12]
 800584c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005850:	fb02 f200 	mul.w	r2, r2, r0
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	440b      	add	r3, r1
 8005858:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00d      	beq.n	8005880 <put_fat+0xb8>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b25b      	sxtb	r3, r3
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	b25a      	sxtb	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	b25b      	sxtb	r3, r3
 8005878:	4313      	orrs	r3, r2
 800587a:	b25b      	sxtb	r3, r3
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e001      	b.n	8005884 <put_fat+0xbc>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	899b      	ldrh	r3, [r3, #12]
 8005896:	4619      	mov	r1, r3
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	fbb3 f3f1 	udiv	r3, r3, r1
 800589e:	4413      	add	r3, r2
 80058a0:	4619      	mov	r1, r3
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff fe70 	bl	8005588 <move_window>
 80058a8:	4603      	mov	r3, r0
 80058aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058ac:	7ffb      	ldrb	r3, [r7, #31]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f040 809c 	bne.w	80059ec <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	899b      	ldrh	r3, [r3, #12]
 80058be:	461a      	mov	r2, r3
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80058c6:	fb02 f200 	mul.w	r2, r2, r0
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	440b      	add	r3, r1
 80058ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <put_fat+0x11a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	e00e      	b.n	8005900 <put_fat+0x138>
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	b25b      	sxtb	r3, r3
 80058e8:	f023 030f 	bic.w	r3, r3, #15
 80058ec:	b25a      	sxtb	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	0a1b      	lsrs	r3, r3, #8
 80058f2:	b25b      	sxtb	r3, r3
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	b25b      	sxtb	r3, r3
 80058fa:	4313      	orrs	r3, r2
 80058fc:	b25b      	sxtb	r3, r3
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	70da      	strb	r2, [r3, #3]
			break;
 800590a:	e074      	b.n	80059f6 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	899b      	ldrh	r3, [r3, #12]
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	b29b      	uxth	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005920:	4413      	add	r3, r2
 8005922:	4619      	mov	r1, r3
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff fe2f 	bl	8005588 <move_window>
 800592a:	4603      	mov	r3, r0
 800592c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800592e:	7ffb      	ldrb	r3, [r7, #31]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d15d      	bne.n	80059f0 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	8992      	ldrh	r2, [r2, #12]
 8005942:	fbb3 f0f2 	udiv	r0, r3, r2
 8005946:	fb02 f200 	mul.w	r2, r2, r0
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	440b      	add	r3, r1
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	b292      	uxth	r2, r2
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff fc7c 	bl	8005252 <st_word>
			fs->wflag = 1;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	70da      	strb	r2, [r3, #3]
			break;
 8005960:	e049      	b.n	80059f6 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	899b      	ldrh	r3, [r3, #12]
 800596a:	089b      	lsrs	r3, r3, #2
 800596c:	b29b      	uxth	r3, r3
 800596e:	4619      	mov	r1, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	fbb3 f3f1 	udiv	r3, r3, r1
 8005976:	4413      	add	r3, r2
 8005978:	4619      	mov	r1, r3
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fe04 	bl	8005588 <move_window>
 8005980:	4603      	mov	r3, r0
 8005982:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005984:	7ffb      	ldrb	r3, [r7, #31]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d134      	bne.n	80059f4 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	8992      	ldrh	r2, [r2, #12]
 800599e:	fbb3 f0f2 	udiv	r0, r3, r2
 80059a2:	fb02 f200 	mul.w	r2, r2, r0
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	440b      	add	r3, r1
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fc2e 	bl	800520c <ld_dword>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80059b6:	4323      	orrs	r3, r4
 80059b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	8992      	ldrh	r2, [r2, #12]
 80059c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80059cc:	fb02 f200 	mul.w	r2, r2, r0
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	440b      	add	r3, r1
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fc56 	bl	8005288 <st_dword>
			fs->wflag = 1;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	70da      	strb	r2, [r3, #3]
			break;
 80059e2:	e008      	b.n	80059f6 <put_fat+0x22e>
		}
	}
 80059e4:	bf00      	nop
 80059e6:	e006      	b.n	80059f6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80059e8:	bf00      	nop
 80059ea:	e004      	b.n	80059f6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80059ec:	bf00      	nop
 80059ee:	e002      	b.n	80059f6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80059f0:	bf00      	nop
 80059f2:	e000      	b.n	80059f6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80059f4:	bf00      	nop
	return res;
 80059f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3724      	adds	r7, #36	; 0x24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd90      	pop	{r4, r7, pc}

08005a00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10d      	bne.n	8005a32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <create_chain+0x2c>
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d31b      	bcc.n	8005a64 <create_chain+0x64>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	e018      	b.n	8005a64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff fdf3 	bl	8005620 <get_fat>
 8005a3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d801      	bhi.n	8005a46 <create_chain+0x46>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e070      	b.n	8005b28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d101      	bne.n	8005a52 <create_chain+0x52>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	e06a      	b.n	8005b28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d201      	bcs.n	8005a60 <create_chain+0x60>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	e063      	b.n	8005b28 <create_chain+0x128>
		scl = clst;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d307      	bcc.n	8005a88 <create_chain+0x88>
				ncl = 2;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d901      	bls.n	8005a88 <create_chain+0x88>
 8005a84:	2300      	movs	r3, #0
 8005a86:	e04f      	b.n	8005b28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005a88:	69f9      	ldr	r1, [r7, #28]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fdc8 	bl	8005620 <get_fat>
 8005a90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00e      	beq.n	8005ab6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d003      	beq.n	8005aa6 <create_chain+0xa6>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d101      	bne.n	8005aaa <create_chain+0xaa>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	e03e      	b.n	8005b28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d1da      	bne.n	8005a68 <create_chain+0x68>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e038      	b.n	8005b28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005ab6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8005abc:	69f9      	ldr	r1, [r7, #28]
 8005abe:	6938      	ldr	r0, [r7, #16]
 8005ac0:	f7ff fe82 	bl	80057c8 <put_fat>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <create_chain+0xe2>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d006      	beq.n	8005ae2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6938      	ldr	r0, [r7, #16]
 8005ada:	f7ff fe75 	bl	80057c8 <put_fat>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d116      	bne.n	8005b16 <create_chain+0x116>
		fs->last_clst = ncl;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	3b02      	subs	r3, #2
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d804      	bhi.n	8005b06 <create_chain+0x106>
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	1e5a      	subs	r2, r3, #1
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	791b      	ldrb	r3, [r3, #4]
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	711a      	strb	r2, [r3, #4]
 8005b14:	e007      	b.n	8005b26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d102      	bne.n	8005b22 <create_chain+0x122>
 8005b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b20:	e000      	b.n	8005b24 <create_chain+0x124>
 8005b22:	2301      	movs	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005b26:	69fb      	ldr	r3, [r7, #28]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b46:	d204      	bcs.n	8005b52 <dir_sdi+0x22>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005b52:	2302      	movs	r3, #2
 8005b54:	e071      	b.n	8005c3a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <dir_sdi+0x46>
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d902      	bls.n	8005b76 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10c      	bne.n	8005b96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	8912      	ldrh	r2, [r2, #8]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d301      	bcc.n	8005b8c <dir_sdi+0x5c>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e056      	b.n	8005c3a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	61da      	str	r2, [r3, #28]
 8005b94:	e02d      	b.n	8005bf2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	895b      	ldrh	r3, [r3, #10]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	899b      	ldrh	r3, [r3, #12]
 8005ba0:	fb03 f302 	mul.w	r3, r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ba6:	e019      	b.n	8005bdc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6979      	ldr	r1, [r7, #20]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff fd37 	bl	8005620 <get_fat>
 8005bb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d101      	bne.n	8005bc0 <dir_sdi+0x90>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e03c      	b.n	8005c3a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d904      	bls.n	8005bd0 <dir_sdi+0xa0>
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d301      	bcc.n	8005bd4 <dir_sdi+0xa4>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e032      	b.n	8005c3a <dir_sdi+0x10a>
			ofs -= csz;
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d2e1      	bcs.n	8005ba8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005be4:	6979      	ldr	r1, [r7, #20]
 8005be6:	6938      	ldr	r0, [r7, #16]
 8005be8:	f7ff fcfb 	bl	80055e2 <clust2sect>
 8005bec:	4602      	mov	r2, r0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <dir_sdi+0xd4>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e01a      	b.n	8005c3a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	899b      	ldrh	r3, [r3, #12]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	899b      	ldrh	r3, [r3, #12]
 8005c24:	461a      	mov	r2, r3
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c2c:	fb02 f200 	mul.w	r2, r2, r0
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	18ca      	adds	r2, r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b086      	sub	sp, #24
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	3320      	adds	r3, #32
 8005c58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <dir_next+0x28>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c68:	d301      	bcc.n	8005c6e <dir_next+0x2c>
 8005c6a:	2304      	movs	r3, #4
 8005c6c:	e0bb      	b.n	8005de6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	899b      	ldrh	r3, [r3, #12]
 8005c72:	461a      	mov	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c7a:	fb02 f201 	mul.w	r2, r2, r1
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f040 809d 	bne.w	8005dc0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10b      	bne.n	8005cb0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	8912      	ldrh	r2, [r2, #8]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	f0c0 808d 	bcc.w	8005dc0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	61da      	str	r2, [r3, #28]
 8005cac:	2304      	movs	r3, #4
 8005cae:	e09a      	b.n	8005de6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	899b      	ldrh	r3, [r3, #12]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	8952      	ldrh	r2, [r2, #10]
 8005cc0:	3a01      	subs	r2, #1
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d17b      	bne.n	8005dc0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f7ff fca5 	bl	8005620 <get_fat>
 8005cd6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d801      	bhi.n	8005ce2 <dir_next+0xa0>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e081      	b.n	8005de6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d101      	bne.n	8005cee <dir_next+0xac>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e07b      	b.n	8005de6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d359      	bcc.n	8005dac <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	61da      	str	r2, [r3, #28]
 8005d04:	2304      	movs	r3, #4
 8005d06:	e06e      	b.n	8005de6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f7ff fe75 	bl	8005a00 <create_chain>
 8005d16:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <dir_next+0xe0>
 8005d1e:	2307      	movs	r3, #7
 8005d20:	e061      	b.n	8005de6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <dir_next+0xea>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e05c      	b.n	8005de6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d101      	bne.n	8005d38 <dir_next+0xf6>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e056      	b.n	8005de6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff fbe1 	bl	8005500 <sync_window>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <dir_next+0x106>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e04e      	b.n	8005de6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	899b      	ldrh	r3, [r3, #12]
 8005d52:	461a      	mov	r2, r3
 8005d54:	2100      	movs	r1, #0
 8005d56:	f7ff fac3 	bl	80052e0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	6979      	ldr	r1, [r7, #20]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f7ff fc3e 	bl	80055e2 <clust2sect>
 8005d66:	4602      	mov	r2, r0
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	635a      	str	r2, [r3, #52]	; 0x34
 8005d6c:	e012      	b.n	8005d94 <dir_next+0x152>
						fs->wflag = 1;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff fbc3 	bl	8005500 <sync_window>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <dir_next+0x142>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e030      	b.n	8005de6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	3301      	adds	r3, #1
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	635a      	str	r2, [r3, #52]	; 0x34
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	895b      	ldrh	r3, [r3, #10]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d3e6      	bcc.n	8005d6e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad2      	subs	r2, r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff fc14 	bl	80055e2 <clust2sect>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	899b      	ldrh	r3, [r3, #12]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dd8:	fb02 f200 	mul.w	r2, r2, r0
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	18ca      	adds	r2, r1, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	331a      	adds	r3, #26
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff f9ed 	bl	80051dc <ld_word>
 8005e02:	4603      	mov	r3, r0
 8005e04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d109      	bne.n	8005e22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff f9e2 	bl	80051dc <ld_word>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005e22:	68fb      	ldr	r3, [r7, #12]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	331a      	adds	r3, #26
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff f9ce 	bl	80051dc <ld_word>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <cmp_lfn+0x1e>
 8005e46:	2300      	movs	r3, #0
 8005e48:	e059      	b.n	8005efe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e52:	1e5a      	subs	r2, r3, #1
 8005e54:	4613      	mov	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005e60:	2301      	movs	r3, #1
 8005e62:	81fb      	strh	r3, [r7, #14]
 8005e64:	2300      	movs	r3, #0
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	e033      	b.n	8005ed2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005e6a:	4a27      	ldr	r2, [pc, #156]	; (8005f08 <cmp_lfn+0xdc>)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	4413      	add	r3, r2
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff f9af 	bl	80051dc <ld_word>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005e82:	89fb      	ldrh	r3, [r7, #14]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01a      	beq.n	8005ebe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2bfe      	cmp	r3, #254	; 0xfe
 8005e8c:	d812      	bhi.n	8005eb4 <cmp_lfn+0x88>
 8005e8e:	89bb      	ldrh	r3, [r7, #12]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 fa19 	bl	80072c8 <ff_wtoupper>
 8005e96:	4603      	mov	r3, r0
 8005e98:	461c      	mov	r4, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	617a      	str	r2, [r7, #20]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fa0d 	bl	80072c8 <ff_wtoupper>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d001      	beq.n	8005eb8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e022      	b.n	8005efe <cmp_lfn+0xd2>
			}
			wc = uc;
 8005eb8:	89bb      	ldrh	r3, [r7, #12]
 8005eba:	81fb      	strh	r3, [r7, #14]
 8005ebc:	e006      	b.n	8005ecc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005ebe:	89bb      	ldrh	r3, [r7, #12]
 8005ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d001      	beq.n	8005ecc <cmp_lfn+0xa0>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e018      	b.n	8005efe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b0c      	cmp	r3, #12
 8005ed6:	d9c8      	bls.n	8005e6a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <cmp_lfn+0xd0>
 8005ee4:	89fb      	ldrh	r3, [r7, #14]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <cmp_lfn+0xd0>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <cmp_lfn+0xd0>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005efc:	2301      	movs	r3, #1
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd90      	pop	{r4, r7, pc}
 8005f06:	bf00      	nop
 8005f08:	08007e5c 	.word	0x08007e5c

08005f0c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	331a      	adds	r3, #26
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff f95e 	bl	80051dc <ld_word>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <pick_lfn+0x1e>
 8005f26:	2300      	movs	r3, #0
 8005f28:	e04d      	b.n	8005fc6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f32:	1e5a      	subs	r2, r3, #1
 8005f34:	4613      	mov	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f40:	2301      	movs	r3, #1
 8005f42:	81fb      	strh	r3, [r7, #14]
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	e028      	b.n	8005f9c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005f4a:	4a21      	ldr	r2, [pc, #132]	; (8005fd0 <pick_lfn+0xc4>)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	4413      	add	r3, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff f93f 	bl	80051dc <ld_word>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005f62:	89fb      	ldrh	r3, [r7, #14]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00f      	beq.n	8005f88 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2bfe      	cmp	r3, #254	; 0xfe
 8005f6c:	d901      	bls.n	8005f72 <pick_lfn+0x66>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e029      	b.n	8005fc6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005f72:	89bb      	ldrh	r3, [r7, #12]
 8005f74:	81fb      	strh	r3, [r7, #14]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	617a      	str	r2, [r7, #20]
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4413      	add	r3, r2
 8005f82:	89fa      	ldrh	r2, [r7, #14]
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	e006      	b.n	8005f96 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005f88:	89bb      	ldrh	r3, [r7, #12]
 8005f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d001      	beq.n	8005f96 <pick_lfn+0x8a>
 8005f92:	2300      	movs	r3, #0
 8005f94:	e017      	b.n	8005fc6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b0c      	cmp	r3, #12
 8005fa0:	d9d3      	bls.n	8005f4a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2bfe      	cmp	r3, #254	; 0xfe
 8005fb2:	d901      	bls.n	8005fb8 <pick_lfn+0xac>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e006      	b.n	8005fc6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005fc4:	2301      	movs	r3, #1
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	08007e5c 	.word	0x08007e5c

08005fd4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005fe0:	230b      	movs	r3, #11
 8005fe2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	0852      	lsrs	r2, r2, #1
 8005fea:	01db      	lsls	r3, r3, #7
 8005fec:	4313      	orrs	r3, r2
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	1c59      	adds	r1, r3, #1
 8005ff4:	6079      	str	r1, [r7, #4]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1ed      	bne.n	8005fe4 <sum_sfn+0x10>
	return sum;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006020:	2304      	movs	r3, #4
 8006022:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800602a:	23ff      	movs	r3, #255	; 0xff
 800602c:	757b      	strb	r3, [r7, #21]
 800602e:	23ff      	movs	r3, #255	; 0xff
 8006030:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006032:	e081      	b.n	8006138 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	4619      	mov	r1, r3
 800603a:	6938      	ldr	r0, [r7, #16]
 800603c:	f7ff faa4 	bl	8005588 <move_window>
 8006040:	4603      	mov	r3, r0
 8006042:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d17c      	bne.n	8006144 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006052:	7dbb      	ldrb	r3, [r7, #22]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d102      	bne.n	800605e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006058:	2304      	movs	r3, #4
 800605a:	75fb      	strb	r3, [r7, #23]
 800605c:	e077      	b.n	800614e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	330b      	adds	r3, #11
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800606a:	73fb      	strb	r3, [r7, #15]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	7bfa      	ldrb	r2, [r7, #15]
 8006070:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006072:	7dbb      	ldrb	r3, [r7, #22]
 8006074:	2be5      	cmp	r3, #229	; 0xe5
 8006076:	d00e      	beq.n	8006096 <dir_read+0x80>
 8006078:	7dbb      	ldrb	r3, [r7, #22]
 800607a:	2b2e      	cmp	r3, #46	; 0x2e
 800607c:	d00b      	beq.n	8006096 <dir_read+0x80>
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	f023 0320 	bic.w	r3, r3, #32
 8006084:	2b08      	cmp	r3, #8
 8006086:	bf0c      	ite	eq
 8006088:	2301      	moveq	r3, #1
 800608a:	2300      	movne	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	4293      	cmp	r3, r2
 8006094:	d002      	beq.n	800609c <dir_read+0x86>
				ord = 0xFF;
 8006096:	23ff      	movs	r3, #255	; 0xff
 8006098:	757b      	strb	r3, [r7, #21]
 800609a:	e044      	b.n	8006126 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b0f      	cmp	r3, #15
 80060a0:	d12f      	bne.n	8006102 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80060a2:	7dbb      	ldrb	r3, [r7, #22]
 80060a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00d      	beq.n	80060c8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	7b5b      	ldrb	r3, [r3, #13]
 80060b2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80060b4:	7dbb      	ldrb	r3, [r7, #22]
 80060b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ba:	75bb      	strb	r3, [r7, #22]
 80060bc:	7dbb      	ldrb	r3, [r7, #22]
 80060be:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695a      	ldr	r2, [r3, #20]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80060c8:	7dba      	ldrb	r2, [r7, #22]
 80060ca:	7d7b      	ldrb	r3, [r7, #21]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d115      	bne.n	80060fc <dir_read+0xe6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	330d      	adds	r3, #13
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	7d3a      	ldrb	r2, [r7, #20]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d10e      	bne.n	80060fc <dir_read+0xe6>
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7ff ff0f 	bl	8005f0c <pick_lfn>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <dir_read+0xe6>
 80060f4:	7d7b      	ldrb	r3, [r7, #21]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	e000      	b.n	80060fe <dir_read+0xe8>
 80060fc:	23ff      	movs	r3, #255	; 0xff
 80060fe:	757b      	strb	r3, [r7, #21]
 8006100:	e011      	b.n	8006126 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006102:	7d7b      	ldrb	r3, [r7, #21]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <dir_read+0x106>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff61 	bl	8005fd4 <sum_sfn>
 8006112:	4603      	mov	r3, r0
 8006114:	461a      	mov	r2, r3
 8006116:	7d3b      	ldrb	r3, [r7, #20]
 8006118:	4293      	cmp	r3, r2
 800611a:	d015      	beq.n	8006148 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f04f 32ff 	mov.w	r2, #4294967295
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8006124:	e010      	b.n	8006148 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006126:	2100      	movs	r1, #0
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff fd8a 	bl	8005c42 <dir_next>
 800612e:	4603      	mov	r3, r0
 8006130:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d109      	bne.n	800614c <dir_read+0x136>
	while (dp->sect) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f47f af79 	bne.w	8006034 <dir_read+0x1e>
 8006142:	e004      	b.n	800614e <dir_read+0x138>
		if (res != FR_OK) break;
 8006144:	bf00      	nop
 8006146:	e002      	b.n	800614e <dir_read+0x138>
					break;
 8006148:	bf00      	nop
 800614a:	e000      	b.n	800614e <dir_read+0x138>
		if (res != FR_OK) break;
 800614c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <dir_read+0x144>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	61da      	str	r2, [r3, #28]
	return res;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006172:	2100      	movs	r1, #0
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff fcdb 	bl	8005b30 <dir_sdi>
 800617a:	4603      	mov	r3, r0
 800617c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <dir_find+0x24>
 8006184:	7dfb      	ldrb	r3, [r7, #23]
 8006186:	e0a9      	b.n	80062dc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006188:	23ff      	movs	r3, #255	; 0xff
 800618a:	753b      	strb	r3, [r7, #20]
 800618c:	7d3b      	ldrb	r3, [r7, #20]
 800618e:	757b      	strb	r3, [r7, #21]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f04f 32ff 	mov.w	r2, #4294967295
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	4619      	mov	r1, r3
 800619e:	6938      	ldr	r0, [r7, #16]
 80061a0:	f7ff f9f2 	bl	8005588 <move_window>
 80061a4:	4603      	mov	r3, r0
 80061a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 8090 	bne.w	80062d0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80061b8:	7dbb      	ldrb	r3, [r7, #22]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <dir_find+0x60>
 80061be:	2304      	movs	r3, #4
 80061c0:	75fb      	strb	r3, [r7, #23]
 80061c2:	e08a      	b.n	80062da <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	330b      	adds	r3, #11
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d0:	73fb      	strb	r3, [r7, #15]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	7bfa      	ldrb	r2, [r7, #15]
 80061d6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80061d8:	7dbb      	ldrb	r3, [r7, #22]
 80061da:	2be5      	cmp	r3, #229	; 0xe5
 80061dc:	d007      	beq.n	80061ee <dir_find+0x8a>
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d009      	beq.n	80061fc <dir_find+0x98>
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	2b0f      	cmp	r3, #15
 80061ec:	d006      	beq.n	80061fc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80061ee:	23ff      	movs	r3, #255	; 0xff
 80061f0:	757b      	strb	r3, [r7, #21]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
 80061fa:	e05e      	b.n	80062ba <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b0f      	cmp	r3, #15
 8006200:	d136      	bne.n	8006270 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d154      	bne.n	80062ba <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006210:	7dbb      	ldrb	r3, [r7, #22]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00d      	beq.n	8006236 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	7b5b      	ldrb	r3, [r3, #13]
 8006220:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006222:	7dbb      	ldrb	r3, [r7, #22]
 8006224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006228:	75bb      	strb	r3, [r7, #22]
 800622a:	7dbb      	ldrb	r3, [r7, #22]
 800622c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006236:	7dba      	ldrb	r2, [r7, #22]
 8006238:	7d7b      	ldrb	r3, [r7, #21]
 800623a:	429a      	cmp	r2, r3
 800623c:	d115      	bne.n	800626a <dir_find+0x106>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	330d      	adds	r3, #13
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	7d3a      	ldrb	r2, [r7, #20]
 8006248:	429a      	cmp	r2, r3
 800624a:	d10e      	bne.n	800626a <dir_find+0x106>
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f7ff fde8 	bl	8005e2c <cmp_lfn>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <dir_find+0x106>
 8006262:	7d7b      	ldrb	r3, [r7, #21]
 8006264:	3b01      	subs	r3, #1
 8006266:	b2db      	uxtb	r3, r3
 8006268:	e000      	b.n	800626c <dir_find+0x108>
 800626a:	23ff      	movs	r3, #255	; 0xff
 800626c:	757b      	strb	r3, [r7, #21]
 800626e:	e024      	b.n	80062ba <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006270:	7d7b      	ldrb	r3, [r7, #21]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <dir_find+0x126>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff feaa 	bl	8005fd4 <sum_sfn>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	7d3b      	ldrb	r3, [r7, #20]
 8006286:	4293      	cmp	r3, r2
 8006288:	d024      	beq.n	80062d4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <dir_find+0x14a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a18      	ldr	r0, [r3, #32]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3324      	adds	r3, #36	; 0x24
 80062a0:	220b      	movs	r2, #11
 80062a2:	4619      	mov	r1, r3
 80062a4:	f7ff f837 	bl	8005316 <mem_cmp>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d014      	beq.n	80062d8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80062ae:	23ff      	movs	r3, #255	; 0xff
 80062b0:	757b      	strb	r3, [r7, #21]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f04f 32ff 	mov.w	r2, #4294967295
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80062ba:	2100      	movs	r1, #0
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fcc0 	bl	8005c42 <dir_next>
 80062c2:	4603      	mov	r3, r0
 80062c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f43f af65 	beq.w	8006198 <dir_find+0x34>
 80062ce:	e004      	b.n	80062da <dir_find+0x176>
		if (res != FR_OK) break;
 80062d0:	bf00      	nop
 80062d2:	e002      	b.n	80062da <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80062d4:	bf00      	nop
 80062d6:	e000      	b.n	80062da <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80062d8:	bf00      	nop

	return res;
 80062da:	7dfb      	ldrb	r3, [r7, #23]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2200      	movs	r2, #0
 80062f8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80c9 	beq.w	8006496 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d032      	beq.n	8006374 <get_fileinfo+0x90>
			i = j = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006316:	e01b      	b.n	8006350 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006318:	89fb      	ldrh	r3, [r7, #14]
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f000 ff97 	bl	8007250 <ff_convert>
 8006322:	4603      	mov	r3, r0
 8006324:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006326:	89fb      	ldrh	r3, [r7, #14]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <get_fileinfo+0x4e>
 800632c:	2300      	movs	r3, #0
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	e01a      	b.n	8006368 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2bfe      	cmp	r3, #254	; 0xfe
 8006336:	d902      	bls.n	800633e <get_fileinfo+0x5a>
 8006338:	2300      	movs	r3, #0
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	e014      	b.n	8006368 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	61fa      	str	r2, [r7, #28]
 8006344:	89fa      	ldrh	r2, [r7, #14]
 8006346:	b2d1      	uxtb	r1, r2
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	4413      	add	r3, r2
 800634c:	460a      	mov	r2, r1
 800634e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	61b9      	str	r1, [r7, #24]
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4413      	add	r3, r2
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	81fb      	strh	r3, [r7, #14]
 8006362:	89fb      	ldrh	r3, [r7, #14]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1d7      	bne.n	8006318 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	3316      	adds	r3, #22
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	3316      	adds	r3, #22
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006388:	e04c      	b.n	8006424 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	1c59      	adds	r1, r3, #1
 8006392:	61f9      	str	r1, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	2b20      	cmp	r3, #32
 800639e:	d100      	bne.n	80063a2 <get_fileinfo+0xbe>
 80063a0:	e040      	b.n	8006424 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	d101      	bne.n	80063ac <get_fileinfo+0xc8>
 80063a8:	23e5      	movs	r3, #229	; 0xe5
 80063aa:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2b09      	cmp	r3, #9
 80063b0:	d10f      	bne.n	80063d2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80063b2:	89bb      	ldrh	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d105      	bne.n	80063c4 <get_fileinfo+0xe0>
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4413      	add	r3, r2
 80063be:	3316      	adds	r3, #22
 80063c0:	222e      	movs	r2, #46	; 0x2e
 80063c2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	61ba      	str	r2, [r7, #24]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4413      	add	r3, r2
 80063ce:	222e      	movs	r2, #46	; 0x2e
 80063d0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	4413      	add	r3, r2
 80063d8:	3309      	adds	r3, #9
 80063da:	7dfa      	ldrb	r2, [r7, #23]
 80063dc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80063de:	89bb      	ldrh	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d11c      	bne.n	800641e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d913      	bls.n	8006412 <get_fileinfo+0x12e>
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	2b5a      	cmp	r3, #90	; 0x5a
 80063ee:	d810      	bhi.n	8006412 <get_fileinfo+0x12e>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	330c      	adds	r3, #12
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d901      	bls.n	8006404 <get_fileinfo+0x120>
 8006400:	2310      	movs	r3, #16
 8006402:	e000      	b.n	8006406 <get_fileinfo+0x122>
 8006404:	2308      	movs	r3, #8
 8006406:	4013      	ands	r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	3320      	adds	r3, #32
 8006410:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	4413      	add	r3, r2
 8006418:	3316      	adds	r3, #22
 800641a:	7dfa      	ldrb	r2, [r7, #23]
 800641c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	3301      	adds	r3, #1
 8006422:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b0a      	cmp	r3, #10
 8006428:	d9af      	bls.n	800638a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800642a:	89bb      	ldrh	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10d      	bne.n	800644c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	4413      	add	r3, r2
 8006436:	3316      	adds	r3, #22
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	330c      	adds	r3, #12
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <get_fileinfo+0x168>
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	4413      	add	r3, r2
 8006452:	3309      	adds	r3, #9
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	7ada      	ldrb	r2, [r3, #11]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	331c      	adds	r3, #28
 8006468:	4618      	mov	r0, r3
 800646a:	f7fe fecf 	bl	800520c <ld_dword>
 800646e:	4602      	mov	r2, r0
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	3316      	adds	r3, #22
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fec6 	bl	800520c <ld_dword>
 8006480:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	b29a      	uxth	r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	80da      	strh	r2, [r3, #6]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	b29a      	uxth	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	809a      	strh	r2, [r3, #4]
 8006494:	e000      	b.n	8006498 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006496:	bf00      	nop
}
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	61ba      	str	r2, [r7, #24]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4413      	add	r3, r2
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80064ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d0:	2b1f      	cmp	r3, #31
 80064d2:	d940      	bls.n	8006556 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80064d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d6:	2b2f      	cmp	r3, #47	; 0x2f
 80064d8:	d006      	beq.n	80064e8 <create_name+0x48>
 80064da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064dc:	2b5c      	cmp	r3, #92	; 0x5c
 80064de:	d110      	bne.n	8006502 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80064e0:	e002      	b.n	80064e8 <create_name+0x48>
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	3301      	adds	r3, #1
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	4413      	add	r3, r2
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b2f      	cmp	r3, #47	; 0x2f
 80064f2:	d0f6      	beq.n	80064e2 <create_name+0x42>
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	4413      	add	r3, r2
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b5c      	cmp	r3, #92	; 0x5c
 80064fe:	d0f0      	beq.n	80064e2 <create_name+0x42>
			break;
 8006500:	e02a      	b.n	8006558 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2bfe      	cmp	r3, #254	; 0xfe
 8006506:	d901      	bls.n	800650c <create_name+0x6c>
 8006508:	2306      	movs	r3, #6
 800650a:	e177      	b.n	80067fc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800650c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800650e:	b2db      	uxtb	r3, r3
 8006510:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006514:	2101      	movs	r1, #1
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fe9a 	bl	8007250 <ff_convert>
 800651c:	4603      	mov	r3, r0
 800651e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <create_name+0x8a>
 8006526:	2306      	movs	r3, #6
 8006528:	e168      	b.n	80067fc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800652a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800652c:	2b7f      	cmp	r3, #127	; 0x7f
 800652e:	d809      	bhi.n	8006544 <create_name+0xa4>
 8006530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006532:	4619      	mov	r1, r3
 8006534:	48b3      	ldr	r0, [pc, #716]	; (8006804 <create_name+0x364>)
 8006536:	f7fe ff15 	bl	8005364 <chk_chr>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <create_name+0xa4>
 8006540:	2306      	movs	r3, #6
 8006542:	e15b      	b.n	80067fc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	617a      	str	r2, [r7, #20]
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006552:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006554:	e7b4      	b.n	80064c0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006556:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	441a      	add	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006564:	2b1f      	cmp	r3, #31
 8006566:	d801      	bhi.n	800656c <create_name+0xcc>
 8006568:	2304      	movs	r3, #4
 800656a:	e000      	b.n	800656e <create_name+0xce>
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006572:	e011      	b.n	8006598 <create_name+0xf8>
		w = lfn[di - 1];
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800657a:	3b01      	subs	r3, #1
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006588:	2b20      	cmp	r3, #32
 800658a:	d002      	beq.n	8006592 <create_name+0xf2>
 800658c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800658e:	2b2e      	cmp	r3, #46	; 0x2e
 8006590:	d106      	bne.n	80065a0 <create_name+0x100>
		di--;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	3b01      	subs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ea      	bne.n	8006574 <create_name+0xd4>
 800659e:	e000      	b.n	80065a2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80065a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	2200      	movs	r2, #0
 80065ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <create_name+0x118>
 80065b4:	2306      	movs	r3, #6
 80065b6:	e121      	b.n	80067fc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3324      	adds	r3, #36	; 0x24
 80065bc:	220b      	movs	r2, #11
 80065be:	2120      	movs	r1, #32
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe fe8d 	bl	80052e0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e002      	b.n	80065d2 <create_name+0x132>
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d0f5      	beq.n	80065cc <create_name+0x12c>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	2b2e      	cmp	r3, #46	; 0x2e
 80065ec:	d0ee      	beq.n	80065cc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <create_name+0x168>
 80065f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f8:	f043 0303 	orr.w	r3, r3, #3
 80065fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006600:	e002      	b.n	8006608 <create_name+0x168>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	3b01      	subs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <create_name+0x182>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006614:	3b01      	subs	r3, #1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	2b2e      	cmp	r3, #46	; 0x2e
 8006620:	d1ef      	bne.n	8006602 <create_name+0x162>

	i = b = 0; ni = 8;
 8006622:	2300      	movs	r3, #0
 8006624:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006628:	2300      	movs	r3, #0
 800662a:	623b      	str	r3, [r7, #32]
 800662c:	2308      	movs	r3, #8
 800662e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	61ba      	str	r2, [r7, #24]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8090 	beq.w	8006768 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800664a:	2b20      	cmp	r3, #32
 800664c:	d006      	beq.n	800665c <create_name+0x1bc>
 800664e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006650:	2b2e      	cmp	r3, #46	; 0x2e
 8006652:	d10a      	bne.n	800666a <create_name+0x1ca>
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	429a      	cmp	r2, r3
 800665a:	d006      	beq.n	800666a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800665c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006660:	f043 0303 	orr.w	r3, r3, #3
 8006664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006668:	e07d      	b.n	8006766 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800666a:	6a3a      	ldr	r2, [r7, #32]
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	429a      	cmp	r2, r3
 8006670:	d203      	bcs.n	800667a <create_name+0x1da>
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	429a      	cmp	r2, r3
 8006678:	d123      	bne.n	80066c2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	2b0b      	cmp	r3, #11
 800667e:	d106      	bne.n	800668e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006684:	f043 0303 	orr.w	r3, r3, #3
 8006688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800668c:	e06f      	b.n	800676e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	429a      	cmp	r2, r3
 8006694:	d005      	beq.n	80066a2 <create_name+0x202>
 8006696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800669a:	f043 0303 	orr.w	r3, r3, #3
 800669e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d860      	bhi.n	800676c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	2308      	movs	r3, #8
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	230b      	movs	r3, #11
 80066b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80066b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80066c0:	e051      	b.n	8006766 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80066c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066c4:	2b7f      	cmp	r3, #127	; 0x7f
 80066c6:	d914      	bls.n	80066f2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80066c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fdbf 	bl	8007250 <ff_convert>
 80066d2:	4603      	mov	r3, r0
 80066d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80066d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <create_name+0x246>
 80066dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066de:	3b80      	subs	r3, #128	; 0x80
 80066e0:	4a49      	ldr	r2, [pc, #292]	; (8006808 <create_name+0x368>)
 80066e2:	5cd3      	ldrb	r3, [r2, r3]
 80066e4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80066e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ea:	f043 0302 	orr.w	r3, r3, #2
 80066ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80066f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <create_name+0x268>
 80066f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066fa:	4619      	mov	r1, r3
 80066fc:	4843      	ldr	r0, [pc, #268]	; (800680c <create_name+0x36c>)
 80066fe:	f7fe fe31 	bl	8005364 <chk_chr>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d008      	beq.n	800671a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006708:	235f      	movs	r3, #95	; 0x5f
 800670a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800670c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006710:	f043 0303 	orr.w	r3, r3, #3
 8006714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006718:	e01b      	b.n	8006752 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800671a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	d909      	bls.n	8006734 <create_name+0x294>
 8006720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006722:	2b5a      	cmp	r3, #90	; 0x5a
 8006724:	d806      	bhi.n	8006734 <create_name+0x294>
					b |= 2;
 8006726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800672a:	f043 0302 	orr.w	r3, r3, #2
 800672e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006732:	e00e      	b.n	8006752 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006736:	2b60      	cmp	r3, #96	; 0x60
 8006738:	d90b      	bls.n	8006752 <create_name+0x2b2>
 800673a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800673c:	2b7a      	cmp	r3, #122	; 0x7a
 800673e:	d808      	bhi.n	8006752 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800674c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800674e:	3b20      	subs	r3, #32
 8006750:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	623a      	str	r2, [r7, #32]
 8006758:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800675a:	b2d1      	uxtb	r1, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	4413      	add	r3, r2
 8006760:	460a      	mov	r2, r1
 8006762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006766:	e763      	b.n	8006630 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800676c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006774:	2be5      	cmp	r3, #229	; 0xe5
 8006776:	d103      	bne.n	8006780 <create_name+0x2e0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2205      	movs	r2, #5
 800677c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2b08      	cmp	r3, #8
 8006784:	d104      	bne.n	8006790 <create_name+0x2f0>
 8006786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006790:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006794:	f003 030c 	and.w	r3, r3, #12
 8006798:	2b0c      	cmp	r3, #12
 800679a:	d005      	beq.n	80067a8 <create_name+0x308>
 800679c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d105      	bne.n	80067b4 <create_name+0x314>
 80067a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067ac:	f043 0302 	orr.w	r3, r3, #2
 80067b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80067b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d117      	bne.n	80067f0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80067c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d105      	bne.n	80067d8 <create_name+0x338>
 80067cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067d0:	f043 0310 	orr.w	r3, r3, #16
 80067d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80067d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067dc:	f003 030c 	and.w	r3, r3, #12
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d105      	bne.n	80067f0 <create_name+0x350>
 80067e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067e8:	f043 0308 	orr.w	r3, r3, #8
 80067ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80067f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80067fa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3728      	adds	r7, #40	; 0x28
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	08007d4c 	.word	0x08007d4c
 8006808:	08007ddc 	.word	0x08007ddc
 800680c:	08007d58 	.word	0x08007d58

08006810 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006824:	e002      	b.n	800682c <follow_path+0x1c>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b2f      	cmp	r3, #47	; 0x2f
 8006832:	d0f8      	beq.n	8006826 <follow_path+0x16>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b5c      	cmp	r3, #92	; 0x5c
 800683a:	d0f4      	beq.n	8006826 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b1f      	cmp	r3, #31
 8006848:	d80a      	bhi.n	8006860 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2280      	movs	r2, #128	; 0x80
 800684e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006852:	2100      	movs	r1, #0
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff f96b 	bl	8005b30 <dir_sdi>
 800685a:	4603      	mov	r3, r0
 800685c:	75fb      	strb	r3, [r7, #23]
 800685e:	e048      	b.n	80068f2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006860:	463b      	mov	r3, r7
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff fe1b 	bl	80064a0 <create_name>
 800686a:	4603      	mov	r3, r0
 800686c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d139      	bne.n	80068e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff fc75 	bl	8006164 <dir_find>
 800687a:	4603      	mov	r3, r0
 800687c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006884:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b04      	cmp	r3, #4
 8006890:	d12c      	bne.n	80068ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006892:	7afb      	ldrb	r3, [r7, #11]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d127      	bne.n	80068ec <follow_path+0xdc>
 800689c:	2305      	movs	r3, #5
 800689e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80068a0:	e024      	b.n	80068ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068a2:	7afb      	ldrb	r3, [r7, #11]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d121      	bne.n	80068f0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	799b      	ldrb	r3, [r3, #6]
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <follow_path+0xae>
				res = FR_NO_PATH; break;
 80068b8:	2305      	movs	r3, #5
 80068ba:	75fb      	strb	r3, [r7, #23]
 80068bc:	e019      	b.n	80068f2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	8992      	ldrh	r2, [r2, #12]
 80068cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80068d0:	fb02 f200 	mul.w	r2, r2, r0
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	440b      	add	r3, r1
 80068d8:	4619      	mov	r1, r3
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff fa87 	bl	8005dee <ld_clust>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80068e6:	e7bb      	b.n	8006860 <follow_path+0x50>
			if (res != FR_OK) break;
 80068e8:	bf00      	nop
 80068ea:	e002      	b.n	80068f2 <follow_path+0xe2>
				break;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068f0:	bf00      	nop
			}
		}
	}

	return res;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006904:	f04f 33ff 	mov.w	r3, #4294967295
 8006908:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d031      	beq.n	8006976 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e002      	b.n	8006920 <get_ldnumber+0x24>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	3301      	adds	r3, #1
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b1f      	cmp	r3, #31
 8006926:	d903      	bls.n	8006930 <get_ldnumber+0x34>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b3a      	cmp	r3, #58	; 0x3a
 800692e:	d1f4      	bne.n	800691a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b3a      	cmp	r3, #58	; 0x3a
 8006936:	d11c      	bne.n	8006972 <get_ldnumber+0x76>
			tp = *path;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	60fa      	str	r2, [r7, #12]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	3b30      	subs	r3, #48	; 0x30
 8006948:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b09      	cmp	r3, #9
 800694e:	d80e      	bhi.n	800696e <get_ldnumber+0x72>
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	429a      	cmp	r2, r3
 8006956:	d10a      	bne.n	800696e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d107      	bne.n	800696e <get_ldnumber+0x72>
					vol = (int)i;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	e002      	b.n	8006978 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006976:	693b      	ldr	r3, [r7, #16]
}
 8006978:	4618      	mov	r0, r3
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	70da      	strb	r2, [r3, #3]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f04f 32ff 	mov.w	r2, #4294967295
 800699a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fe fdf2 	bl	8005588 <move_window>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <check_fs+0x2a>
 80069aa:	2304      	movs	r3, #4
 80069ac:	e038      	b.n	8006a20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3338      	adds	r3, #56	; 0x38
 80069b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe fc10 	bl	80051dc <ld_word>
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <check_fs+0x48>
 80069c8:	2303      	movs	r3, #3
 80069ca:	e029      	b.n	8006a20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069d2:	2be9      	cmp	r3, #233	; 0xe9
 80069d4:	d009      	beq.n	80069ea <check_fs+0x66>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069dc:	2beb      	cmp	r3, #235	; 0xeb
 80069de:	d11e      	bne.n	8006a1e <check_fs+0x9a>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069e6:	2b90      	cmp	r3, #144	; 0x90
 80069e8:	d119      	bne.n	8006a1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3338      	adds	r3, #56	; 0x38
 80069ee:	3336      	adds	r3, #54	; 0x36
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe fc0b 	bl	800520c <ld_dword>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	4a0a      	ldr	r2, [pc, #40]	; (8006a28 <check_fs+0xa4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d101      	bne.n	8006a06 <check_fs+0x82>
 8006a02:	2300      	movs	r3, #0
 8006a04:	e00c      	b.n	8006a20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3338      	adds	r3, #56	; 0x38
 8006a0a:	3352      	adds	r3, #82	; 0x52
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fbfd 	bl	800520c <ld_dword>
 8006a12:	4603      	mov	r3, r0
 8006a14:	4a05      	ldr	r2, [pc, #20]	; (8006a2c <check_fs+0xa8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d101      	bne.n	8006a1e <check_fs+0x9a>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006a1e:	2302      	movs	r3, #2
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	00544146 	.word	0x00544146
 8006a2c:	33544146 	.word	0x33544146

08006a30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b096      	sub	sp, #88	; 0x58
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff ff59 	bl	80068fc <get_ldnumber>
 8006a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	da01      	bge.n	8006a56 <find_volume+0x26>
 8006a52:	230b      	movs	r3, #11
 8006a54:	e268      	b.n	8006f28 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006a56:	4ab0      	ldr	r2, [pc, #704]	; (8006d18 <find_volume+0x2e8>)
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <find_volume+0x3a>
 8006a66:	230c      	movs	r3, #12
 8006a68:	e25e      	b.n	8006f28 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01a      	beq.n	8006ab6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fb0b 	bl	80050a0 <disk_status>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10c      	bne.n	8006ab6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <find_volume+0x82>
 8006aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006aae:	230a      	movs	r3, #10
 8006ab0:	e23a      	b.n	8006f28 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e238      	b.n	8006f28 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fb03 	bl	80050d4 <disk_initialize>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006ad4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e221      	b.n	8006f28 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <find_volume+0xca>
 8006aea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006af6:	230a      	movs	r3, #10
 8006af8:	e216      	b.n	8006f28 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	7858      	ldrb	r0, [r3, #1]
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	330c      	adds	r3, #12
 8006b02:	461a      	mov	r2, r3
 8006b04:	2102      	movs	r1, #2
 8006b06:	f7fe fb4b 	bl	80051a0 <disk_ioctl>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <find_volume+0xe4>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e209      	b.n	8006f28 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	899b      	ldrh	r3, [r3, #12]
 8006b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1c:	d80d      	bhi.n	8006b3a <find_volume+0x10a>
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	899b      	ldrh	r3, [r3, #12]
 8006b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b26:	d308      	bcc.n	8006b3a <find_volume+0x10a>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	899b      	ldrh	r3, [r3, #12]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	899b      	ldrh	r3, [r3, #12]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <find_volume+0x10e>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e1f4      	b.n	8006f28 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006b42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b46:	f7ff ff1d 	bl	8006984 <check_fs>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006b50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d14b      	bne.n	8006bf0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b58:	2300      	movs	r3, #0
 8006b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b5c:	e01f      	b.n	8006b9e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006b6c:	4413      	add	r3, r2
 8006b6e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	3304      	adds	r3, #4
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d006      	beq.n	8006b88 <find_volume+0x158>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fb44 	bl	800520c <ld_dword>
 8006b84:	4602      	mov	r2, r0
 8006b86:	e000      	b.n	8006b8a <find_volume+0x15a>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006b92:	440b      	add	r3, r1
 8006b94:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d9dc      	bls.n	8006b5e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <find_volume+0x184>
 8006bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006bc2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <find_volume+0x1a6>
 8006bca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bce:	f7ff fed9 	bl	8006984 <check_fs>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	e000      	b.n	8006bd8 <find_volume+0x1a8>
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d905      	bls.n	8006bf0 <find_volume+0x1c0>
 8006be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be6:	3301      	adds	r3, #1
 8006be8:	643b      	str	r3, [r7, #64]	; 0x40
 8006bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d9e1      	bls.n	8006bb4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006bf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d101      	bne.n	8006bfc <find_volume+0x1cc>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e195      	b.n	8006f28 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d901      	bls.n	8006c08 <find_volume+0x1d8>
 8006c04:	230d      	movs	r3, #13
 8006c06:	e18f      	b.n	8006f28 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	3338      	adds	r3, #56	; 0x38
 8006c0c:	330b      	adds	r3, #11
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fe fae4 	bl	80051dc <ld_word>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	899b      	ldrh	r3, [r3, #12]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d001      	beq.n	8006c24 <find_volume+0x1f4>
 8006c20:	230d      	movs	r3, #13
 8006c22:	e181      	b.n	8006f28 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	3338      	adds	r3, #56	; 0x38
 8006c28:	3316      	adds	r3, #22
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fad6 	bl	80051dc <ld_word>
 8006c30:	4603      	mov	r3, r0
 8006c32:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <find_volume+0x218>
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	3338      	adds	r3, #56	; 0x38
 8006c3e:	3324      	adds	r3, #36	; 0x24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe fae3 	bl	800520c <ld_dword>
 8006c46:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c4c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	789b      	ldrb	r3, [r3, #2]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d005      	beq.n	8006c6c <find_volume+0x23c>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	789b      	ldrb	r3, [r3, #2]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d001      	beq.n	8006c6c <find_volume+0x23c>
 8006c68:	230d      	movs	r3, #13
 8006c6a:	e15d      	b.n	8006f28 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	789b      	ldrb	r3, [r3, #2]
 8006c70:	461a      	mov	r2, r3
 8006c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c74:	fb02 f303 	mul.w	r3, r2, r3
 8006c78:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	895b      	ldrh	r3, [r3, #10]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <find_volume+0x270>
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	895b      	ldrh	r3, [r3, #10]
 8006c92:	461a      	mov	r2, r3
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	895b      	ldrh	r3, [r3, #10]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <find_volume+0x274>
 8006ca0:	230d      	movs	r3, #13
 8006ca2:	e141      	b.n	8006f28 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	3338      	adds	r3, #56	; 0x38
 8006ca8:	3311      	adds	r3, #17
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe fa96 	bl	80051dc <ld_word>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	891b      	ldrh	r3, [r3, #8]
 8006cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cbe:	8992      	ldrh	r2, [r2, #12]
 8006cc0:	0952      	lsrs	r2, r2, #5
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cc8:	fb02 f201 	mul.w	r2, r2, r1
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <find_volume+0x2a8>
 8006cd4:	230d      	movs	r3, #13
 8006cd6:	e127      	b.n	8006f28 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cda:	3338      	adds	r3, #56	; 0x38
 8006cdc:	3313      	adds	r3, #19
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fe fa7c 	bl	80051dc <ld_word>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <find_volume+0x2cc>
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	3338      	adds	r3, #56	; 0x38
 8006cf2:	3320      	adds	r3, #32
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe fa89 	bl	800520c <ld_dword>
 8006cfa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	3338      	adds	r3, #56	; 0x38
 8006d00:	330e      	adds	r3, #14
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fa6a 	bl	80051dc <ld_word>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006d0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d104      	bne.n	8006d1c <find_volume+0x2ec>
 8006d12:	230d      	movs	r3, #13
 8006d14:	e108      	b.n	8006f28 <find_volume+0x4f8>
 8006d16:	bf00      	nop
 8006d18:	20000240 	.word	0x20000240

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006d1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d20:	4413      	add	r3, r2
 8006d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d24:	8911      	ldrh	r1, [r2, #8]
 8006d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d28:	8992      	ldrh	r2, [r2, #12]
 8006d2a:	0952      	lsrs	r2, r2, #5
 8006d2c:	b292      	uxth	r2, r2
 8006d2e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006d32:	b292      	uxth	r2, r2
 8006d34:	4413      	add	r3, r2
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d201      	bcs.n	8006d44 <find_volume+0x314>
 8006d40:	230d      	movs	r3, #13
 8006d42:	e0f1      	b.n	8006f28 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d4c:	8952      	ldrh	r2, [r2, #10]
 8006d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <find_volume+0x32e>
 8006d5a:	230d      	movs	r3, #13
 8006d5c:	e0e4      	b.n	8006f28 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d802      	bhi.n	8006d74 <find_volume+0x344>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d802      	bhi.n	8006d84 <find_volume+0x354>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	1c9a      	adds	r2, r3, #2
 8006d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006d92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d96:	441a      	add	r2, r3
 8006d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006d9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	441a      	add	r2, r3
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006da6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d11e      	bne.n	8006dec <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	3338      	adds	r3, #56	; 0x38
 8006db2:	332a      	adds	r3, #42	; 0x2a
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fa11 	bl	80051dc <ld_word>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <find_volume+0x394>
 8006dc0:	230d      	movs	r3, #13
 8006dc2:	e0b1      	b.n	8006f28 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	891b      	ldrh	r3, [r3, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <find_volume+0x3a0>
 8006dcc:	230d      	movs	r3, #13
 8006dce:	e0ab      	b.n	8006f28 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	3338      	adds	r3, #56	; 0x38
 8006dd4:	332c      	adds	r3, #44	; 0x2c
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fa18 	bl	800520c <ld_dword>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dea:	e01f      	b.n	8006e2c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	891b      	ldrh	r3, [r3, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <find_volume+0x3c8>
 8006df4:	230d      	movs	r3, #13
 8006df6:	e097      	b.n	8006f28 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfe:	441a      	add	r2, r3
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d103      	bne.n	8006e14 <find_volume+0x3e4>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	e00a      	b.n	8006e2a <find_volume+0x3fa>
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	085a      	lsrs	r2, r3, #1
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006e2a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	899b      	ldrh	r3, [r3, #12]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e38:	440b      	add	r3, r1
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e3e:	8989      	ldrh	r1, [r1, #12]
 8006e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d201      	bcs.n	8006e4c <find_volume+0x41c>
 8006e48:	230d      	movs	r3, #13
 8006e4a:	e06d      	b.n	8006f28 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e52:	619a      	str	r2, [r3, #24]
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	699a      	ldr	r2, [r3, #24]
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	2280      	movs	r2, #128	; 0x80
 8006e60:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d149      	bne.n	8006efe <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	3338      	adds	r3, #56	; 0x38
 8006e6e:	3330      	adds	r3, #48	; 0x30
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe f9b3 	bl	80051dc <ld_word>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d140      	bne.n	8006efe <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7e:	3301      	adds	r3, #1
 8006e80:	4619      	mov	r1, r3
 8006e82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e84:	f7fe fb80 	bl	8005588 <move_window>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d137      	bne.n	8006efe <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	2200      	movs	r2, #0
 8006e92:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	3338      	adds	r3, #56	; 0x38
 8006e98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe f99d 	bl	80051dc <ld_word>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d127      	bne.n	8006efe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	3338      	adds	r3, #56	; 0x38
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe f9aa 	bl	800520c <ld_dword>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	4a1d      	ldr	r2, [pc, #116]	; (8006f30 <find_volume+0x500>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d11e      	bne.n	8006efe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	3338      	adds	r3, #56	; 0x38
 8006ec4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe f99f 	bl	800520c <ld_dword>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	4a18      	ldr	r2, [pc, #96]	; (8006f34 <find_volume+0x504>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d113      	bne.n	8006efe <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	3338      	adds	r3, #56	; 0x38
 8006eda:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe f994 	bl	800520c <ld_dword>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	3338      	adds	r3, #56	; 0x38
 8006eee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe f98a 	bl	800520c <ld_dword>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006f04:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006f06:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <find_volume+0x508>)
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <find_volume+0x508>)
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <find_volume+0x508>)
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	4a07      	ldr	r2, [pc, #28]	; (8006f3c <find_volume+0x50c>)
 8006f1e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f22:	f7fe fac9 	bl	80054b8 <clear_lock>
#endif
	return FR_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3758      	adds	r7, #88	; 0x58
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	41615252 	.word	0x41615252
 8006f34:	61417272 	.word	0x61417272
 8006f38:	20000244 	.word	0x20000244
 8006f3c:	20000268 	.word	0x20000268

08006f40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006f4a:	2309      	movs	r3, #9
 8006f4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01c      	beq.n	8006f8e <validate+0x4e>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d018      	beq.n	8006f8e <validate+0x4e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d013      	beq.n	8006f8e <validate+0x4e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	889a      	ldrh	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	88db      	ldrh	r3, [r3, #6]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d10c      	bne.n	8006f8e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe f890 	bl	80050a0 <disk_status>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <validate+0x4e>
			res = FR_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <validate+0x5a>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	e000      	b.n	8006f9c <validate+0x5c>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	6013      	str	r3, [r2, #0]
	return res;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006fbe:	f107 0310 	add.w	r3, r7, #16
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff fc9a 	bl	80068fc <get_ldnumber>
 8006fc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	da01      	bge.n	8006fd4 <f_mount+0x28>
 8006fd0:	230b      	movs	r3, #11
 8006fd2:	e02b      	b.n	800702c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006fd4:	4a17      	ldr	r2, [pc, #92]	; (8007034 <f_mount+0x88>)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fdc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006fe4:	69b8      	ldr	r0, [r7, #24]
 8006fe6:	f7fe fa67 	bl	80054b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	490d      	ldr	r1, [pc, #52]	; (8007034 <f_mount+0x88>)
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <f_mount+0x66>
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d001      	beq.n	8007016 <f_mount+0x6a>
 8007012:	2300      	movs	r3, #0
 8007014:	e00a      	b.n	800702c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007016:	f107 010c 	add.w	r1, r7, #12
 800701a:	f107 0308 	add.w	r3, r7, #8
 800701e:	2200      	movs	r2, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff fd05 	bl	8006a30 <find_volume>
 8007026:	4603      	mov	r3, r0
 8007028:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800702a:	7dfb      	ldrb	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20000240 	.word	0x20000240

08007038 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <f_opendir+0x14>
 8007048:	2309      	movs	r3, #9
 800704a:	e064      	b.n	8007116 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007050:	f107 010c 	add.w	r1, r7, #12
 8007054:	463b      	mov	r3, r7
 8007056:	2200      	movs	r2, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fce9 	bl	8006a30 <find_volume>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d14f      	bne.n	8007108 <f_opendir+0xd0>
		obj->fs = fs;
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fbcc 	bl	8006810 <follow_path>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d13d      	bne.n	80070fe <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007088:	b25b      	sxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	db12      	blt.n	80070b4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	799b      	ldrb	r3, [r3, #6]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f7fe fea3 	bl	8005dee <ld_clust>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	609a      	str	r2, [r3, #8]
 80070ae:	e001      	b.n	80070b4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80070b0:	2305      	movs	r3, #5
 80070b2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d121      	bne.n	80070fe <f_opendir+0xc6>
				obj->id = fs->id;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	88da      	ldrh	r2, [r3, #6]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80070c2:	2100      	movs	r1, #0
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fe fd33 	bl	8005b30 <dir_sdi>
 80070ca:	4603      	mov	r3, r0
 80070cc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d114      	bne.n	80070fe <f_opendir+0xc6>
					if (obj->sclust) {
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00d      	beq.n	80070f8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80070dc:	2100      	movs	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fe f95c 	bl	800539c <inc_lock>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d105      	bne.n	80070fe <f_opendir+0xc6>
 80070f2:	2312      	movs	r3, #18
 80070f4:	75fb      	strb	r3, [r7, #23]
 80070f6:	e002      	b.n	80070fe <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2200      	movs	r2, #0
 80070fc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	2b04      	cmp	r3, #4
 8007102:	d101      	bne.n	8007108 <f_opendir+0xd0>
 8007104:	2305      	movs	r3, #5
 8007106:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <f_opendir+0xdc>
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007114:	7dfb      	ldrb	r3, [r7, #23]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f107 0208 	add.w	r2, r7, #8
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff ff05 	bl	8006f40 <validate>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d126      	bne.n	800718e <f_readdir+0x70>
		if (!fno) {
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007146:	2100      	movs	r1, #0
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7fe fcf1 	bl	8005b30 <dir_sdi>
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]
 8007152:	e01c      	b.n	800718e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007154:	2100      	movs	r1, #0
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fe ff5d 	bl	8006016 <dir_read>
 800715c:	4603      	mov	r3, r0
 800715e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b04      	cmp	r3, #4
 8007164:	d101      	bne.n	800716a <f_readdir+0x4c>
 8007166:	2300      	movs	r3, #0
 8007168:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10e      	bne.n	800718e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff f8b6 	bl	80062e4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007178:	2100      	movs	r1, #0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fe fd61 	bl	8005c42 <dir_next>
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b04      	cmp	r3, #4
 8007188:	d101      	bne.n	800718e <f_readdir+0x70>
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80071a6:	2301      	movs	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80071ae:	4b1f      	ldr	r3, [pc, #124]	; (800722c <FATFS_LinkDriverEx+0x94>)
 80071b0:	7a5b      	ldrb	r3, [r3, #9]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d131      	bne.n	800721c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80071b8:	4b1c      	ldr	r3, [pc, #112]	; (800722c <FATFS_LinkDriverEx+0x94>)
 80071ba:	7a5b      	ldrb	r3, [r3, #9]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	4b1a      	ldr	r3, [pc, #104]	; (800722c <FATFS_LinkDriverEx+0x94>)
 80071c2:	2100      	movs	r1, #0
 80071c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80071c6:	4b19      	ldr	r3, [pc, #100]	; (800722c <FATFS_LinkDriverEx+0x94>)
 80071c8:	7a5b      	ldrb	r3, [r3, #9]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4a17      	ldr	r2, [pc, #92]	; (800722c <FATFS_LinkDriverEx+0x94>)
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80071d6:	4b15      	ldr	r3, [pc, #84]	; (800722c <FATFS_LinkDriverEx+0x94>)
 80071d8:	7a5b      	ldrb	r3, [r3, #9]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	4b13      	ldr	r3, [pc, #76]	; (800722c <FATFS_LinkDriverEx+0x94>)
 80071e0:	4413      	add	r3, r2
 80071e2:	79fa      	ldrb	r2, [r7, #7]
 80071e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <FATFS_LinkDriverEx+0x94>)
 80071e8:	7a5b      	ldrb	r3, [r3, #9]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	b2d1      	uxtb	r1, r2
 80071f0:	4a0e      	ldr	r2, [pc, #56]	; (800722c <FATFS_LinkDriverEx+0x94>)
 80071f2:	7251      	strb	r1, [r2, #9]
 80071f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80071f6:	7dbb      	ldrb	r3, [r7, #22]
 80071f8:	3330      	adds	r3, #48	; 0x30
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	3301      	adds	r3, #1
 8007204:	223a      	movs	r2, #58	; 0x3a
 8007206:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	3302      	adds	r3, #2
 800720c:	222f      	movs	r2, #47	; 0x2f
 800720e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3303      	adds	r3, #3
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
}
 800721e:	4618      	mov	r0, r3
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20000468 	.word	0x20000468

08007230 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800723a:	2200      	movs	r2, #0
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff ffaa 	bl	8007198 <FATFS_LinkDriverEx>
 8007244:	4603      	mov	r3, r0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	6039      	str	r1, [r7, #0]
 800725a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	2b7f      	cmp	r3, #127	; 0x7f
 8007260:	d802      	bhi.n	8007268 <ff_convert+0x18>
		c = chr;
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	81fb      	strh	r3, [r7, #14]
 8007266:	e025      	b.n	80072b4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	2bff      	cmp	r3, #255	; 0xff
 8007272:	d805      	bhi.n	8007280 <ff_convert+0x30>
 8007274:	88fb      	ldrh	r3, [r7, #6]
 8007276:	3b80      	subs	r3, #128	; 0x80
 8007278:	4a12      	ldr	r2, [pc, #72]	; (80072c4 <ff_convert+0x74>)
 800727a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800727e:	e000      	b.n	8007282 <ff_convert+0x32>
 8007280:	2300      	movs	r3, #0
 8007282:	81fb      	strh	r3, [r7, #14]
 8007284:	e016      	b.n	80072b4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007286:	2300      	movs	r3, #0
 8007288:	81fb      	strh	r3, [r7, #14]
 800728a:	e009      	b.n	80072a0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800728c:	89fb      	ldrh	r3, [r7, #14]
 800728e:	4a0d      	ldr	r2, [pc, #52]	; (80072c4 <ff_convert+0x74>)
 8007290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007294:	88fa      	ldrh	r2, [r7, #6]
 8007296:	429a      	cmp	r2, r3
 8007298:	d006      	beq.n	80072a8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800729a:	89fb      	ldrh	r3, [r7, #14]
 800729c:	3301      	adds	r3, #1
 800729e:	81fb      	strh	r3, [r7, #14]
 80072a0:	89fb      	ldrh	r3, [r7, #14]
 80072a2:	2b7f      	cmp	r3, #127	; 0x7f
 80072a4:	d9f2      	bls.n	800728c <ff_convert+0x3c>
 80072a6:	e000      	b.n	80072aa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80072a8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80072aa:	89fb      	ldrh	r3, [r7, #14]
 80072ac:	3380      	adds	r3, #128	; 0x80
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80072b4:	89fb      	ldrh	r3, [r7, #14]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	08007e6c 	.word	0x08007e6c

080072c8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d8:	d201      	bcs.n	80072de <ff_wtoupper+0x16>
 80072da:	4b3e      	ldr	r3, [pc, #248]	; (80073d4 <ff_wtoupper+0x10c>)
 80072dc:	e000      	b.n	80072e0 <ff_wtoupper+0x18>
 80072de:	4b3e      	ldr	r3, [pc, #248]	; (80073d8 <ff_wtoupper+0x110>)
 80072e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	1c9a      	adds	r2, r3, #2
 80072e6:	617a      	str	r2, [r7, #20]
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80072ec:	8a7b      	ldrh	r3, [r7, #18]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d068      	beq.n	80073c4 <ff_wtoupper+0xfc>
 80072f2:	88fa      	ldrh	r2, [r7, #6]
 80072f4:	8a7b      	ldrh	r3, [r7, #18]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d364      	bcc.n	80073c4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	1c9a      	adds	r2, r3, #2
 80072fe:	617a      	str	r2, [r7, #20]
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	823b      	strh	r3, [r7, #16]
 8007304:	8a3b      	ldrh	r3, [r7, #16]
 8007306:	0a1b      	lsrs	r3, r3, #8
 8007308:	81fb      	strh	r3, [r7, #14]
 800730a:	8a3b      	ldrh	r3, [r7, #16]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007310:	88fa      	ldrh	r2, [r7, #6]
 8007312:	8a79      	ldrh	r1, [r7, #18]
 8007314:	8a3b      	ldrh	r3, [r7, #16]
 8007316:	440b      	add	r3, r1
 8007318:	429a      	cmp	r2, r3
 800731a:	da49      	bge.n	80073b0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800731c:	89fb      	ldrh	r3, [r7, #14]
 800731e:	2b08      	cmp	r3, #8
 8007320:	d84f      	bhi.n	80073c2 <ff_wtoupper+0xfa>
 8007322:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <ff_wtoupper+0x60>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	0800734d 	.word	0x0800734d
 800732c:	0800735f 	.word	0x0800735f
 8007330:	08007375 	.word	0x08007375
 8007334:	0800737d 	.word	0x0800737d
 8007338:	08007385 	.word	0x08007385
 800733c:	0800738d 	.word	0x0800738d
 8007340:	08007395 	.word	0x08007395
 8007344:	0800739d 	.word	0x0800739d
 8007348:	080073a5 	.word	0x080073a5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800734c:	88fa      	ldrh	r2, [r7, #6]
 800734e:	8a7b      	ldrh	r3, [r7, #18]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4413      	add	r3, r2
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	80fb      	strh	r3, [r7, #6]
 800735c:	e027      	b.n	80073ae <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	8a7b      	ldrh	r3, [r7, #18]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	b29b      	uxth	r3, r3
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	b29b      	uxth	r3, r3
 800736c:	88fa      	ldrh	r2, [r7, #6]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	80fb      	strh	r3, [r7, #6]
 8007372:	e01c      	b.n	80073ae <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	3b10      	subs	r3, #16
 8007378:	80fb      	strh	r3, [r7, #6]
 800737a:	e018      	b.n	80073ae <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	3b20      	subs	r3, #32
 8007380:	80fb      	strh	r3, [r7, #6]
 8007382:	e014      	b.n	80073ae <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	3b30      	subs	r3, #48	; 0x30
 8007388:	80fb      	strh	r3, [r7, #6]
 800738a:	e010      	b.n	80073ae <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	3b1a      	subs	r3, #26
 8007390:	80fb      	strh	r3, [r7, #6]
 8007392:	e00c      	b.n	80073ae <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	3308      	adds	r3, #8
 8007398:	80fb      	strh	r3, [r7, #6]
 800739a:	e008      	b.n	80073ae <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	3b50      	subs	r3, #80	; 0x50
 80073a0:	80fb      	strh	r3, [r7, #6]
 80073a2:	e004      	b.n	80073ae <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80073aa:	80fb      	strh	r3, [r7, #6]
 80073ac:	bf00      	nop
			}
			break;
 80073ae:	e008      	b.n	80073c2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80073b0:	89fb      	ldrh	r3, [r7, #14]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d195      	bne.n	80072e2 <ff_wtoupper+0x1a>
 80073b6:	8a3b      	ldrh	r3, [r7, #16]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4413      	add	r3, r2
 80073be:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80073c0:	e78f      	b.n	80072e2 <ff_wtoupper+0x1a>
			break;
 80073c2:	bf00      	nop
	}

	return chr;
 80073c4:	88fb      	ldrh	r3, [r7, #6]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	08007f6c 	.word	0x08007f6c
 80073d8:	08008160 	.word	0x08008160

080073dc <__errno>:
 80073dc:	4b01      	ldr	r3, [pc, #4]	; (80073e4 <__errno+0x8>)
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000028 	.word	0x20000028

080073e8 <__libc_init_array>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	4d0d      	ldr	r5, [pc, #52]	; (8007420 <__libc_init_array+0x38>)
 80073ec:	4c0d      	ldr	r4, [pc, #52]	; (8007424 <__libc_init_array+0x3c>)
 80073ee:	1b64      	subs	r4, r4, r5
 80073f0:	10a4      	asrs	r4, r4, #2
 80073f2:	2600      	movs	r6, #0
 80073f4:	42a6      	cmp	r6, r4
 80073f6:	d109      	bne.n	800740c <__libc_init_array+0x24>
 80073f8:	4d0b      	ldr	r5, [pc, #44]	; (8007428 <__libc_init_array+0x40>)
 80073fa:	4c0c      	ldr	r4, [pc, #48]	; (800742c <__libc_init_array+0x44>)
 80073fc:	f000 fc56 	bl	8007cac <_init>
 8007400:	1b64      	subs	r4, r4, r5
 8007402:	10a4      	asrs	r4, r4, #2
 8007404:	2600      	movs	r6, #0
 8007406:	42a6      	cmp	r6, r4
 8007408:	d105      	bne.n	8007416 <__libc_init_array+0x2e>
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007410:	4798      	blx	r3
 8007412:	3601      	adds	r6, #1
 8007414:	e7ee      	b.n	80073f4 <__libc_init_array+0xc>
 8007416:	f855 3b04 	ldr.w	r3, [r5], #4
 800741a:	4798      	blx	r3
 800741c:	3601      	adds	r6, #1
 800741e:	e7f2      	b.n	8007406 <__libc_init_array+0x1e>
 8007420:	08008258 	.word	0x08008258
 8007424:	08008258 	.word	0x08008258
 8007428:	08008258 	.word	0x08008258
 800742c:	0800825c 	.word	0x0800825c

08007430 <memset>:
 8007430:	4402      	add	r2, r0
 8007432:	4603      	mov	r3, r0
 8007434:	4293      	cmp	r3, r2
 8007436:	d100      	bne.n	800743a <memset+0xa>
 8007438:	4770      	bx	lr
 800743a:	f803 1b01 	strb.w	r1, [r3], #1
 800743e:	e7f9      	b.n	8007434 <memset+0x4>

08007440 <siprintf>:
 8007440:	b40e      	push	{r1, r2, r3}
 8007442:	b500      	push	{lr}
 8007444:	b09c      	sub	sp, #112	; 0x70
 8007446:	ab1d      	add	r3, sp, #116	; 0x74
 8007448:	9002      	str	r0, [sp, #8]
 800744a:	9006      	str	r0, [sp, #24]
 800744c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007450:	4809      	ldr	r0, [pc, #36]	; (8007478 <siprintf+0x38>)
 8007452:	9107      	str	r1, [sp, #28]
 8007454:	9104      	str	r1, [sp, #16]
 8007456:	4909      	ldr	r1, [pc, #36]	; (800747c <siprintf+0x3c>)
 8007458:	f853 2b04 	ldr.w	r2, [r3], #4
 800745c:	9105      	str	r1, [sp, #20]
 800745e:	6800      	ldr	r0, [r0, #0]
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	a902      	add	r1, sp, #8
 8007464:	f000 f870 	bl	8007548 <_svfiprintf_r>
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	b01c      	add	sp, #112	; 0x70
 8007470:	f85d eb04 	ldr.w	lr, [sp], #4
 8007474:	b003      	add	sp, #12
 8007476:	4770      	bx	lr
 8007478:	20000028 	.word	0x20000028
 800747c:	ffff0208 	.word	0xffff0208

08007480 <strcpy>:
 8007480:	4603      	mov	r3, r0
 8007482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007486:	f803 2b01 	strb.w	r2, [r3], #1
 800748a:	2a00      	cmp	r2, #0
 800748c:	d1f9      	bne.n	8007482 <strcpy+0x2>
 800748e:	4770      	bx	lr

08007490 <__ssputs_r>:
 8007490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	688e      	ldr	r6, [r1, #8]
 8007496:	429e      	cmp	r6, r3
 8007498:	4682      	mov	sl, r0
 800749a:	460c      	mov	r4, r1
 800749c:	4690      	mov	r8, r2
 800749e:	461f      	mov	r7, r3
 80074a0:	d838      	bhi.n	8007514 <__ssputs_r+0x84>
 80074a2:	898a      	ldrh	r2, [r1, #12]
 80074a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074a8:	d032      	beq.n	8007510 <__ssputs_r+0x80>
 80074aa:	6825      	ldr	r5, [r4, #0]
 80074ac:	6909      	ldr	r1, [r1, #16]
 80074ae:	eba5 0901 	sub.w	r9, r5, r1
 80074b2:	6965      	ldr	r5, [r4, #20]
 80074b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074bc:	3301      	adds	r3, #1
 80074be:	444b      	add	r3, r9
 80074c0:	106d      	asrs	r5, r5, #1
 80074c2:	429d      	cmp	r5, r3
 80074c4:	bf38      	it	cc
 80074c6:	461d      	movcc	r5, r3
 80074c8:	0553      	lsls	r3, r2, #21
 80074ca:	d531      	bpl.n	8007530 <__ssputs_r+0xa0>
 80074cc:	4629      	mov	r1, r5
 80074ce:	f000 fb47 	bl	8007b60 <_malloc_r>
 80074d2:	4606      	mov	r6, r0
 80074d4:	b950      	cbnz	r0, 80074ec <__ssputs_r+0x5c>
 80074d6:	230c      	movs	r3, #12
 80074d8:	f8ca 3000 	str.w	r3, [sl]
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ec:	6921      	ldr	r1, [r4, #16]
 80074ee:	464a      	mov	r2, r9
 80074f0:	f000 fabe 	bl	8007a70 <memcpy>
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	6126      	str	r6, [r4, #16]
 8007502:	6165      	str	r5, [r4, #20]
 8007504:	444e      	add	r6, r9
 8007506:	eba5 0509 	sub.w	r5, r5, r9
 800750a:	6026      	str	r6, [r4, #0]
 800750c:	60a5      	str	r5, [r4, #8]
 800750e:	463e      	mov	r6, r7
 8007510:	42be      	cmp	r6, r7
 8007512:	d900      	bls.n	8007516 <__ssputs_r+0x86>
 8007514:	463e      	mov	r6, r7
 8007516:	4632      	mov	r2, r6
 8007518:	6820      	ldr	r0, [r4, #0]
 800751a:	4641      	mov	r1, r8
 800751c:	f000 fab6 	bl	8007a8c <memmove>
 8007520:	68a3      	ldr	r3, [r4, #8]
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	1b9b      	subs	r3, r3, r6
 8007526:	4432      	add	r2, r6
 8007528:	60a3      	str	r3, [r4, #8]
 800752a:	6022      	str	r2, [r4, #0]
 800752c:	2000      	movs	r0, #0
 800752e:	e7db      	b.n	80074e8 <__ssputs_r+0x58>
 8007530:	462a      	mov	r2, r5
 8007532:	f000 fb6f 	bl	8007c14 <_realloc_r>
 8007536:	4606      	mov	r6, r0
 8007538:	2800      	cmp	r0, #0
 800753a:	d1e1      	bne.n	8007500 <__ssputs_r+0x70>
 800753c:	6921      	ldr	r1, [r4, #16]
 800753e:	4650      	mov	r0, sl
 8007540:	f000 fabe 	bl	8007ac0 <_free_r>
 8007544:	e7c7      	b.n	80074d6 <__ssputs_r+0x46>
	...

08007548 <_svfiprintf_r>:
 8007548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754c:	4698      	mov	r8, r3
 800754e:	898b      	ldrh	r3, [r1, #12]
 8007550:	061b      	lsls	r3, r3, #24
 8007552:	b09d      	sub	sp, #116	; 0x74
 8007554:	4607      	mov	r7, r0
 8007556:	460d      	mov	r5, r1
 8007558:	4614      	mov	r4, r2
 800755a:	d50e      	bpl.n	800757a <_svfiprintf_r+0x32>
 800755c:	690b      	ldr	r3, [r1, #16]
 800755e:	b963      	cbnz	r3, 800757a <_svfiprintf_r+0x32>
 8007560:	2140      	movs	r1, #64	; 0x40
 8007562:	f000 fafd 	bl	8007b60 <_malloc_r>
 8007566:	6028      	str	r0, [r5, #0]
 8007568:	6128      	str	r0, [r5, #16]
 800756a:	b920      	cbnz	r0, 8007576 <_svfiprintf_r+0x2e>
 800756c:	230c      	movs	r3, #12
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	f04f 30ff 	mov.w	r0, #4294967295
 8007574:	e0d1      	b.n	800771a <_svfiprintf_r+0x1d2>
 8007576:	2340      	movs	r3, #64	; 0x40
 8007578:	616b      	str	r3, [r5, #20]
 800757a:	2300      	movs	r3, #0
 800757c:	9309      	str	r3, [sp, #36]	; 0x24
 800757e:	2320      	movs	r3, #32
 8007580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007584:	f8cd 800c 	str.w	r8, [sp, #12]
 8007588:	2330      	movs	r3, #48	; 0x30
 800758a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007734 <_svfiprintf_r+0x1ec>
 800758e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007592:	f04f 0901 	mov.w	r9, #1
 8007596:	4623      	mov	r3, r4
 8007598:	469a      	mov	sl, r3
 800759a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800759e:	b10a      	cbz	r2, 80075a4 <_svfiprintf_r+0x5c>
 80075a0:	2a25      	cmp	r2, #37	; 0x25
 80075a2:	d1f9      	bne.n	8007598 <_svfiprintf_r+0x50>
 80075a4:	ebba 0b04 	subs.w	fp, sl, r4
 80075a8:	d00b      	beq.n	80075c2 <_svfiprintf_r+0x7a>
 80075aa:	465b      	mov	r3, fp
 80075ac:	4622      	mov	r2, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7ff ff6d 	bl	8007490 <__ssputs_r>
 80075b6:	3001      	adds	r0, #1
 80075b8:	f000 80aa 	beq.w	8007710 <_svfiprintf_r+0x1c8>
 80075bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075be:	445a      	add	r2, fp
 80075c0:	9209      	str	r2, [sp, #36]	; 0x24
 80075c2:	f89a 3000 	ldrb.w	r3, [sl]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80a2 	beq.w	8007710 <_svfiprintf_r+0x1c8>
 80075cc:	2300      	movs	r3, #0
 80075ce:	f04f 32ff 	mov.w	r2, #4294967295
 80075d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075d6:	f10a 0a01 	add.w	sl, sl, #1
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	9307      	str	r3, [sp, #28]
 80075de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075e2:	931a      	str	r3, [sp, #104]	; 0x68
 80075e4:	4654      	mov	r4, sl
 80075e6:	2205      	movs	r2, #5
 80075e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ec:	4851      	ldr	r0, [pc, #324]	; (8007734 <_svfiprintf_r+0x1ec>)
 80075ee:	f7f8 fdf7 	bl	80001e0 <memchr>
 80075f2:	9a04      	ldr	r2, [sp, #16]
 80075f4:	b9d8      	cbnz	r0, 800762e <_svfiprintf_r+0xe6>
 80075f6:	06d0      	lsls	r0, r2, #27
 80075f8:	bf44      	itt	mi
 80075fa:	2320      	movmi	r3, #32
 80075fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007600:	0711      	lsls	r1, r2, #28
 8007602:	bf44      	itt	mi
 8007604:	232b      	movmi	r3, #43	; 0x2b
 8007606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800760a:	f89a 3000 	ldrb.w	r3, [sl]
 800760e:	2b2a      	cmp	r3, #42	; 0x2a
 8007610:	d015      	beq.n	800763e <_svfiprintf_r+0xf6>
 8007612:	9a07      	ldr	r2, [sp, #28]
 8007614:	4654      	mov	r4, sl
 8007616:	2000      	movs	r0, #0
 8007618:	f04f 0c0a 	mov.w	ip, #10
 800761c:	4621      	mov	r1, r4
 800761e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007622:	3b30      	subs	r3, #48	; 0x30
 8007624:	2b09      	cmp	r3, #9
 8007626:	d94e      	bls.n	80076c6 <_svfiprintf_r+0x17e>
 8007628:	b1b0      	cbz	r0, 8007658 <_svfiprintf_r+0x110>
 800762a:	9207      	str	r2, [sp, #28]
 800762c:	e014      	b.n	8007658 <_svfiprintf_r+0x110>
 800762e:	eba0 0308 	sub.w	r3, r0, r8
 8007632:	fa09 f303 	lsl.w	r3, r9, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	46a2      	mov	sl, r4
 800763c:	e7d2      	b.n	80075e4 <_svfiprintf_r+0x9c>
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	1d19      	adds	r1, r3, #4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	9103      	str	r1, [sp, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	bfbb      	ittet	lt
 800764a:	425b      	neglt	r3, r3
 800764c:	f042 0202 	orrlt.w	r2, r2, #2
 8007650:	9307      	strge	r3, [sp, #28]
 8007652:	9307      	strlt	r3, [sp, #28]
 8007654:	bfb8      	it	lt
 8007656:	9204      	strlt	r2, [sp, #16]
 8007658:	7823      	ldrb	r3, [r4, #0]
 800765a:	2b2e      	cmp	r3, #46	; 0x2e
 800765c:	d10c      	bne.n	8007678 <_svfiprintf_r+0x130>
 800765e:	7863      	ldrb	r3, [r4, #1]
 8007660:	2b2a      	cmp	r3, #42	; 0x2a
 8007662:	d135      	bne.n	80076d0 <_svfiprintf_r+0x188>
 8007664:	9b03      	ldr	r3, [sp, #12]
 8007666:	1d1a      	adds	r2, r3, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	9203      	str	r2, [sp, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	bfb8      	it	lt
 8007670:	f04f 33ff 	movlt.w	r3, #4294967295
 8007674:	3402      	adds	r4, #2
 8007676:	9305      	str	r3, [sp, #20]
 8007678:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007744 <_svfiprintf_r+0x1fc>
 800767c:	7821      	ldrb	r1, [r4, #0]
 800767e:	2203      	movs	r2, #3
 8007680:	4650      	mov	r0, sl
 8007682:	f7f8 fdad 	bl	80001e0 <memchr>
 8007686:	b140      	cbz	r0, 800769a <_svfiprintf_r+0x152>
 8007688:	2340      	movs	r3, #64	; 0x40
 800768a:	eba0 000a 	sub.w	r0, r0, sl
 800768e:	fa03 f000 	lsl.w	r0, r3, r0
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	4303      	orrs	r3, r0
 8007696:	3401      	adds	r4, #1
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769e:	4826      	ldr	r0, [pc, #152]	; (8007738 <_svfiprintf_r+0x1f0>)
 80076a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076a4:	2206      	movs	r2, #6
 80076a6:	f7f8 fd9b 	bl	80001e0 <memchr>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d038      	beq.n	8007720 <_svfiprintf_r+0x1d8>
 80076ae:	4b23      	ldr	r3, [pc, #140]	; (800773c <_svfiprintf_r+0x1f4>)
 80076b0:	bb1b      	cbnz	r3, 80076fa <_svfiprintf_r+0x1b2>
 80076b2:	9b03      	ldr	r3, [sp, #12]
 80076b4:	3307      	adds	r3, #7
 80076b6:	f023 0307 	bic.w	r3, r3, #7
 80076ba:	3308      	adds	r3, #8
 80076bc:	9303      	str	r3, [sp, #12]
 80076be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c0:	4433      	add	r3, r6
 80076c2:	9309      	str	r3, [sp, #36]	; 0x24
 80076c4:	e767      	b.n	8007596 <_svfiprintf_r+0x4e>
 80076c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ca:	460c      	mov	r4, r1
 80076cc:	2001      	movs	r0, #1
 80076ce:	e7a5      	b.n	800761c <_svfiprintf_r+0xd4>
 80076d0:	2300      	movs	r3, #0
 80076d2:	3401      	adds	r4, #1
 80076d4:	9305      	str	r3, [sp, #20]
 80076d6:	4619      	mov	r1, r3
 80076d8:	f04f 0c0a 	mov.w	ip, #10
 80076dc:	4620      	mov	r0, r4
 80076de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e2:	3a30      	subs	r2, #48	; 0x30
 80076e4:	2a09      	cmp	r2, #9
 80076e6:	d903      	bls.n	80076f0 <_svfiprintf_r+0x1a8>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0c5      	beq.n	8007678 <_svfiprintf_r+0x130>
 80076ec:	9105      	str	r1, [sp, #20]
 80076ee:	e7c3      	b.n	8007678 <_svfiprintf_r+0x130>
 80076f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076f4:	4604      	mov	r4, r0
 80076f6:	2301      	movs	r3, #1
 80076f8:	e7f0      	b.n	80076dc <_svfiprintf_r+0x194>
 80076fa:	ab03      	add	r3, sp, #12
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	462a      	mov	r2, r5
 8007700:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <_svfiprintf_r+0x1f8>)
 8007702:	a904      	add	r1, sp, #16
 8007704:	4638      	mov	r0, r7
 8007706:	f3af 8000 	nop.w
 800770a:	1c42      	adds	r2, r0, #1
 800770c:	4606      	mov	r6, r0
 800770e:	d1d6      	bne.n	80076be <_svfiprintf_r+0x176>
 8007710:	89ab      	ldrh	r3, [r5, #12]
 8007712:	065b      	lsls	r3, r3, #25
 8007714:	f53f af2c 	bmi.w	8007570 <_svfiprintf_r+0x28>
 8007718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800771a:	b01d      	add	sp, #116	; 0x74
 800771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007720:	ab03      	add	r3, sp, #12
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	462a      	mov	r2, r5
 8007726:	4b06      	ldr	r3, [pc, #24]	; (8007740 <_svfiprintf_r+0x1f8>)
 8007728:	a904      	add	r1, sp, #16
 800772a:	4638      	mov	r0, r7
 800772c:	f000 f87a 	bl	8007824 <_printf_i>
 8007730:	e7eb      	b.n	800770a <_svfiprintf_r+0x1c2>
 8007732:	bf00      	nop
 8007734:	0800821c 	.word	0x0800821c
 8007738:	08008226 	.word	0x08008226
 800773c:	00000000 	.word	0x00000000
 8007740:	08007491 	.word	0x08007491
 8007744:	08008222 	.word	0x08008222

08007748 <_printf_common>:
 8007748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	4616      	mov	r6, r2
 800774e:	4699      	mov	r9, r3
 8007750:	688a      	ldr	r2, [r1, #8]
 8007752:	690b      	ldr	r3, [r1, #16]
 8007754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007758:	4293      	cmp	r3, r2
 800775a:	bfb8      	it	lt
 800775c:	4613      	movlt	r3, r2
 800775e:	6033      	str	r3, [r6, #0]
 8007760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007764:	4607      	mov	r7, r0
 8007766:	460c      	mov	r4, r1
 8007768:	b10a      	cbz	r2, 800776e <_printf_common+0x26>
 800776a:	3301      	adds	r3, #1
 800776c:	6033      	str	r3, [r6, #0]
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	0699      	lsls	r1, r3, #26
 8007772:	bf42      	ittt	mi
 8007774:	6833      	ldrmi	r3, [r6, #0]
 8007776:	3302      	addmi	r3, #2
 8007778:	6033      	strmi	r3, [r6, #0]
 800777a:	6825      	ldr	r5, [r4, #0]
 800777c:	f015 0506 	ands.w	r5, r5, #6
 8007780:	d106      	bne.n	8007790 <_printf_common+0x48>
 8007782:	f104 0a19 	add.w	sl, r4, #25
 8007786:	68e3      	ldr	r3, [r4, #12]
 8007788:	6832      	ldr	r2, [r6, #0]
 800778a:	1a9b      	subs	r3, r3, r2
 800778c:	42ab      	cmp	r3, r5
 800778e:	dc26      	bgt.n	80077de <_printf_common+0x96>
 8007790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007794:	1e13      	subs	r3, r2, #0
 8007796:	6822      	ldr	r2, [r4, #0]
 8007798:	bf18      	it	ne
 800779a:	2301      	movne	r3, #1
 800779c:	0692      	lsls	r2, r2, #26
 800779e:	d42b      	bmi.n	80077f8 <_printf_common+0xb0>
 80077a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077a4:	4649      	mov	r1, r9
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c0      	blx	r8
 80077aa:	3001      	adds	r0, #1
 80077ac:	d01e      	beq.n	80077ec <_printf_common+0xa4>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	68e5      	ldr	r5, [r4, #12]
 80077b2:	6832      	ldr	r2, [r6, #0]
 80077b4:	f003 0306 	and.w	r3, r3, #6
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	bf08      	it	eq
 80077bc:	1aad      	subeq	r5, r5, r2
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	6922      	ldr	r2, [r4, #16]
 80077c2:	bf0c      	ite	eq
 80077c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077c8:	2500      	movne	r5, #0
 80077ca:	4293      	cmp	r3, r2
 80077cc:	bfc4      	itt	gt
 80077ce:	1a9b      	subgt	r3, r3, r2
 80077d0:	18ed      	addgt	r5, r5, r3
 80077d2:	2600      	movs	r6, #0
 80077d4:	341a      	adds	r4, #26
 80077d6:	42b5      	cmp	r5, r6
 80077d8:	d11a      	bne.n	8007810 <_printf_common+0xc8>
 80077da:	2000      	movs	r0, #0
 80077dc:	e008      	b.n	80077f0 <_printf_common+0xa8>
 80077de:	2301      	movs	r3, #1
 80077e0:	4652      	mov	r2, sl
 80077e2:	4649      	mov	r1, r9
 80077e4:	4638      	mov	r0, r7
 80077e6:	47c0      	blx	r8
 80077e8:	3001      	adds	r0, #1
 80077ea:	d103      	bne.n	80077f4 <_printf_common+0xac>
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
 80077f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f4:	3501      	adds	r5, #1
 80077f6:	e7c6      	b.n	8007786 <_printf_common+0x3e>
 80077f8:	18e1      	adds	r1, r4, r3
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	2030      	movs	r0, #48	; 0x30
 80077fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007802:	4422      	add	r2, r4
 8007804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800780c:	3302      	adds	r3, #2
 800780e:	e7c7      	b.n	80077a0 <_printf_common+0x58>
 8007810:	2301      	movs	r3, #1
 8007812:	4622      	mov	r2, r4
 8007814:	4649      	mov	r1, r9
 8007816:	4638      	mov	r0, r7
 8007818:	47c0      	blx	r8
 800781a:	3001      	adds	r0, #1
 800781c:	d0e6      	beq.n	80077ec <_printf_common+0xa4>
 800781e:	3601      	adds	r6, #1
 8007820:	e7d9      	b.n	80077d6 <_printf_common+0x8e>
	...

08007824 <_printf_i>:
 8007824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007828:	460c      	mov	r4, r1
 800782a:	4691      	mov	r9, r2
 800782c:	7e27      	ldrb	r7, [r4, #24]
 800782e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007830:	2f78      	cmp	r7, #120	; 0x78
 8007832:	4680      	mov	r8, r0
 8007834:	469a      	mov	sl, r3
 8007836:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800783a:	d807      	bhi.n	800784c <_printf_i+0x28>
 800783c:	2f62      	cmp	r7, #98	; 0x62
 800783e:	d80a      	bhi.n	8007856 <_printf_i+0x32>
 8007840:	2f00      	cmp	r7, #0
 8007842:	f000 80d8 	beq.w	80079f6 <_printf_i+0x1d2>
 8007846:	2f58      	cmp	r7, #88	; 0x58
 8007848:	f000 80a3 	beq.w	8007992 <_printf_i+0x16e>
 800784c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007854:	e03a      	b.n	80078cc <_printf_i+0xa8>
 8007856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800785a:	2b15      	cmp	r3, #21
 800785c:	d8f6      	bhi.n	800784c <_printf_i+0x28>
 800785e:	a001      	add	r0, pc, #4	; (adr r0, 8007864 <_printf_i+0x40>)
 8007860:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007864:	080078bd 	.word	0x080078bd
 8007868:	080078d1 	.word	0x080078d1
 800786c:	0800784d 	.word	0x0800784d
 8007870:	0800784d 	.word	0x0800784d
 8007874:	0800784d 	.word	0x0800784d
 8007878:	0800784d 	.word	0x0800784d
 800787c:	080078d1 	.word	0x080078d1
 8007880:	0800784d 	.word	0x0800784d
 8007884:	0800784d 	.word	0x0800784d
 8007888:	0800784d 	.word	0x0800784d
 800788c:	0800784d 	.word	0x0800784d
 8007890:	080079dd 	.word	0x080079dd
 8007894:	08007901 	.word	0x08007901
 8007898:	080079bf 	.word	0x080079bf
 800789c:	0800784d 	.word	0x0800784d
 80078a0:	0800784d 	.word	0x0800784d
 80078a4:	080079ff 	.word	0x080079ff
 80078a8:	0800784d 	.word	0x0800784d
 80078ac:	08007901 	.word	0x08007901
 80078b0:	0800784d 	.word	0x0800784d
 80078b4:	0800784d 	.word	0x0800784d
 80078b8:	080079c7 	.word	0x080079c7
 80078bc:	680b      	ldr	r3, [r1, #0]
 80078be:	1d1a      	adds	r2, r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	600a      	str	r2, [r1, #0]
 80078c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078cc:	2301      	movs	r3, #1
 80078ce:	e0a3      	b.n	8007a18 <_printf_i+0x1f4>
 80078d0:	6825      	ldr	r5, [r4, #0]
 80078d2:	6808      	ldr	r0, [r1, #0]
 80078d4:	062e      	lsls	r6, r5, #24
 80078d6:	f100 0304 	add.w	r3, r0, #4
 80078da:	d50a      	bpl.n	80078f2 <_printf_i+0xce>
 80078dc:	6805      	ldr	r5, [r0, #0]
 80078de:	600b      	str	r3, [r1, #0]
 80078e0:	2d00      	cmp	r5, #0
 80078e2:	da03      	bge.n	80078ec <_printf_i+0xc8>
 80078e4:	232d      	movs	r3, #45	; 0x2d
 80078e6:	426d      	negs	r5, r5
 80078e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ec:	485e      	ldr	r0, [pc, #376]	; (8007a68 <_printf_i+0x244>)
 80078ee:	230a      	movs	r3, #10
 80078f0:	e019      	b.n	8007926 <_printf_i+0x102>
 80078f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80078f6:	6805      	ldr	r5, [r0, #0]
 80078f8:	600b      	str	r3, [r1, #0]
 80078fa:	bf18      	it	ne
 80078fc:	b22d      	sxthne	r5, r5
 80078fe:	e7ef      	b.n	80078e0 <_printf_i+0xbc>
 8007900:	680b      	ldr	r3, [r1, #0]
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	1d18      	adds	r0, r3, #4
 8007906:	6008      	str	r0, [r1, #0]
 8007908:	0628      	lsls	r0, r5, #24
 800790a:	d501      	bpl.n	8007910 <_printf_i+0xec>
 800790c:	681d      	ldr	r5, [r3, #0]
 800790e:	e002      	b.n	8007916 <_printf_i+0xf2>
 8007910:	0669      	lsls	r1, r5, #25
 8007912:	d5fb      	bpl.n	800790c <_printf_i+0xe8>
 8007914:	881d      	ldrh	r5, [r3, #0]
 8007916:	4854      	ldr	r0, [pc, #336]	; (8007a68 <_printf_i+0x244>)
 8007918:	2f6f      	cmp	r7, #111	; 0x6f
 800791a:	bf0c      	ite	eq
 800791c:	2308      	moveq	r3, #8
 800791e:	230a      	movne	r3, #10
 8007920:	2100      	movs	r1, #0
 8007922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007926:	6866      	ldr	r6, [r4, #4]
 8007928:	60a6      	str	r6, [r4, #8]
 800792a:	2e00      	cmp	r6, #0
 800792c:	bfa2      	ittt	ge
 800792e:	6821      	ldrge	r1, [r4, #0]
 8007930:	f021 0104 	bicge.w	r1, r1, #4
 8007934:	6021      	strge	r1, [r4, #0]
 8007936:	b90d      	cbnz	r5, 800793c <_printf_i+0x118>
 8007938:	2e00      	cmp	r6, #0
 800793a:	d04d      	beq.n	80079d8 <_printf_i+0x1b4>
 800793c:	4616      	mov	r6, r2
 800793e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007942:	fb03 5711 	mls	r7, r3, r1, r5
 8007946:	5dc7      	ldrb	r7, [r0, r7]
 8007948:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800794c:	462f      	mov	r7, r5
 800794e:	42bb      	cmp	r3, r7
 8007950:	460d      	mov	r5, r1
 8007952:	d9f4      	bls.n	800793e <_printf_i+0x11a>
 8007954:	2b08      	cmp	r3, #8
 8007956:	d10b      	bne.n	8007970 <_printf_i+0x14c>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	07df      	lsls	r7, r3, #31
 800795c:	d508      	bpl.n	8007970 <_printf_i+0x14c>
 800795e:	6923      	ldr	r3, [r4, #16]
 8007960:	6861      	ldr	r1, [r4, #4]
 8007962:	4299      	cmp	r1, r3
 8007964:	bfde      	ittt	le
 8007966:	2330      	movle	r3, #48	; 0x30
 8007968:	f806 3c01 	strble.w	r3, [r6, #-1]
 800796c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007970:	1b92      	subs	r2, r2, r6
 8007972:	6122      	str	r2, [r4, #16]
 8007974:	f8cd a000 	str.w	sl, [sp]
 8007978:	464b      	mov	r3, r9
 800797a:	aa03      	add	r2, sp, #12
 800797c:	4621      	mov	r1, r4
 800797e:	4640      	mov	r0, r8
 8007980:	f7ff fee2 	bl	8007748 <_printf_common>
 8007984:	3001      	adds	r0, #1
 8007986:	d14c      	bne.n	8007a22 <_printf_i+0x1fe>
 8007988:	f04f 30ff 	mov.w	r0, #4294967295
 800798c:	b004      	add	sp, #16
 800798e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007992:	4835      	ldr	r0, [pc, #212]	; (8007a68 <_printf_i+0x244>)
 8007994:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	680e      	ldr	r6, [r1, #0]
 800799c:	061f      	lsls	r7, r3, #24
 800799e:	f856 5b04 	ldr.w	r5, [r6], #4
 80079a2:	600e      	str	r6, [r1, #0]
 80079a4:	d514      	bpl.n	80079d0 <_printf_i+0x1ac>
 80079a6:	07d9      	lsls	r1, r3, #31
 80079a8:	bf44      	itt	mi
 80079aa:	f043 0320 	orrmi.w	r3, r3, #32
 80079ae:	6023      	strmi	r3, [r4, #0]
 80079b0:	b91d      	cbnz	r5, 80079ba <_printf_i+0x196>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	f023 0320 	bic.w	r3, r3, #32
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	2310      	movs	r3, #16
 80079bc:	e7b0      	b.n	8007920 <_printf_i+0xfc>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	f043 0320 	orr.w	r3, r3, #32
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	2378      	movs	r3, #120	; 0x78
 80079c8:	4828      	ldr	r0, [pc, #160]	; (8007a6c <_printf_i+0x248>)
 80079ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079ce:	e7e3      	b.n	8007998 <_printf_i+0x174>
 80079d0:	065e      	lsls	r6, r3, #25
 80079d2:	bf48      	it	mi
 80079d4:	b2ad      	uxthmi	r5, r5
 80079d6:	e7e6      	b.n	80079a6 <_printf_i+0x182>
 80079d8:	4616      	mov	r6, r2
 80079da:	e7bb      	b.n	8007954 <_printf_i+0x130>
 80079dc:	680b      	ldr	r3, [r1, #0]
 80079de:	6826      	ldr	r6, [r4, #0]
 80079e0:	6960      	ldr	r0, [r4, #20]
 80079e2:	1d1d      	adds	r5, r3, #4
 80079e4:	600d      	str	r5, [r1, #0]
 80079e6:	0635      	lsls	r5, r6, #24
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	d501      	bpl.n	80079f0 <_printf_i+0x1cc>
 80079ec:	6018      	str	r0, [r3, #0]
 80079ee:	e002      	b.n	80079f6 <_printf_i+0x1d2>
 80079f0:	0671      	lsls	r1, r6, #25
 80079f2:	d5fb      	bpl.n	80079ec <_printf_i+0x1c8>
 80079f4:	8018      	strh	r0, [r3, #0]
 80079f6:	2300      	movs	r3, #0
 80079f8:	6123      	str	r3, [r4, #16]
 80079fa:	4616      	mov	r6, r2
 80079fc:	e7ba      	b.n	8007974 <_printf_i+0x150>
 80079fe:	680b      	ldr	r3, [r1, #0]
 8007a00:	1d1a      	adds	r2, r3, #4
 8007a02:	600a      	str	r2, [r1, #0]
 8007a04:	681e      	ldr	r6, [r3, #0]
 8007a06:	6862      	ldr	r2, [r4, #4]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7f8 fbe8 	bl	80001e0 <memchr>
 8007a10:	b108      	cbz	r0, 8007a16 <_printf_i+0x1f2>
 8007a12:	1b80      	subs	r0, r0, r6
 8007a14:	6060      	str	r0, [r4, #4]
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	6123      	str	r3, [r4, #16]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a20:	e7a8      	b.n	8007974 <_printf_i+0x150>
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	4632      	mov	r2, r6
 8007a26:	4649      	mov	r1, r9
 8007a28:	4640      	mov	r0, r8
 8007a2a:	47d0      	blx	sl
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d0ab      	beq.n	8007988 <_printf_i+0x164>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	079b      	lsls	r3, r3, #30
 8007a34:	d413      	bmi.n	8007a5e <_printf_i+0x23a>
 8007a36:	68e0      	ldr	r0, [r4, #12]
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	bfb8      	it	lt
 8007a3e:	4618      	movlt	r0, r3
 8007a40:	e7a4      	b.n	800798c <_printf_i+0x168>
 8007a42:	2301      	movs	r3, #1
 8007a44:	4632      	mov	r2, r6
 8007a46:	4649      	mov	r1, r9
 8007a48:	4640      	mov	r0, r8
 8007a4a:	47d0      	blx	sl
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d09b      	beq.n	8007988 <_printf_i+0x164>
 8007a50:	3501      	adds	r5, #1
 8007a52:	68e3      	ldr	r3, [r4, #12]
 8007a54:	9903      	ldr	r1, [sp, #12]
 8007a56:	1a5b      	subs	r3, r3, r1
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	dcf2      	bgt.n	8007a42 <_printf_i+0x21e>
 8007a5c:	e7eb      	b.n	8007a36 <_printf_i+0x212>
 8007a5e:	2500      	movs	r5, #0
 8007a60:	f104 0619 	add.w	r6, r4, #25
 8007a64:	e7f5      	b.n	8007a52 <_printf_i+0x22e>
 8007a66:	bf00      	nop
 8007a68:	0800822d 	.word	0x0800822d
 8007a6c:	0800823e 	.word	0x0800823e

08007a70 <memcpy>:
 8007a70:	440a      	add	r2, r1
 8007a72:	4291      	cmp	r1, r2
 8007a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a78:	d100      	bne.n	8007a7c <memcpy+0xc>
 8007a7a:	4770      	bx	lr
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a86:	4291      	cmp	r1, r2
 8007a88:	d1f9      	bne.n	8007a7e <memcpy+0xe>
 8007a8a:	bd10      	pop	{r4, pc}

08007a8c <memmove>:
 8007a8c:	4288      	cmp	r0, r1
 8007a8e:	b510      	push	{r4, lr}
 8007a90:	eb01 0402 	add.w	r4, r1, r2
 8007a94:	d902      	bls.n	8007a9c <memmove+0x10>
 8007a96:	4284      	cmp	r4, r0
 8007a98:	4623      	mov	r3, r4
 8007a9a:	d807      	bhi.n	8007aac <memmove+0x20>
 8007a9c:	1e43      	subs	r3, r0, #1
 8007a9e:	42a1      	cmp	r1, r4
 8007aa0:	d008      	beq.n	8007ab4 <memmove+0x28>
 8007aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aaa:	e7f8      	b.n	8007a9e <memmove+0x12>
 8007aac:	4402      	add	r2, r0
 8007aae:	4601      	mov	r1, r0
 8007ab0:	428a      	cmp	r2, r1
 8007ab2:	d100      	bne.n	8007ab6 <memmove+0x2a>
 8007ab4:	bd10      	pop	{r4, pc}
 8007ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007abe:	e7f7      	b.n	8007ab0 <memmove+0x24>

08007ac0 <_free_r>:
 8007ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ac2:	2900      	cmp	r1, #0
 8007ac4:	d048      	beq.n	8007b58 <_free_r+0x98>
 8007ac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aca:	9001      	str	r0, [sp, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f1a1 0404 	sub.w	r4, r1, #4
 8007ad2:	bfb8      	it	lt
 8007ad4:	18e4      	addlt	r4, r4, r3
 8007ad6:	f000 f8d3 	bl	8007c80 <__malloc_lock>
 8007ada:	4a20      	ldr	r2, [pc, #128]	; (8007b5c <_free_r+0x9c>)
 8007adc:	9801      	ldr	r0, [sp, #4]
 8007ade:	6813      	ldr	r3, [r2, #0]
 8007ae0:	4615      	mov	r5, r2
 8007ae2:	b933      	cbnz	r3, 8007af2 <_free_r+0x32>
 8007ae4:	6063      	str	r3, [r4, #4]
 8007ae6:	6014      	str	r4, [r2, #0]
 8007ae8:	b003      	add	sp, #12
 8007aea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007aee:	f000 b8cd 	b.w	8007c8c <__malloc_unlock>
 8007af2:	42a3      	cmp	r3, r4
 8007af4:	d90b      	bls.n	8007b0e <_free_r+0x4e>
 8007af6:	6821      	ldr	r1, [r4, #0]
 8007af8:	1862      	adds	r2, r4, r1
 8007afa:	4293      	cmp	r3, r2
 8007afc:	bf04      	itt	eq
 8007afe:	681a      	ldreq	r2, [r3, #0]
 8007b00:	685b      	ldreq	r3, [r3, #4]
 8007b02:	6063      	str	r3, [r4, #4]
 8007b04:	bf04      	itt	eq
 8007b06:	1852      	addeq	r2, r2, r1
 8007b08:	6022      	streq	r2, [r4, #0]
 8007b0a:	602c      	str	r4, [r5, #0]
 8007b0c:	e7ec      	b.n	8007ae8 <_free_r+0x28>
 8007b0e:	461a      	mov	r2, r3
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	b10b      	cbz	r3, 8007b18 <_free_r+0x58>
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	d9fa      	bls.n	8007b0e <_free_r+0x4e>
 8007b18:	6811      	ldr	r1, [r2, #0]
 8007b1a:	1855      	adds	r5, r2, r1
 8007b1c:	42a5      	cmp	r5, r4
 8007b1e:	d10b      	bne.n	8007b38 <_free_r+0x78>
 8007b20:	6824      	ldr	r4, [r4, #0]
 8007b22:	4421      	add	r1, r4
 8007b24:	1854      	adds	r4, r2, r1
 8007b26:	42a3      	cmp	r3, r4
 8007b28:	6011      	str	r1, [r2, #0]
 8007b2a:	d1dd      	bne.n	8007ae8 <_free_r+0x28>
 8007b2c:	681c      	ldr	r4, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	6053      	str	r3, [r2, #4]
 8007b32:	4421      	add	r1, r4
 8007b34:	6011      	str	r1, [r2, #0]
 8007b36:	e7d7      	b.n	8007ae8 <_free_r+0x28>
 8007b38:	d902      	bls.n	8007b40 <_free_r+0x80>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	6003      	str	r3, [r0, #0]
 8007b3e:	e7d3      	b.n	8007ae8 <_free_r+0x28>
 8007b40:	6825      	ldr	r5, [r4, #0]
 8007b42:	1961      	adds	r1, r4, r5
 8007b44:	428b      	cmp	r3, r1
 8007b46:	bf04      	itt	eq
 8007b48:	6819      	ldreq	r1, [r3, #0]
 8007b4a:	685b      	ldreq	r3, [r3, #4]
 8007b4c:	6063      	str	r3, [r4, #4]
 8007b4e:	bf04      	itt	eq
 8007b50:	1949      	addeq	r1, r1, r5
 8007b52:	6021      	streq	r1, [r4, #0]
 8007b54:	6054      	str	r4, [r2, #4]
 8007b56:	e7c7      	b.n	8007ae8 <_free_r+0x28>
 8007b58:	b003      	add	sp, #12
 8007b5a:	bd30      	pop	{r4, r5, pc}
 8007b5c:	20000474 	.word	0x20000474

08007b60 <_malloc_r>:
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	1ccd      	adds	r5, r1, #3
 8007b64:	f025 0503 	bic.w	r5, r5, #3
 8007b68:	3508      	adds	r5, #8
 8007b6a:	2d0c      	cmp	r5, #12
 8007b6c:	bf38      	it	cc
 8007b6e:	250c      	movcc	r5, #12
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	4606      	mov	r6, r0
 8007b74:	db01      	blt.n	8007b7a <_malloc_r+0x1a>
 8007b76:	42a9      	cmp	r1, r5
 8007b78:	d903      	bls.n	8007b82 <_malloc_r+0x22>
 8007b7a:	230c      	movs	r3, #12
 8007b7c:	6033      	str	r3, [r6, #0]
 8007b7e:	2000      	movs	r0, #0
 8007b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b82:	f000 f87d 	bl	8007c80 <__malloc_lock>
 8007b86:	4921      	ldr	r1, [pc, #132]	; (8007c0c <_malloc_r+0xac>)
 8007b88:	680a      	ldr	r2, [r1, #0]
 8007b8a:	4614      	mov	r4, r2
 8007b8c:	b99c      	cbnz	r4, 8007bb6 <_malloc_r+0x56>
 8007b8e:	4f20      	ldr	r7, [pc, #128]	; (8007c10 <_malloc_r+0xb0>)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	b923      	cbnz	r3, 8007b9e <_malloc_r+0x3e>
 8007b94:	4621      	mov	r1, r4
 8007b96:	4630      	mov	r0, r6
 8007b98:	f000 f862 	bl	8007c60 <_sbrk_r>
 8007b9c:	6038      	str	r0, [r7, #0]
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f000 f85d 	bl	8007c60 <_sbrk_r>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d123      	bne.n	8007bf2 <_malloc_r+0x92>
 8007baa:	230c      	movs	r3, #12
 8007bac:	6033      	str	r3, [r6, #0]
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f000 f86c 	bl	8007c8c <__malloc_unlock>
 8007bb4:	e7e3      	b.n	8007b7e <_malloc_r+0x1e>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	1b5b      	subs	r3, r3, r5
 8007bba:	d417      	bmi.n	8007bec <_malloc_r+0x8c>
 8007bbc:	2b0b      	cmp	r3, #11
 8007bbe:	d903      	bls.n	8007bc8 <_malloc_r+0x68>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	441c      	add	r4, r3
 8007bc4:	6025      	str	r5, [r4, #0]
 8007bc6:	e004      	b.n	8007bd2 <_malloc_r+0x72>
 8007bc8:	6863      	ldr	r3, [r4, #4]
 8007bca:	42a2      	cmp	r2, r4
 8007bcc:	bf0c      	ite	eq
 8007bce:	600b      	streq	r3, [r1, #0]
 8007bd0:	6053      	strne	r3, [r2, #4]
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 f85a 	bl	8007c8c <__malloc_unlock>
 8007bd8:	f104 000b 	add.w	r0, r4, #11
 8007bdc:	1d23      	adds	r3, r4, #4
 8007bde:	f020 0007 	bic.w	r0, r0, #7
 8007be2:	1ac2      	subs	r2, r0, r3
 8007be4:	d0cc      	beq.n	8007b80 <_malloc_r+0x20>
 8007be6:	1a1b      	subs	r3, r3, r0
 8007be8:	50a3      	str	r3, [r4, r2]
 8007bea:	e7c9      	b.n	8007b80 <_malloc_r+0x20>
 8007bec:	4622      	mov	r2, r4
 8007bee:	6864      	ldr	r4, [r4, #4]
 8007bf0:	e7cc      	b.n	8007b8c <_malloc_r+0x2c>
 8007bf2:	1cc4      	adds	r4, r0, #3
 8007bf4:	f024 0403 	bic.w	r4, r4, #3
 8007bf8:	42a0      	cmp	r0, r4
 8007bfa:	d0e3      	beq.n	8007bc4 <_malloc_r+0x64>
 8007bfc:	1a21      	subs	r1, r4, r0
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f000 f82e 	bl	8007c60 <_sbrk_r>
 8007c04:	3001      	adds	r0, #1
 8007c06:	d1dd      	bne.n	8007bc4 <_malloc_r+0x64>
 8007c08:	e7cf      	b.n	8007baa <_malloc_r+0x4a>
 8007c0a:	bf00      	nop
 8007c0c:	20000474 	.word	0x20000474
 8007c10:	20000478 	.word	0x20000478

08007c14 <_realloc_r>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	4607      	mov	r7, r0
 8007c18:	4614      	mov	r4, r2
 8007c1a:	460e      	mov	r6, r1
 8007c1c:	b921      	cbnz	r1, 8007c28 <_realloc_r+0x14>
 8007c1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c22:	4611      	mov	r1, r2
 8007c24:	f7ff bf9c 	b.w	8007b60 <_malloc_r>
 8007c28:	b922      	cbnz	r2, 8007c34 <_realloc_r+0x20>
 8007c2a:	f7ff ff49 	bl	8007ac0 <_free_r>
 8007c2e:	4625      	mov	r5, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c34:	f000 f830 	bl	8007c98 <_malloc_usable_size_r>
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d20f      	bcs.n	8007c5c <_realloc_r+0x48>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7ff ff8e 	bl	8007b60 <_malloc_r>
 8007c44:	4605      	mov	r5, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d0f2      	beq.n	8007c30 <_realloc_r+0x1c>
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	f7ff ff0f 	bl	8007a70 <memcpy>
 8007c52:	4631      	mov	r1, r6
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff ff33 	bl	8007ac0 <_free_r>
 8007c5a:	e7e9      	b.n	8007c30 <_realloc_r+0x1c>
 8007c5c:	4635      	mov	r5, r6
 8007c5e:	e7e7      	b.n	8007c30 <_realloc_r+0x1c>

08007c60 <_sbrk_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d06      	ldr	r5, [pc, #24]	; (8007c7c <_sbrk_r+0x1c>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	f7f9 fdd8 	bl	8001820 <_sbrk>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_sbrk_r+0x1a>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_sbrk_r+0x1a>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	200047cc 	.word	0x200047cc

08007c80 <__malloc_lock>:
 8007c80:	4801      	ldr	r0, [pc, #4]	; (8007c88 <__malloc_lock+0x8>)
 8007c82:	f000 b811 	b.w	8007ca8 <__retarget_lock_acquire_recursive>
 8007c86:	bf00      	nop
 8007c88:	200047d4 	.word	0x200047d4

08007c8c <__malloc_unlock>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	; (8007c94 <__malloc_unlock+0x8>)
 8007c8e:	f000 b80c 	b.w	8007caa <__retarget_lock_release_recursive>
 8007c92:	bf00      	nop
 8007c94:	200047d4 	.word	0x200047d4

08007c98 <_malloc_usable_size_r>:
 8007c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c9c:	1f18      	subs	r0, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bfbc      	itt	lt
 8007ca2:	580b      	ldrlt	r3, [r1, r0]
 8007ca4:	18c0      	addlt	r0, r0, r3
 8007ca6:	4770      	bx	lr

08007ca8 <__retarget_lock_acquire_recursive>:
 8007ca8:	4770      	bx	lr

08007caa <__retarget_lock_release_recursive>:
 8007caa:	4770      	bx	lr

08007cac <_init>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	bf00      	nop
 8007cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb2:	bc08      	pop	{r3}
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	4770      	bx	lr

08007cb8 <_fini>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	bf00      	nop
 8007cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cbe:	bc08      	pop	{r3}
 8007cc0:	469e      	mov	lr, r3
 8007cc2:	4770      	bx	lr
